import { __extends } from "tslib";
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import * as common from 'select2-component';
export * from 'select2-component';
/**
 * @public
 */
var AutoComplete = /** @class */ (function (_super) {
    __extends(AutoComplete, _super);
    function AutoComplete() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.hoveringValue = null;
        _this.option = null;
        _this.isOpen = false;
        _this.lastScrollTopIndex = 0;
        _this.onChange = function (e) {
            if (_this.props.search) {
                _this.props.search(e.currentTarget.value);
            }
            if (_this.props.update) {
                _this.props.update(e.currentTarget.value);
            }
        };
        return _this;
    }
    Object.defineProperty(AutoComplete.prototype, "dropdownStyle", {
        get: function () {
            return common.getDropdownStyle(this.isOpen && this.props.data.length > 0);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AutoComplete.prototype, "containerStyle", {
        get: function () {
            return common.getContainerStyle(false, this.isOpen && this.props.data.length > 0);
        },
        enumerable: false,
        configurable: true
    });
    AutoComplete.prototype.UNSAFE_componentWillMount = function () {
        var option = common.getOptionsByValue(this.props.data, this.props.value, false);
        if (option !== null) {
            this.option = option;
            this.setState({ option: this.option });
        }
        if (!Array.isArray(option)) {
            this.hoveringValue = this.props.value;
        }
        this.setState({ hoveringValue: this.hoveringValue });
    };
    AutoComplete.prototype.componentDidMount = function () {
        var theElement = ReactDOM.findDOMNode(this);
        this.searchInputElement = theElement.childNodes[0].childNodes[0].childNodes[0].childNodes[0];
        this.resultsElement = theElement.childNodes[1].childNodes[0].childNodes[0].childNodes[0];
    };
    AutoComplete.prototype.render = function () {
        var _this = this;
        var results = this.renderResult();
        return (React.createElement("div", { className: this.containerStyle },
            React.createElement("div", { className: 'selection' },
                React.createElement("div", { className: 'select2-search select2-search--dropdown' },
                    React.createElement("input", { value: this.props.value, onChange: this.onChange, onKeyDown: function (e) { return _this.keyDown(e); }, onKeyUp: function (e) { return _this.keyUp(e); }, onKeyPress: function (e) { return _this.keyPress(e); }, onBlur: function () { return _this.focusout(); }, onClick: function () { return _this.toggleOpenAndClose(); }, className: 'select2-search__field', type: 'search', role: 'textbox', autoComplete: 'off', autoCorrect: 'off', autoCapitalize: 'off', spellCheck: false }))),
            React.createElement("div", { className: this.dropdownStyle },
                React.createElement("div", { className: 'select2-dropdown' },
                    React.createElement("div", { className: 'select2-results' },
                        React.createElement("ul", { className: 'select2-results__options', role: 'tree', tabIndex: -1, onKeyDown: function (e) { return _this.keyDown(e); } }, results))))));
    };
    AutoComplete.prototype.renderResult = function () {
        var _this = this;
        return this.getFilteredData(false).map(function (groupOrOption, i) {
            var options = groupOrOption.options;
            if (options) {
                var optionsElements = options.map(function (option, j) {
                    var optionElement = option.component
                        ? React.createElement(option.component, { option: option })
                        : option.label;
                    return (React.createElement("li", { className: _this.getOptionStyle(option), key: j, role: 'treeitem', "aria-selected": _this.isSelected(option), "aria-disabled": _this.isDisabled(option), onMouseEnter: function () { return _this.mouseenter(option); }, onClick: function () { return _this.click(option); } }, optionElement));
                });
                return (React.createElement("li", { className: 'select2-results__option', role: 'group', key: i },
                    React.createElement("strong", { className: 'select2-results__group' }, groupOrOption.label),
                    React.createElement("ul", { className: 'select2-results__options select2-results__options--nested' }, optionsElements)));
            }
            else {
                var option_1 = groupOrOption;
                var optionElement = option_1.component
                    ? React.createElement(option_1.component, { option: option_1 })
                    : option_1.label;
                return (React.createElement("li", { className: _this.getOptionStyle(option_1), key: i, role: 'treeitem', "aria-selected": _this.isSelected(option_1), "aria-disabled": _this.isDisabled(option_1), onMouseEnter: function () { return _this.mouseenter(option_1); }, onClick: function () { return _this.click(option_1); } }, optionElement));
            }
        });
    };
    AutoComplete.prototype.getFilteredData = function (canSetState) {
        var result = this.props.data;
        if (common.valueIsNotInFilteredData(result, this.hoveringValue)) {
            this.hoveringValue = common.getFirstAvailableOption(result);
            if (canSetState) {
                this.setState({ hoveringValue: this.hoveringValue });
            }
            if (this.resultsElement) {
                var lastScrollTopIndex = common.getLastScrollTopIndex(this.hoveringValue, this.resultsElement, result, this.lastScrollTopIndex);
                if (lastScrollTopIndex !== null) {
                    this.lastScrollTopIndex = lastScrollTopIndex;
                    if (canSetState) {
                        this.setState({ lastScrollTopIndex: this.lastScrollTopIndex });
                    }
                }
            }
        }
        return result;
    };
    AutoComplete.prototype.getOptionStyle = function (option) {
        return common.getOptionStyle(option, this.hoveringValue);
    };
    AutoComplete.prototype.mouseenter = function (option) {
        if (!option.disabled) {
            this.hoveringValue = option.value;
            this.setState({ hoveringValue: this.hoveringValue });
        }
    };
    AutoComplete.prototype.click = function (option) {
        if (!option.disabled) {
            this.select(option);
        }
        if (this.focusoutTimer) {
            clearTimeout(this.focusoutTimer);
        }
    };
    AutoComplete.prototype.toggleOpenAndClose = function () {
        this.isOpen = !this.isOpen;
        this.setState({ isOpen: this.isOpen });
        if (this.isOpen) {
            this.focusSearchboxOrResultsElement();
            if (this.resultsElement) {
                var lastScrollTopIndex = common.getLastScrollTopIndex(this.hoveringValue, this.resultsElement, this.props.data, this.lastScrollTopIndex);
                if (lastScrollTopIndex !== null) {
                    this.lastScrollTopIndex = lastScrollTopIndex;
                }
            }
        }
        if (this.focusoutTimer) {
            clearTimeout(this.focusoutTimer);
        }
    };
    AutoComplete.prototype.focusout = function () {
        var _this = this;
        this.focusoutTimer = setTimeout(function () {
            _this.isOpen = false;
            _this.setState({ isOpen: _this.isOpen });
            _this.focusoutTimer = undefined;
        }, common.timeout);
    };
    AutoComplete.prototype.moveUp = function () {
        this.hoveringValue = common.getPreviousOption(this.getFilteredData(true), this.hoveringValue);
        this.setState({ hoveringValue: this.hoveringValue });
        if (this.resultsElement) {
            var lastScrollTopIndex = common.getLastScrollTopIndex(this.hoveringValue, this.resultsElement, this.getFilteredData(true), this.lastScrollTopIndex);
            if (lastScrollTopIndex !== null) {
                this.lastScrollTopIndex = lastScrollTopIndex;
                this.setState({ lastScrollTopIndex: this.lastScrollTopIndex });
            }
        }
    };
    AutoComplete.prototype.moveDown = function () {
        this.hoveringValue = common.getNextOption(this.getFilteredData(true), this.hoveringValue);
        this.setState({ hoveringValue: this.hoveringValue });
        if (this.resultsElement) {
            var lastScrollTopIndex = common.getLastScrollTopIndex(this.hoveringValue, this.resultsElement, this.getFilteredData(true), this.lastScrollTopIndex);
            if (lastScrollTopIndex !== null) {
                this.lastScrollTopIndex = lastScrollTopIndex;
                this.setState({ lastScrollTopIndex: this.lastScrollTopIndex });
            }
        }
    };
    AutoComplete.prototype.selectByEnter = function () {
        if (this.hoveringValue) {
            var option = common.getOptionByValue(this.props.data, this.hoveringValue);
            this.select(option);
        }
    };
    AutoComplete.prototype.select = function (option) {
        if (option !== null) {
            this.option = option;
            this.isOpen = false;
            this.setState({
                option: this.option,
                isOpen: this.isOpen
            });
        }
        if (this.props.select) {
            this.props.select(this.option.value);
        }
        if (this.props.update) {
            this.props.update(this.option.value);
        }
    };
    AutoComplete.prototype.keyDown = function (e) {
        if (this.props.keydown) {
            this.props.keydown(e);
        }
        if (e.keyCode === 40) {
            this.moveDown();
            e.preventDefault();
        }
        else if (e.keyCode === 38) {
            this.moveUp();
            e.preventDefault();
        }
        else if (e.keyCode === 13) {
            this.selectByEnter();
            e.preventDefault();
        }
    };
    AutoComplete.prototype.keyUp = function (e) {
        if (this.props.keyup) {
            this.props.keyup(e);
        }
    };
    AutoComplete.prototype.keyPress = function (e) {
        if (this.props.keypress) {
            this.props.keypress(e);
        }
    };
    AutoComplete.prototype.isSelected = function (option) {
        return common.isSelected(this.option, option, false);
    };
    AutoComplete.prototype.isDisabled = function (option) {
        return option.disabled ? 'true' : 'false';
    };
    AutoComplete.prototype.focusSearchboxOrResultsElement = function () {
        if (this.searchInputElement) {
            this.searchInputElement.focus();
        }
    };
    return AutoComplete;
}(React.PureComponent));
export { AutoComplete };
