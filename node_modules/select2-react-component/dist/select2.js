import { __extends } from "tslib";
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import * as common from 'select2-component';
export * from 'select2-component';
/**
 * @public
 */
var Select2 = /** @class */ (function (_super) {
    __extends(Select2, _super);
    function Select2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.hoveringValue = null;
        _this.option = null;
        _this.isOpen = false;
        _this.innerSearchText = '';
        _this.lastScrollTopIndex = 0;
        _this.value = _this.props.value;
        _this.onChange = function (e) {
            _this.searchText = e.currentTarget.value;
            _this.setState({ searchText: _this.searchText });
        };
        return _this;
    }
    Object.defineProperty(Select2.prototype, "searchText", {
        get: function () {
            return this.innerSearchText;
        },
        set: function (text) {
            if (this.props.customSearchEnabled && this.props.search) {
                this.props.search(text);
            }
            this.innerSearchText = text;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Select2.prototype, "dropdownStyle", {
        get: function () {
            return common.getDropdownStyle(this.isOpen);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Select2.prototype, "containerStyle", {
        get: function () {
            return common.getContainerStyle(this.props.disabled, this.isOpen);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Select2.prototype, "selectionStyle", {
        get: function () {
            return common.getSelectionStyle(this.props.multiple);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Select2.prototype, "isSearchboxHidden", {
        get: function () {
            return this.props.customSearchEnabled
                ? false
                : common.isSearchboxHiddex(this.props.data, this.props.minCountForSearch);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Select2.prototype, "searchStyle", {
        get: function () {
            return common.getSearchStyle(this.isSearchboxHidden);
        },
        enumerable: false,
        configurable: true
    });
    Select2.prototype.UNSAFE_componentWillReceiveProps = function (nextProps) {
        var _this = this;
        if (nextProps.value !== this.value) {
            this.value = nextProps.value;
            this.setState({ value: nextProps.value }, function () {
                _this.updateOptionAndHoveringValue();
            });
        }
    };
    Select2.prototype.updateOptionAndHoveringValue = function () {
        var option = common.getOptionsByValue(this.props.data, this.value, this.props.multiple);
        if (option !== null) {
            this.option = option;
            this.setState({ option: this.option });
        }
        if (!Array.isArray(option)) {
            this.hoveringValue = this.value;
        }
        this.setState({ hoveringValue: this.hoveringValue });
    };
    Select2.prototype.UNSAFE_componentWillMount = function () {
        this.updateOptionAndHoveringValue();
    };
    Select2.prototype.componentDidMount = function () {
        var theElement = ReactDOM.findDOMNode(this);
        this.searchInputElement = theElement.childNodes[1].childNodes[0].childNodes[0].childNodes[0];
        this.resultsElement = theElement.childNodes[1].childNodes[0].childNodes[1].childNodes[0];
        this.mounted = true;
        this.value = this.props.value;
    };
    Select2.prototype.componentWillUnmount = function () {
        this.mounted = false;
        this.cancelFocusoutTimer();
    };
    Select2.prototype.render = function () {
        var _this = this;
        var results = this.renderResult();
        var selection = this.renderSelection();
        return (React.createElement("div", { className: this.containerStyle },
            React.createElement("div", { className: 'selection', onClick: function () { return _this.toggleOpenAndClose(); } },
                React.createElement("div", { className: this.selectionStyle, role: 'combobox' }, selection)),
            React.createElement("div", { className: this.dropdownStyle },
                React.createElement("div", { className: 'select2-dropdown select2-dropdown--below' },
                    React.createElement("div", { className: this.searchStyle },
                        React.createElement("input", { value: this.searchText, onChange: this.onChange, onKeyDown: function (e) { return _this.keyDown(e); }, onKeyUp: function (e) { return _this.keyUp(e); }, onKeyPress: function (e) { return _this.keyPress(e); }, onFocus: function () { return _this.cancelFocusoutTimer(); }, onBlur: function () { return _this.focusout(); }, className: 'select2-search__field', type: 'search', role: 'textbox', autoComplete: 'off', autoCorrect: 'off', autoCapitalize: 'off', maxLength: this.props.maximumInputLength, spellCheck: false })),
                    React.createElement("div", { className: 'select2-results' },
                        React.createElement("ul", { className: 'select2-results__options', role: 'tree', tabIndex: -1, onKeyDown: function (e) { return _this.keyDown(e); }, onFocus: function () { return _this.cancelFocusoutTimer(); }, onBlur: function () { return _this.focusout(); } }, results))))));
    };
    Select2.prototype.renderSelection = function () {
        var _this = this;
        if (this.props.multiple) {
            var items = this.option.map(function (op, i) { return (React.createElement("li", { className: 'select2-selection__choice', title: op.label, key: i },
                React.createElement("span", { onClick: function (e) { return _this.removeSelection(e, op); }, className: 'select2-selection__choice__remove', role: 'presentation' }, "\u00D7"),
                op.label)); });
            return (React.createElement("ul", { className: 'select2-selection__rendered' }, items));
        }
        else {
            var option = this.option;
            var label = option
                ? (option.component ? React.createElement(option.component, { option: option }) : option.label)
                : React.createElement("span", { className: 'select2-selection__placeholder' }, this.props.placeholder);
            return [
                React.createElement("span", { key: 'label', className: 'select2-selection__rendered', title: option ? option.label : '' }, label),
                React.createElement("span", { key: 'arrow', className: 'select2-selection__arrow', role: 'presentation' },
                    React.createElement("b", { role: 'presentation' }))
            ];
        }
    };
    Select2.prototype.renderResult = function () {
        var _this = this;
        return this.getFilteredData(false).map(function (groupOrOption, i) {
            var options = groupOrOption.options;
            if (options) {
                var optionsElements = options.map(function (option, j) {
                    var optionElement = option.component
                        ? React.createElement(option.component, { option: option })
                        : option.label;
                    return (React.createElement("li", { className: _this.getOptionStyle(option), key: j, role: 'treeitem', "aria-selected": _this.isSelected(option), "aria-disabled": _this.isDisabled(option), onMouseEnter: function () { return _this.mouseenter(option); }, onClick: function () { return _this.click(option); } }, optionElement));
                });
                return (React.createElement("li", { className: 'select2-results__option', role: 'group', key: i },
                    React.createElement("strong", { className: 'select2-results__group' }, groupOrOption.label),
                    React.createElement("ul", { className: 'select2-results__options select2-results__options--nested' }, optionsElements)));
            }
            else {
                var option_1 = groupOrOption;
                var optionElement = option_1.component
                    ? React.createElement(option_1.component, { option: option_1 })
                    : option_1.label;
                return (React.createElement("li", { className: _this.getOptionStyle(option_1), key: i, role: 'treeitem', "aria-selected": _this.isSelected(option_1), "aria-disabled": _this.isDisabled(option_1), onMouseEnter: function () { return _this.mouseenter(option_1); }, onClick: function () { return _this.click(option_1); } }, optionElement));
            }
        });
    };
    Select2.prototype.getFilteredData = function (canSetState) {
        var result = this.props.customSearchEnabled
            || (this.props.minimumInputLength && this.props.minimumInputLength > this.searchText.length)
            ? this.props.data
            : common.getFilteredData(this.props.data, this.searchText);
        if (common.valueIsNotInFilteredData(result, this.hoveringValue)) {
            this.hoveringValue = common.getFirstAvailableOption(result);
            if (canSetState) {
                this.setState({ hoveringValue: this.hoveringValue });
            }
            if (this.resultsElement) {
                var lastScrollTopIndex = common.getLastScrollTopIndex(this.hoveringValue, this.resultsElement, result, this.lastScrollTopIndex);
                if (lastScrollTopIndex !== null) {
                    this.lastScrollTopIndex = lastScrollTopIndex;
                    if (canSetState) {
                        this.setState({ lastScrollTopIndex: this.lastScrollTopIndex });
                    }
                }
            }
        }
        return result;
    };
    Select2.prototype.getOptionStyle = function (option) {
        return common.getOptionStyle(option, this.hoveringValue);
    };
    Select2.prototype.mouseenter = function (option) {
        if (!option.disabled) {
            this.hoveringValue = option.value;
            this.setState({ hoveringValue: this.hoveringValue });
        }
    };
    Select2.prototype.click = function (option) {
        if (!option.disabled) {
            this.select(option);
        }
        if (this.focusoutTimer) {
            clearTimeout(this.focusoutTimer);
        }
    };
    Select2.prototype.toggleOpenAndClose = function () {
        var _this = this;
        if (this.props.disabled) {
            return;
        }
        this.isOpen = !this.isOpen;
        this.setState({ isOpen: this.isOpen });
        if (this.isOpen) {
            if (!this.props.keepSearchText) {
                this.innerSearchText = '';
            }
            this.setState({ searchText: this.searchText }, function () {
                _this.focusSearchboxOrResultsElement();
                if (_this.resultsElement) {
                    var lastScrollTopIndex = common.getLastScrollTopIndex(_this.hoveringValue, _this.resultsElement, _this.props.data, _this.lastScrollTopIndex);
                    if (lastScrollTopIndex !== null) {
                        _this.lastScrollTopIndex = lastScrollTopIndex;
                    }
                }
            });
            if (this.props.open) {
                this.props.open();
            }
        }
        if (this.focusoutTimer) {
            clearTimeout(this.focusoutTimer);
        }
    };
    Select2.prototype.focusout = function () {
        var _this = this;
        this.focusoutTimer = setTimeout(function () {
            _this.isOpen = false;
            if (_this.mounted) {
                _this.setState({ isOpen: _this.isOpen });
            }
            _this.focusoutTimer = undefined;
        }, common.timeout);
    };
    Select2.prototype.moveUp = function () {
        this.hoveringValue = common.getPreviousOption(this.getFilteredData(true), this.hoveringValue);
        this.setState({ hoveringValue: this.hoveringValue });
        if (this.resultsElement) {
            var lastScrollTopIndex = common.getLastScrollTopIndex(this.hoveringValue, this.resultsElement, this.getFilteredData(true), this.lastScrollTopIndex);
            if (lastScrollTopIndex !== null) {
                this.lastScrollTopIndex = lastScrollTopIndex;
                this.setState({ lastScrollTopIndex: this.lastScrollTopIndex });
            }
        }
    };
    Select2.prototype.moveDown = function () {
        this.hoveringValue = common.getNextOption(this.getFilteredData(true), this.hoveringValue);
        this.setState({ hoveringValue: this.hoveringValue });
        if (this.resultsElement) {
            var lastScrollTopIndex = common.getLastScrollTopIndex(this.hoveringValue, this.resultsElement, this.getFilteredData(true), this.lastScrollTopIndex);
            if (lastScrollTopIndex !== null) {
                this.lastScrollTopIndex = lastScrollTopIndex;
                this.setState({ lastScrollTopIndex: this.lastScrollTopIndex });
            }
        }
    };
    Select2.prototype.selectByEnter = function () {
        if (this.hoveringValue) {
            var option = common.getOptionByValue(this.props.data, this.hoveringValue);
            this.select(option);
        }
    };
    Select2.prototype.select = function (option) {
        if (option !== null) {
            if (this.props.multiple) {
                var options = this.option;
                var index = options.findIndex(function (op) { return op.value === option.value; });
                if (index === -1) {
                    options.push(option);
                }
                else {
                    options.splice(index, 1);
                }
                this.setState({
                    option: this.option
                });
            }
            else {
                this.option = option;
                this.isOpen = false;
                this.setState({
                    option: this.option,
                    isOpen: this.isOpen
                });
            }
        }
        if (this.props.update) {
            this.props.update(this.props.multiple ? this.option.map(function (op) { return op.value; }) : this.option.value);
        }
    };
    Select2.prototype.keyDown = function (e) {
        if (this.props.keydown) {
            this.props.keydown(e);
        }
        if (e.keyCode === 40) {
            this.moveDown();
            e.preventDefault();
        }
        else if (e.keyCode === 38) {
            this.moveUp();
            e.preventDefault();
        }
        else if (e.keyCode === 13) {
            this.selectByEnter();
            e.preventDefault();
        }
    };
    Select2.prototype.keyUp = function (e) {
        if (this.props.keyup) {
            this.props.keyup(e);
        }
    };
    Select2.prototype.keyPress = function (e) {
        if (this.props.keypress) {
            this.props.keypress(e);
        }
    };
    Select2.prototype.isSelected = function (option) {
        return common.isSelected(this.option, option, this.props.multiple);
    };
    Select2.prototype.isDisabled = function (option) {
        return option.disabled ? 'true' : 'false';
    };
    Select2.prototype.focusSearchboxOrResultsElement = function () {
        if (!this.isSearchboxHidden) {
            if (this.searchInputElement) {
                this.searchInputElement.focus();
            }
        }
        else {
            if (this.resultsElement) {
                this.resultsElement.focus();
            }
        }
    };
    Select2.prototype.removeSelection = function (e, option) {
        var _this = this;
        common.removeSelection(this.option, option);
        if (this.props.update) {
            this.props.update(this.option.map(function (op) { return op.value; }));
        }
        e.preventDefault();
        e.stopPropagation();
        if (this.isOpen) {
            this.setState({ option: this.option }, function () {
                _this.focusSearchboxOrResultsElement();
            });
        }
        if (this.focusoutTimer) {
            clearTimeout(this.focusoutTimer);
        }
    };
    Select2.prototype.cancelFocusoutTimer = function () {
        if (this.focusoutTimer) {
            clearTimeout(this.focusoutTimer);
        }
    };
    return Select2;
}(React.PureComponent));
export { Select2 };
