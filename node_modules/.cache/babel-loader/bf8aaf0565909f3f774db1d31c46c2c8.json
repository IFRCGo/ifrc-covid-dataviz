{"ast":null,"code":"import * as d3 from \"d3\";\nimport moment from 'moment';\nexport function drawTimechart(data, options) {\n  console.log('draw timechart');\n  console.log(data);\n  console.log(options); // define date range\n\n  const minDate = moment(new Date(2020, 0, 1));\n  const maxDate = moment(new Date(d3.max(data.who_data, function (d) {\n    return d.date;\n  })));\n  const numIntervals = d3.max(data.who_data, function (d, i) {\n    return d[options.timeline_frequency + 'Total'];\n  });\n  const svg = d3.select('#timechart_svg').attr('fill', 'blue');\n  const width = parseInt(svg.attr('width'));\n  const barWidth = width / numIntervals;\n  const xScale = d3.scaleLinear().range([0, width]).domain([0, numIntervals]);\n  console.log({\n    'x0': xScale(0)\n  });\n  console.log({\n    'x70': xScale(73)\n  });\n  console.log({\n    'width': width\n  });\n  console.log({\n    'barWidth': barWidth\n  });\n  console.log(minDate);\n  console.log(maxDate);\n  console.log({\n    numIntervals\n  }); // const groupedData = d3.group(data.who_data, d => d[options.timeline_frequency+'Total'], d => d.ifrc_region)\n\n  const groupedData = {};\n  data.who_data.forEach(function (d, i) {\n    groupedData[d[options.timeline_frequency + 'Total']] = groupedData[d[options.timeline_frequency + 'Total']] || {};\n    if (options.timeline_frequency == 'day') groupedData[d[options.timeline_frequency + 'Total']].date = d.date;\n    if (options.timeline_frequency == 'week') groupedData[d[options.timeline_frequency + 'Total']].date = moment(d.date).startOf('isoWeek').toDate();\n    if (options.timeline_frequency == 'month') groupedData[d[options.timeline_frequency + 'Total']].date = moment(d.date).startOf('month').toDate();\n    groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region] = groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region] || {\n      new_cases: 0,\n      new_deaths: 0,\n      cumulative_cases: 0,\n      cumulative_deaths: 0\n    };\n    groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].new_cases += d.new_cases;\n    groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].new_deaths += d.new_deaths;\n    groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].cumulative_cases += d.cumulative_cases;\n    groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].cumulative_deaths += d.cumulative_deaths;\n  });\n  console.log(groupedData);\n}\nexport function updateTimechart(data) {\n  console.log('update timechart');\n}\nexport default drawTimechart;","map":{"version":3,"sources":["/Users/matthewsmawfield/www/ifrc-covid-dataviz/src/Timechart.js"],"names":["d3","moment","drawTimechart","data","options","console","log","minDate","Date","maxDate","max","who_data","d","date","numIntervals","i","timeline_frequency","svg","select","attr","width","parseInt","barWidth","xScale","scaleLinear","range","domain","groupedData","forEach","startOf","toDate","ifrc_region","new_cases","new_deaths","cumulative_cases","cumulative_deaths","updateTimechart"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\nimport moment from 'moment';\n\nexport function drawTimechart(data, options) {\n\n    console.log('draw timechart');\n    console.log(data);\n    console.log(options);\n\n    // define date range\n    const minDate = moment(new Date(2020, 0, 1));\n    const maxDate = moment(new Date(d3.max(data.who_data, function(d){\n        return d.date;\n    })));\n\n    const numIntervals = d3.max(data.who_data, function(d,i){\n        return d[options.timeline_frequency+'Total'];\n    });\n\n    const svg = d3.select('#timechart_svg').attr('fill', 'blue');\n    const width = parseInt(svg.attr('width'));\n    const barWidth = width/numIntervals;\n\n    const xScale = d3.scaleLinear()\n    .range([0,width])\n    .domain([0,numIntervals]);\n\n    console.log({'x0': xScale(0)})\n    console.log({'x70': xScale(73)})\n    console.log({'width': width});\n    console.log({'barWidth': barWidth});\n    console.log(minDate);\n    console.log(maxDate);\n    console.log({numIntervals});\n\n    // const groupedData = d3.group(data.who_data, d => d[options.timeline_frequency+'Total'], d => d.ifrc_region)\n\n    const groupedData = {};\n\n    data.who_data.forEach(function(d,i){\n        groupedData[d[options.timeline_frequency+'Total']] = groupedData[d[options.timeline_frequency+'Total']] || {};\n        if(options.timeline_frequency=='day') groupedData[d[options.timeline_frequency+'Total']].date = d.date;\n        if(options.timeline_frequency=='week') groupedData[d[options.timeline_frequency+'Total']].date = moment(d.date).startOf('isoWeek').toDate();\n        if(options.timeline_frequency=='month') groupedData[d[options.timeline_frequency+'Total']].date = moment(d.date).startOf('month').toDate();\n        groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region] = groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region] || {new_cases: 0, new_deaths: 0, cumulative_cases: 0, cumulative_deaths: 0};\n        groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].new_cases += d.new_cases;\n        groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].new_deaths += d.new_deaths;\n        groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].cumulative_cases += d.cumulative_cases;\n        groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].cumulative_deaths += d.cumulative_deaths;\n    })\n\n    console.log(groupedData);\n\n\n}\n\nexport function updateTimechart(data) {\n\n    console.log('update timechart');\n\n}\n\nexport default drawTimechart;\n"]},"metadata":{},"sourceType":"module"}