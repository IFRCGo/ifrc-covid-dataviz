{"ast":null,"code":"// import * as d3 from \"d3\";\nimport { min, max, group, flatGroup } from \"d3\";\nimport moment from 'moment';\nimport clone from 'just-clone';\nexport function ParseData(data, options) {\n  // console.log('ParseData');\n  // console.log(options);\n  // max dates\n  let maxDate = moment(new Date(max(data.who_data, function (d) {\n    return d.Date_reported;\n  })));\n  let minDate = moment(new Date(min(data.who_data, function (d) {\n    return d.Date_reported;\n  })));\n  let minDateVaccines = new Date(min(data.vaccines_data, function (d) {\n    return d.date;\n  }));\n  let maxDateVaccines = new Date(max(data.vaccines_data, function (d) {\n    return d.date;\n  }));\n\n  if (maxDateVaccines > maxDate) {\n    maxDate = maxDateVaccines;\n  }\n\n  options.maxDate = moment(maxDate).toDate();\n  options.maxVDate = moment(maxDateVaccines).toDate();\n  options.minDate = moment(minDate).toDate(); // parse who data\n\n  let dayTotal = -1;\n  let dayCheck = 0;\n  let weekTotal = -1;\n  let weekCheck = -1;\n  let monthTotal = 0;\n  let monthCheck = 0;\n  data.who_data.sort(function (a, b) {\n    return new Date(a.Date_reported) - new Date(b.Date_reported);\n  });\n  var countryCodes = [];\n  var ccArray = [];\n  data.who_data.forEach(function (d, i) {\n    d.date = new Date(d.Date_reported);\n    d.dayOfYear = moment(d.date).dayOfYear();\n    if (d.dayOfYear !== dayCheck) dayTotal++;\n    d.dayTotal = dayTotal;\n    d.week = moment(d.date).isoWeek();\n    if (d.week !== weekCheck) weekTotal++;\n    d.weekTotal = weekTotal;\n    d.month = d.date.getMonth();\n    if (d.month !== monthCheck) monthTotal++;\n    d.monthTotal = monthTotal;\n    d.year = d.date.getFullYear();\n    d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n    d.month_start = new Date(moment(d.date).startOf('month').toDate());\n    d.new_cases = parseInt(d.New_cases);\n    d.new_deaths = parseInt(d.New_deaths);\n    d.cumulative_deaths = parseInt(d.Cumulative_deaths);\n    d.cumulative_cases = parseInt(d.Cumulative_cases);\n    d.country_code = d.Country_code;\n    d.country_name = null;\n    data.equity_data.forEach(function (dd, ii) {\n      if (dd.country_iso2 === d.Country_code) {\n        d.ifrc_region = dd.ifrc_region;\n        d.country_name = dd.country_name;\n      }\n    });\n    if (d.ifrc_region == undefined) d.ifrc_region = 'OTH';\n\n    if (!countryCodes.includes(d.country_code)) {\n      if (d.ifrc_region == 'OTH') {\n        ccArray.push([d.Country, d.country_code]);\n      }\n\n      countryCodes.push(d.country_code);\n    }\n\n    delete d.Date_reported;\n    delete d.Country;\n    delete d.New_cases;\n    delete d.New_deaths;\n    delete d.Country_code;\n    delete d.Cumulative_deaths;\n    delete d.Cumulative_cases; // delete d.Country_code;\n\n    delete d.WHO_region; // delete d.Country;\n\n    dayCheck = d.dayOfYear;\n    weekCheck = d.week;\n    monthCheck = d.month;\n  });\n  ccArray.forEach(function (d, i) {\n    console.log(d[0] + ' (' + d[1] + ')');\n  }); // console.log(ccArray);\n  // parse vaccine cumulative data\n\n  dayTotal = -1;\n  dayCheck = 0;\n  weekTotal = -1;\n  weekCheck = -1;\n  monthTotal = 0;\n  monthCheck = 0; // filter out vaccine data on only include records with ISO3 country codes\n\n  data.vaccines_data_cumulative = data.vaccines_data.filter(function (d, i) {\n    return d.iso_code.length === 3 && d.total_vaccinations > 0;\n  }); // fill out missing vaccinations date records (extend cumulative)\n\n  var vGroup = flatGroup(data.vaccines_data_cumulative, d => d.iso_code);\n  var newDates = [];\n  var hasDays = [];\n  var initDate = 0;\n  var lastRecord = {};\n  var vDataFlat = [];\n  vGroup.forEach(function (d, i) {\n    var minDt = new Date(minDateVaccines);\n    var maxDt = new Date(maxDateVaccines);\n    var hasDays = [];\n    var newDays = [];\n    var newDays = [];\n    data.equity_data.forEach(function (dd, ii) {\n      if (dd.country_iso3 === vGroup[i][0]) {\n        d.ifrc_region = dd.ifrc_region;\n        d.country_name = dd.country_name;\n        d.country_code = dd.country_iso2;\n      }\n    });\n    vGroup[i].lastDate = new Date(max(vGroup[i][1], function (d, i) {\n      return d.date;\n    }));\n    vGroup[i][1].forEach(function (dd, ii) {\n      hasDays.push(new Date(dd.date).getTime());\n    }); // if((i<1)||(d[0] =='BFA')||(d[0] =='RWA')){\n\n    vGroup[i][1].forEach(function (dd, ii) {\n      dd.total_vaccinations = parseInt(dd.total_vaccinations);\n\n      for (var day = minDt; day <= maxDt; day.setDate(day.getDate() + 1)) {\n        var newDay = day.getTime();\n\n        if (!hasDays.includes(newDay)) {\n          newDays.push({\n            date: new Date(day),\n            total_vaccinations: null\n          });\n        }\n      } // dd.lastDate = dd.date;\n\n    });\n    vGroup[i][1].push(...newDays);\n    vGroup[i][1].sort(function (a, b) {\n      return new Date(a.date) - new Date(b.date);\n    });\n    var totalVac = 0;\n    var totalVac100 = 0;\n    var people_vaccinated_per_hundred = 0;\n    var people_fully_vaccinated_per_hundred = 0;\n    vGroup[i][1].forEach(function (dd, ii) {\n      if (dd.total_vaccinations) {\n        totalVac = dd.total_vaccinations;\n      } else {\n        dd.total_vaccinations = totalVac;\n      }\n\n      if (dd.total_vaccinations_per_hundred) {\n        totalVac100 = dd.total_vaccinations_per_hundred;\n      } else {\n        dd.total_vaccinations_per_hundred = totalVac100;\n      }\n\n      if (dd.people_vaccinated_per_hundred) {\n        people_vaccinated_per_hundred = dd.people_vaccinated_per_hundred;\n      } else {\n        dd.people_vaccinated_per_hundred = people_vaccinated_per_hundred;\n      }\n\n      if (dd.people_fully_vaccinated_per_hundred) {\n        people_fully_vaccinated_per_hundred = dd.people_fully_vaccinated_per_hundred;\n      } else {\n        dd.people_fully_vaccinated_per_hundred = people_fully_vaccinated_per_hundred;\n      }\n\n      var countryName;\n\n      if (vGroup[i].country_name == null) {\n        countryName = vGroup[i][0];\n      } else {\n        countryName = vGroup[i].country_name;\n      }\n\n      vDataFlat.push({\n        date: new Date(dd.date),\n        lastDate: vGroup[i].lastDate,\n        total_vaccinations_per_hundred: parseFloat(totalVac100),\n        people_vaccinated_per_hundred: people_vaccinated_per_hundred,\n        people_fully_vaccinated_per_hundred: people_fully_vaccinated_per_hundred,\n        iso_code: vGroup[i][0],\n        ifrc_region: vGroup[i].ifrc_region,\n        country_name: countryName,\n        country_code: vGroup[i].country_code,\n        total_vaccinations: totalVac\n      });\n    });\n  });\n  data.vaccines_data_cumulative = vDataFlat;\n  data.vaccines_data_cumulative.sort(function (a, b) {\n    return new Date(a.date) - new Date(b.date);\n  });\n  data.vaccines_data_cumulative.forEach(function (d, i) {\n    if (d.ifrc_region == undefined) d.ifrc_region = 'OTH';\n    d.dayOfYear = moment(d.date).dayOfYear();\n    if (d.dayOfYear !== dayCheck) dayTotal++;\n    d.dayTotal = dayTotal;\n    d.week = moment(d.date).isoWeek();\n    if (d.week !== weekCheck) weekTotal++;\n    d.weekTotal = weekTotal;\n    d.month = d.date.getMonth();\n    if (d.month !== monthCheck) monthTotal++;\n    d.monthTotal = monthTotal;\n    d.year = d.date.getFullYear();\n    dayCheck = d.dayOfYear;\n    weekCheck = d.week;\n    monthCheck = d.month;\n    d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n    d.month_start = new Date(moment(d.date).startOf('month').toDate());\n  }); // parse vaccine daily data\n\n  dayTotal = -1;\n  dayCheck = 0;\n  weekTotal = -1;\n  weekCheck = -1;\n  monthTotal = 0;\n  monthCheck = 0; // filter out vaccine data on only include records with ISO3 country codes\n\n  data.vaccines_data_daily = data.vaccines_data.filter(function (d, i) {\n    return d.iso_code.length === 3 && d.daily_vaccinations > 0;\n  }); // fill out missing vaccinations date records (extend cumulative)\n\n  var vGroup = flatGroup(data.vaccines_data_daily, d => d.iso_code);\n  var newDates = [];\n  var hasDays = [];\n  var initDate = 0;\n  var lastRecord = {};\n  var vDataFlat = [];\n  vGroup.forEach(function (d, i) {\n    var minDt = new Date(minDateVaccines);\n    var maxDt = new Date(maxDateVaccines);\n    var hasDays = [];\n    var newDays = [];\n    var newDays = [];\n    data.equity_data.forEach(function (dd, ii) {\n      if (dd.country_iso3 === vGroup[i][0]) {\n        d.ifrc_region = dd.ifrc_region;\n        d.country_name = dd.country_name;\n        d.country_code = dd.country_iso2;\n      }\n    });\n    vGroup[i][1].forEach(function (dd, ii) {\n      hasDays.push(new Date(dd.date).getTime());\n    }); // if((i<1)||(d[0] =='BFA')||(d[0] =='RWA')){\n\n    vGroup[i][1].forEach(function (dd, ii) {\n      dd.daily_vaccinations = parseInt(dd.daily_vaccinations);\n\n      for (var day = minDt; day <= maxDt; day.setDate(day.getDate() + 1)) {\n        var newDay = day.getTime();\n\n        if (!hasDays.includes(newDay)) {\n          newDays.push({\n            date: new Date(day),\n            daily_vaccinations: null\n          });\n        }\n      }\n    });\n    vGroup[i][1].push(...newDays);\n    vGroup[i][1].sort(function (a, b) {\n      return new Date(a.date) - new Date(b.date);\n    });\n    var daily_vaccinations = 0;\n    vGroup[i][1].forEach(function (dd, ii) {\n      if (dd.daily_vaccinations) {\n        daily_vaccinations = dd.daily_vaccinations;\n      } else {\n        dd.daily_vaccinations = daily_vaccinations;\n      }\n\n      var countryName;\n\n      if (vGroup[i].country_name == null) {\n        countryName = vGroup[i][0];\n      } else {\n        countryName = vGroup[i].country_name;\n      }\n\n      vDataFlat.push({\n        date: new Date(dd.date),\n        iso_code: vGroup[i][0],\n        ifrc_region: vGroup[i].ifrc_region,\n        country_name: countryName,\n        country_code: vGroup[i].country_code,\n        daily_vaccinations: daily_vaccinations\n      });\n    });\n  });\n  data.vaccines_data_daily = vDataFlat;\n  data.vaccines_data_daily.sort(function (a, b) {\n    return new Date(a.date) - new Date(b.date);\n  });\n  data.vaccines_data_daily.forEach(function (d, i) {\n    if (d.ifrc_region == undefined) d.ifrc_region = 'OTH';\n    d.dayOfYear = moment(d.date).dayOfYear();\n    if (d.dayOfYear !== dayCheck) dayTotal++;\n    d.dayTotal = dayTotal;\n    d.week = moment(d.date).isoWeek();\n    if (d.week !== weekCheck) weekTotal++;\n    d.weekTotal = weekTotal;\n    d.month = d.date.getMonth();\n    if (d.month !== monthCheck) monthTotal++;\n    d.monthTotal = monthTotal;\n    d.year = d.date.getFullYear();\n    dayCheck = d.dayOfYear;\n    weekCheck = d.week;\n    monthCheck = d.month;\n    d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n    d.month_start = new Date(moment(d.date).startOf('month').toDate());\n  }); // parse equity data inform/hdi indexes\n\n  data.equity_data.forEach(function (d, i) {\n    if (d.hdi_category.match(/very high/i)) {\n      d.hdi_category = 'very-high';\n    } else if (d.hdi_category.match(/high/i)) {\n      d.hdi_category = 'high';\n    } else if (d.hdi_category.match(/medium/i)) {\n      d.hdi_category = 'medium';\n    } else if (d.hdi_category.match(/low/i)) {\n      d.hdi_category = 'low';\n    }\n\n    if (d.inform_severity.match(/very high/i)) {\n      d.inform_severity = 'very-high';\n    } else if (d.inform_severity.match(/high/i)) {\n      d.inform_severity = 'high';\n    } else if (d.inform_severity.match(/medium/i)) {\n      d.inform_severity = 'medium';\n    } else if (d.inform_severity.match(/low/i)) {\n      d.inform_severity = 'low';\n    } else if (d.inform_severity.match(/no/i)) {\n      d.inform_severity = 'no-score';\n    }\n  });\n  data.equity_data = data.equity_data.filter(function (d, i) {\n    return countryCodes.includes(d.country_iso2);\n  });\n  data.original = clone(data); // console.log(data);\n}\n_c = ParseData;\nexport default ParseData;\n\nvar _c;\n\n$RefreshReg$(_c, \"ParseData\");","map":{"version":3,"sources":["/Users/matthewsmawfield/www/ifrc-covid-dataviz/src/ParseData.js"],"names":["min","max","group","flatGroup","moment","clone","ParseData","data","options","maxDate","Date","who_data","d","Date_reported","minDate","minDateVaccines","vaccines_data","date","maxDateVaccines","toDate","maxVDate","dayTotal","dayCheck","weekTotal","weekCheck","monthTotal","monthCheck","sort","a","b","countryCodes","ccArray","forEach","i","dayOfYear","week","isoWeek","month","getMonth","year","getFullYear","week_start","startOf","month_start","new_cases","parseInt","New_cases","new_deaths","New_deaths","cumulative_deaths","Cumulative_deaths","cumulative_cases","Cumulative_cases","country_code","Country_code","country_name","equity_data","dd","ii","country_iso2","ifrc_region","undefined","includes","push","Country","WHO_region","console","log","vaccines_data_cumulative","filter","iso_code","length","total_vaccinations","vGroup","newDates","hasDays","initDate","lastRecord","vDataFlat","minDt","maxDt","newDays","country_iso3","lastDate","getTime","day","setDate","getDate","newDay","totalVac","totalVac100","people_vaccinated_per_hundred","people_fully_vaccinated_per_hundred","total_vaccinations_per_hundred","countryName","parseFloat","vaccines_data_daily","daily_vaccinations","hdi_category","match","inform_severity","original"],"mappings":"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","sourcesContent":["// import * as d3 from \"d3\";\nimport {min,max,group,flatGroup} from \"d3\";\nimport moment from 'moment';\nimport clone from 'just-clone';\n\nexport function ParseData(data, options) {\n\n    // console.log('ParseData');\n    // console.log(options);\n        \n    // max dates\n    let maxDate = moment(new Date(max(data.who_data, function(d){\n        return d.Date_reported;\n    })));\n\n    let minDate = moment(new Date(min(data.who_data, function(d){\n        return d.Date_reported;\n    })));\n\n    let minDateVaccines = (new Date(min(data.vaccines_data, function(d){\n        return d.date;\n    })));\n\n\n    let maxDateVaccines = (new Date(max(data.vaccines_data, function(d){\n        return d.date;\n    })));\n\n    if(maxDateVaccines>maxDate) {\n        maxDate = maxDateVaccines;\n    }\n\n    options.maxDate = moment(maxDate).toDate();\n    options.maxVDate = moment(maxDateVaccines).toDate();\n    options.minDate = moment(minDate).toDate();\n\n    // parse who data\n\n    let dayTotal = -1;\n    let dayCheck = 0;\n\n    let weekTotal = -1;\n    let weekCheck = -1;\n\n    let monthTotal = 0;\n    let monthCheck = 0;\n\n    data.who_data.sort(function(a,b){\n        return new Date(a.Date_reported) - new Date(b.Date_reported);\n    });\n\n    var countryCodes = [];\n    var ccArray = [];\n\n    data.who_data.forEach(function(d,i){\n        d.date = new Date(d.Date_reported);\n        d.dayOfYear =  moment(d.date).dayOfYear();\n        if(d.dayOfYear!==dayCheck) dayTotal++;\n        d.dayTotal = dayTotal;\n\n        d.week = moment(d.date).isoWeek();\n        if(d.week!==weekCheck) weekTotal++;\n        d.weekTotal = weekTotal;\n        d.month = d.date.getMonth();\n        if(d.month!==monthCheck) monthTotal++;\n        d.monthTotal = monthTotal;\n        d.year = d.date.getFullYear();\n\n        d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n        d.month_start = new Date(moment(d.date).startOf('month').toDate());\n\n        d.new_cases = parseInt(d.New_cases);\n        d.new_deaths = parseInt(d.New_deaths);\n        d.cumulative_deaths = parseInt(d.Cumulative_deaths);\n        d.cumulative_cases = parseInt(d.Cumulative_cases);\n        d.country_code = d.Country_code;\n        d.country_name = null;\n        data.equity_data.forEach(function(dd,ii){\n            if(dd.country_iso2===d.Country_code){\n                d.ifrc_region = dd.ifrc_region;\n                d.country_name = dd.country_name;\n            }\n        })\n        if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n        if(!countryCodes.includes(d.country_code)) {\n            if(d.ifrc_region=='OTH'){\n                ccArray.push([d.Country, d.country_code]);\n            }\n            countryCodes.push(d.country_code);\n        }\n\n        delete d.Date_reported;\n        delete d.Country;\n        delete d.New_cases;\n        delete d.New_deaths;\n        delete d.Country_code;\n        delete d.Cumulative_deaths;\n        delete d.Cumulative_cases;\n        // delete d.Country_code;\n        delete d.WHO_region;\n        // delete d.Country;\n        dayCheck = d.dayOfYear;\n        weekCheck = d.week;\n        monthCheck = d.month;\n    })\n\n    ccArray.forEach(function(d,i){\n        console.log(d[0]+' ('+d[1]+')')\n    })\n    // console.log(ccArray);\n\n    // parse vaccine cumulative data\n\n    dayTotal = -1;\n    dayCheck = 0;\n\n    weekTotal = -1;\n    weekCheck = -1;\n    monthTotal = 0;\n    monthCheck = 0;\n\n    // filter out vaccine data on only include records with ISO3 country codes\n    data.vaccines_data_cumulative = data.vaccines_data.filter(function(d,i){\n        return d.iso_code.length===3 && d.total_vaccinations > 0;\n    })\n\n    // fill out missing vaccinations date records (extend cumulative)\n    var vGroup = flatGroup(data.vaccines_data_cumulative, d => d.iso_code);\n\n    var newDates = [];\n    var hasDays = [];\n    var initDate = 0;\n    var lastRecord = {};\n    var vDataFlat = [];\n    vGroup.forEach(function(d,i){\n\n        var minDt = new Date(minDateVaccines);\n        var maxDt = new Date(maxDateVaccines);\n        var hasDays = [];\n        var newDays = [];\n        var newDays = [];        \n        data.equity_data.forEach(function(dd,ii){\n            if(dd.country_iso3===vGroup[i][0]){\n                d.ifrc_region = dd.ifrc_region;\n                d.country_name = dd.country_name;\n                d.country_code = dd.country_iso2;\n                \n            }\n        })\n\n        vGroup[i].lastDate = new Date(max(vGroup[i][1], function(d,i){ return d.date }));\n\n        vGroup[i][1].forEach(function(dd,ii){\n            hasDays.push(new Date(dd.date).getTime());\n        })\n\n        // if((i<1)||(d[0] =='BFA')||(d[0] =='RWA')){\n        vGroup[i][1].forEach(function(dd,ii){\n            dd.total_vaccinations = parseInt(dd.total_vaccinations);\n            for (var day = minDt;day <= maxDt; day.setDate(day.getDate() + 1)) {\n                var newDay = day.getTime();\n                if(!hasDays.includes(newDay)){\n                    newDays.push({date: new Date(day), total_vaccinations: null})\n                }\n            }\n            // dd.lastDate = dd.date;\n        });\n\n        vGroup[i][1].push(...newDays);\n\n        vGroup[i][1].sort(function(a,b){\n            return new Date(a.date) - new Date(b.date);\n        });\n\n        var totalVac = 0;\n        var totalVac100 = 0;\n        var people_vaccinated_per_hundred = 0;\n        var people_fully_vaccinated_per_hundred = 0;\n\n        vGroup[i][1].forEach(function(dd,ii){\n\n            if(dd.total_vaccinations){\n                totalVac = dd.total_vaccinations;\n            } else {\n                dd.total_vaccinations = totalVac;\n            }\n            if(dd.total_vaccinations_per_hundred){\n                totalVac100 = dd.total_vaccinations_per_hundred\n            } else {\n                dd.total_vaccinations_per_hundred = totalVac100;\n            }\n            if(dd.people_vaccinated_per_hundred){\n                people_vaccinated_per_hundred = dd.people_vaccinated_per_hundred;\n            } else {\n                dd.people_vaccinated_per_hundred = people_vaccinated_per_hundred;\n            }\n            if(dd.people_fully_vaccinated_per_hundred){\n                people_fully_vaccinated_per_hundred = dd.people_fully_vaccinated_per_hundred;\n            } else {\n                dd.people_fully_vaccinated_per_hundred = people_fully_vaccinated_per_hundred;\n            }\n\n            var countryName;\n            if(vGroup[i].country_name==null) { countryName = vGroup[i][0];\n            } else {\n                countryName = vGroup[i].country_name\n            }\n\n            vDataFlat.push({\n                date: new Date(dd.date),\n                lastDate: (vGroup[i].lastDate),\n                total_vaccinations_per_hundred: parseFloat(totalVac100),\n                people_vaccinated_per_hundred: people_vaccinated_per_hundred,\n                people_fully_vaccinated_per_hundred: people_fully_vaccinated_per_hundred,\n                iso_code: vGroup[i][0], \n                ifrc_region: vGroup[i].ifrc_region,\n                country_name: countryName,\n                country_code: vGroup[i].country_code, \n                total_vaccinations: totalVac \n            })\n        })\n    });\n\n    data.vaccines_data_cumulative = vDataFlat;\n\n    data.vaccines_data_cumulative.sort(function(a,b){\n        return new Date(a.date) - new Date(b.date);\n    });\n\n    data.vaccines_data_cumulative.forEach(function(d,i){\n        if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n        d.dayOfYear =  moment(d.date).dayOfYear();\n        if(d.dayOfYear!==dayCheck) dayTotal++;\n        d.dayTotal = dayTotal;\n        d.week = moment(d.date).isoWeek();\n        if(d.week!==weekCheck) weekTotal++;\n        d.weekTotal = weekTotal;\n        d.month = d.date.getMonth();\n        if(d.month!==monthCheck) monthTotal++;\n        d.monthTotal = monthTotal;\n        d.year = d.date.getFullYear();\n        dayCheck = d.dayOfYear;\n        weekCheck = d.week;\n        monthCheck = d.month;\n        d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n        d.month_start = new Date(moment(d.date).startOf('month').toDate());\n    })\n\n    // parse vaccine daily data\n\n    dayTotal = -1;\n    dayCheck = 0;\n\n    weekTotal = -1;\n    weekCheck = -1;\n    monthTotal = 0;\n    monthCheck = 0;\n\n    // filter out vaccine data on only include records with ISO3 country codes\n    data.vaccines_data_daily = data.vaccines_data.filter(function(d,i){\n        return d.iso_code.length===3 && d.daily_vaccinations > 0;\n    })\n\n    // fill out missing vaccinations date records (extend cumulative)\n    var vGroup = flatGroup(data.vaccines_data_daily, d => d.iso_code);\n\n    var newDates = [];\n    var hasDays = [];\n    var initDate = 0;\n    var lastRecord = {};\n    var vDataFlat = [];\n    vGroup.forEach(function(d,i){\n\n        var minDt = new Date(minDateVaccines);\n        var maxDt = new Date(maxDateVaccines);\n        var hasDays = [];\n        var newDays = [];\n        var newDays = [];\n\n        data.equity_data.forEach(function(dd,ii){\n            if(dd.country_iso3===vGroup[i][0]){\n                d.ifrc_region = dd.ifrc_region;\n                d.country_name = dd.country_name;\n                d.country_code = dd.country_iso2;\n            }\n        })\n\n        vGroup[i][1].forEach(function(dd,ii){\n            hasDays.push(new Date(dd.date).getTime());\n        })\n\n        // if((i<1)||(d[0] =='BFA')||(d[0] =='RWA')){\n        vGroup[i][1].forEach(function(dd,ii){\n            dd.daily_vaccinations = parseInt(dd.daily_vaccinations);\n            for (var day = minDt;day <= maxDt; day.setDate(day.getDate() + 1)) {\n                var newDay = day.getTime();\n                if(!hasDays.includes(newDay)){\n                    newDays.push({date: new Date(day), daily_vaccinations: null})\n                }\n            }\n        });\n\n        vGroup[i][1].push(...newDays);\n\n        vGroup[i][1].sort(function(a,b){\n            return new Date(a.date) - new Date(b.date);\n        });\n\n        var daily_vaccinations = 0;\n\n        vGroup[i][1].forEach(function(dd,ii){\n            if(dd.daily_vaccinations){\n                daily_vaccinations = dd.daily_vaccinations;\n            } else {\n                dd.daily_vaccinations = daily_vaccinations;\n            }\n            var countryName;\n            if(vGroup[i].country_name==null) { countryName = vGroup[i][0];\n            } else {\n                countryName = vGroup[i].country_name\n            }\n            vDataFlat.push({\n                date: new Date(dd.date),\n                iso_code: vGroup[i][0], \n                ifrc_region: vGroup[i].ifrc_region,\n                country_name: countryName,\n                country_code: vGroup[i].country_code, \n                daily_vaccinations: daily_vaccinations \n            })\n        })\n    });\n\n    data.vaccines_data_daily = vDataFlat;\n\n    data.vaccines_data_daily.sort(function(a,b){\n        return new Date(a.date) - new Date(b.date);\n    });\n\n    data.vaccines_data_daily.forEach(function(d,i){\n        if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n        d.dayOfYear =  moment(d.date).dayOfYear();\n        if(d.dayOfYear!==dayCheck) dayTotal++;\n        d.dayTotal = dayTotal;\n        d.week = moment(d.date).isoWeek();\n        if(d.week!==weekCheck) weekTotal++;\n        d.weekTotal = weekTotal;\n        d.month = d.date.getMonth();\n        if(d.month!==monthCheck) monthTotal++;\n        d.monthTotal = monthTotal;\n        d.year = d.date.getFullYear();\n        dayCheck = d.dayOfYear;\n        weekCheck = d.week;\n        monthCheck = d.month;\n        d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n        d.month_start = new Date(moment(d.date).startOf('month').toDate());\n    });\n\n\n    // parse equity data inform/hdi indexes\n    data.equity_data.forEach(function(d,i){\n        if(d.hdi_category.match(/very high/i)){\n            d.hdi_category = 'very-high'\n        }\n        else if(d.hdi_category.match(/high/i)){\n            d.hdi_category = 'high'\n        }\n        else if(d.hdi_category.match(/medium/i)){\n            d.hdi_category = 'medium'\n        }\n        else if(d.hdi_category.match(/low/i)){\n            d.hdi_category = 'low'\n        }\n        if(d.inform_severity.match(/very high/i)){\n            d.inform_severity = 'very-high'\n        }\n        else if(d.inform_severity.match(/high/i)){\n            d.inform_severity = 'high'\n        }\n        else if(d.inform_severity.match(/medium/i)){\n            d.inform_severity = 'medium'\n        }\n        else if(d.inform_severity.match(/low/i)){\n            d.inform_severity = 'low'\n        }\n        else if(d.inform_severity.match(/no/i)){\n            d.inform_severity = 'no-score'\n        }\n    })\n\n    data.equity_data = data.equity_data.filter(function(d,i){\n       return countryCodes.includes(d.country_iso2)\n    })\n    data.original = clone(data);\n    // console.log(data);\n}\n\nexport default ParseData;\n"]},"metadata":{},"sourceType":"module"}