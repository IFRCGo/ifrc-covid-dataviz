{"ast":null,"code":"// import * as d3 from \"d3\";\nimport { max } from \"d3\";\nimport moment from 'moment';\nexport function ParseData(data, options) {\n  console.log('ParseData');\n  console.log(options); // add missing start dates\n  // data.who_data.push({\n  //     'Country': \"Afghanistan\",\n  //     'Country_code': \"AF\",\n  //     'Cumulative_cases': \"0\",\n  //     'Cumulative_deaths': \"0\",\n  //     'Date_reported': \"2020-01-01\",\n  //     'New_cases': \"0\",\n  //     'New_deaths': \"0\",\n  //     'WHO_region': \"EMRO\",\n  // })\n  // data.who_data.push({\n  //     'Country': \"Afghanistan\",\n  //     'Country_code': \"AF\",\n  //     'Cumulative_cases': \"0\",\n  //     'Cumulative_deaths': \"0\",\n  //     'Date_reported': \"2020-01-02\",\n  //     'New_cases': \"0\",\n  //     'New_deaths': \"0\",\n  //     'WHO_region': \"EMRO\",\n  // })\n  // max dates\n\n  let maxDate = moment(new Date(max(data.who_data, function (d) {\n    return d.Date_reported;\n  })));\n  let maxDateVaccines = moment(new Date(max(data.vaccines_data, function (d) {\n    return d.date;\n  })));\n\n  if (maxDateVaccines > maxDate) {\n    maxDate = maxDateVaccines;\n  }\n\n  options.maxDate = maxDate; // options.minDate = minDate;\n  // parse who data\n\n  let dayTotal = -1;\n  let dayCheck = 0;\n  let weekTotal = -1;\n  let weekCheck = -1;\n  let monthTotal = 0;\n  let monthCheck = 0;\n  data.who_data.sort(function (a, b) {\n    return new Date(a.Date_reported) - new Date(b.Date_reported);\n  });\n  data.who_data.forEach(function (d, i) {\n    d.date = new Date(d.Date_reported);\n    d.dayOfYear = moment(d.date).dayOfYear();\n    if (d.dayOfYear !== dayCheck) dayTotal++;\n    d.dayTotal = dayTotal;\n    d.week = moment(d.date).isoWeek();\n    if (d.week !== weekCheck) weekTotal++;\n    d.weekTotal = weekTotal;\n    d.month = d.date.getMonth();\n    if (d.month !== monthCheck) monthTotal++;\n    d.monthTotal = monthTotal;\n    d.year = d.date.getFullYear();\n    d.new_cases = parseInt(d.New_cases);\n    d.new_deaths = parseInt(d.New_deaths);\n    d.cumulative_deaths = parseInt(d.Cumulative_deaths);\n    d.cumulative_cases = parseInt(d.Cumulative_cases);\n    d.country_code = d.Country_code;\n    d.country_name = null;\n    data.equity_data.forEach(function (dd, ii) {\n      if (dd.country_iso2 === d.Country_code) {\n        d.ifrc_region = dd.ifrc_region;\n        d.country_name = dd.country_name;\n      }\n    });\n    if (d.ifrc_region == undefined) d.ifrc_region = 'OTH';\n    delete d.Date_reported;\n    delete d.Country;\n    delete d.New_cases;\n    delete d.New_deaths;\n    delete d.Country_code;\n    delete d.Cumulative_deaths;\n    delete d.Cumulative_cases; // delete d.Country_code;\n\n    delete d.WHO_region; // delete d.Country;\n\n    dayCheck = d.dayOfYear;\n    weekCheck = d.week;\n    monthCheck = d.month;\n  }); // parse vaccine data\n\n  dayTotal = -1;\n  dayCheck = 0;\n  weekTotal = -1;\n  weekCheck = -1;\n  monthTotal = 0;\n  monthCheck = 0;\n  data.vaccines_data.sort(function (a, b) {\n    return new Date(a.Date_reported) - new Date(b.Date_reported);\n  });\n  data.vaccines_data.forEach(function (d, i) {\n    d.date = new Date(d.date);\n    d.dayOfYear = moment(d.date).dayOfYear();\n    if (d.dayOfYear !== dayCheck) dayTotal++;\n    d.dayTotal = dayTotal;\n    d.week = moment(d.date).isoWeek();\n    if (d.week !== weekCheck) weekTotal++;\n    d.weekTotal = weekTotal;\n    d.month = d.date.getMonth();\n    if (d.month !== monthCheck) monthTotal++;\n    d.monthTotal = monthTotal;\n    d.year = d.date.getFullYear();\n    d.new_vaccinations = parseInt(d.daily_vaccinations);\n\n    if (total_vaccinations) {\n      d.cumulative_vaccinations = parseInt(d.total_vaccinations);\n    } else {\n      d.cumulative_vaccinations = 0;\n    }\n\n    d.country_code = null;\n    d.country_name = null;\n    data.equity_data.forEach(function (dd, ii) {\n      if (dd.country_iso3 === d.iso_code) {\n        d.ifrc_region = dd.ifrc_region;\n        d.country_name = dd.country_name;\n        d.country_code = dd.country_iso2;\n      }\n    });\n    if (d.ifrc_region == undefined) d.ifrc_region = 'OTH';\n    delete d.Date_reported;\n    delete d.New_cases;\n    delete d.New_deaths;\n    delete d.location;\n    delete d.iso_code;\n    dayCheck = d.dayOfYear;\n    weekCheck = d.week;\n    monthCheck = d.month;\n  });\n  console.log(data.who_data[1000]);\n  console.log(data.vaccines_data[1000]);\n}\n_c = ParseData;\nexport default ParseData;\n\nvar _c;\n\n$RefreshReg$(_c, \"ParseData\");","map":{"version":3,"sources":["/Users/matthewsmawfield/www/ifrc-covid-dataviz/src/ParseData.js"],"names":["max","moment","ParseData","data","options","console","log","maxDate","Date","who_data","d","Date_reported","maxDateVaccines","vaccines_data","date","dayTotal","dayCheck","weekTotal","weekCheck","monthTotal","monthCheck","sort","a","b","forEach","i","dayOfYear","week","isoWeek","month","getMonth","year","getFullYear","new_cases","parseInt","New_cases","new_deaths","New_deaths","cumulative_deaths","Cumulative_deaths","cumulative_cases","Cumulative_cases","country_code","Country_code","country_name","equity_data","dd","ii","country_iso2","ifrc_region","undefined","Country","WHO_region","new_vaccinations","daily_vaccinations","total_vaccinations","cumulative_vaccinations","country_iso3","iso_code","location"],"mappings":"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","sourcesContent":["// import * as d3 from \"d3\";\nimport {max} from \"d3\";\n\nimport moment from 'moment';\n\nexport function ParseData(data, options) {\n\n    console.log('ParseData');\n    console.log(options);\n    \n        \n    // add missing start dates\n    // data.who_data.push({\n    //     'Country': \"Afghanistan\",\n    //     'Country_code': \"AF\",\n    //     'Cumulative_cases': \"0\",\n    //     'Cumulative_deaths': \"0\",\n    //     'Date_reported': \"2020-01-01\",\n    //     'New_cases': \"0\",\n    //     'New_deaths': \"0\",\n    //     'WHO_region': \"EMRO\",\n    // })\n\n    // data.who_data.push({\n    //     'Country': \"Afghanistan\",\n    //     'Country_code': \"AF\",\n    //     'Cumulative_cases': \"0\",\n    //     'Cumulative_deaths': \"0\",\n    //     'Date_reported': \"2020-01-02\",\n    //     'New_cases': \"0\",\n    //     'New_deaths': \"0\",\n    //     'WHO_region': \"EMRO\",\n    // })\n\n    // max dates\n    let maxDate = moment(new Date(max(data.who_data, function(d){\n        return d.Date_reported;\n    })));\n    \n\n    let maxDateVaccines = moment(new Date(max(data.vaccines_data, function(d){\n        return d.date;\n    })));\n\n    if(maxDateVaccines>maxDate) {\n        maxDate = maxDateVaccines;\n    }\n\n    options.maxDate = maxDate;\n    // options.minDate = minDate;\n\n    // parse who data\n\n    let dayTotal = -1;\n    let dayCheck = 0;\n\n    let weekTotal = -1;\n    let weekCheck = -1;\n\n    let monthTotal = 0;\n    let monthCheck = 0;\n\n    data.who_data.sort(function(a,b){\n        return new Date(a.Date_reported) - new Date(b.Date_reported);\n    });\n\n    data.who_data.forEach(function(d,i){\n\n        d.date = new Date(d.Date_reported);\n        d.dayOfYear =  moment(d.date).dayOfYear();\n        if(d.dayOfYear!==dayCheck) dayTotal++;\n        d.dayTotal = dayTotal;\n\n        d.week = moment(d.date).isoWeek();\n        if(d.week!==weekCheck) weekTotal++;\n        d.weekTotal = weekTotal;\n        d.month = d.date.getMonth();\n        if(d.month!==monthCheck) monthTotal++;\n        d.monthTotal = monthTotal;\n        d.year = d.date.getFullYear();\n        d.new_cases = parseInt(d.New_cases);\n        d.new_deaths = parseInt(d.New_deaths);\n        d.cumulative_deaths = parseInt(d.Cumulative_deaths);\n        d.cumulative_cases = parseInt(d.Cumulative_cases);\n        d.country_code = d.Country_code;\n        d.country_name = null;\n        data.equity_data.forEach(function(dd,ii){\n            if(dd.country_iso2===d.Country_code){\n                d.ifrc_region = dd.ifrc_region;\n                d.country_name = dd.country_name;\n            }\n        })\n        if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n        delete d.Date_reported;\n        delete d.Country;\n        delete d.New_cases;\n        delete d.New_deaths;\n        delete d.Country_code;\n        delete d.Cumulative_deaths;\n        delete d.Cumulative_cases;\n        // delete d.Country_code;\n        delete d.WHO_region;\n        // delete d.Country;\n        dayCheck = d.dayOfYear;\n        weekCheck = d.week;\n        monthCheck = d.month;\n    })\n\n\n    // parse vaccine data\n\n    dayTotal = -1;\n    dayCheck = 0;\n\n    weekTotal = -1;\n    weekCheck = -1;\n    monthTotal = 0;\n    monthCheck = 0;\n\n    data.vaccines_data.sort(function(a,b){\n        return new Date(a.Date_reported) - new Date(b.Date_reported);\n    });\n\n    data.vaccines_data.forEach(function(d,i){\n\n        d.date = new Date(d.date);\n        d.dayOfYear =  moment(d.date).dayOfYear();\n        if(d.dayOfYear!==dayCheck) dayTotal++;\n        d.dayTotal = dayTotal;\n\n        d.week = moment(d.date).isoWeek();\n        if(d.week!==weekCheck) weekTotal++;\n        d.weekTotal = weekTotal;\n        d.month = d.date.getMonth();\n        if(d.month!==monthCheck) monthTotal++;\n        d.monthTotal = monthTotal;\n        d.year = d.date.getFullYear();\n        d.new_vaccinations = parseInt(d.daily_vaccinations);\n        if(total_vaccinations){\n            d.cumulative_vaccinations = parseInt(d.total_vaccinations);\n        } else {\n            d.cumulative_vaccinations = 0;\n        }\n        d.country_code = null;\n        d.country_name = null;\n        data.equity_data.forEach(function(dd,ii){\n            if(dd.country_iso3===d.iso_code){\n                d.ifrc_region = dd.ifrc_region;\n                d.country_name = dd.country_name;\n                d.country_code = dd.country_iso2;\n            }\n        })\n        if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n        delete d.Date_reported;\n        delete d.New_cases;\n        delete d.New_deaths;\n        delete d.location;\n        delete d.iso_code;\n        dayCheck = d.dayOfYear;\n        weekCheck = d.week;\n        monthCheck = d.month;\n    })\n\n    console.log(data.who_data[1000]);\n    console.log(data.vaccines_data[1000]);\n}\n\nexport default ParseData;\n"]},"metadata":{},"sourceType":"module"}