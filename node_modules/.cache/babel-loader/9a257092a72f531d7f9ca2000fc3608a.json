{"ast":null,"code":"// import * as d3 from \"d3\";\nimport { max } from \"d3\";\nimport moment from 'moment';\nexport function ParseData(data, options) {\n  console.log('ParseData');\n  console.log(options);\n  console.log(data); // add missing start dates\n  // data.who_data.push({\n  //     'Country': \"Afghanistan\",\n  //     'Country_code': \"AF\",\n  //     'Cumulative_cases': \"0\",\n  //     'Cumulative_deaths': \"0\",\n  //     'Date_reported': \"2020-01-01\",\n  //     'New_cases': \"0\",\n  //     'New_deaths': \"0\",\n  //     'WHO_region': \"EMRO\",\n  // })\n  // data.who_data.push({\n  //     'Country': \"Afghanistan\",\n  //     'Country_code': \"AF\",\n  //     'Cumulative_cases': \"0\",\n  //     'Cumulative_deaths': \"0\",\n  //     'Date_reported': \"2020-01-02\",\n  //     'New_cases': \"0\",\n  //     'New_deaths': \"0\",\n  //     'WHO_region': \"EMRO\",\n  // })\n  // max dates\n\n  let maxDate = moment(new Date(max(data.who_data, function (d) {\n    return d.Date_reported;\n  })));\n  let maxDateVaccines = moment(new Date(max(data.vaccines_data, function (d) {\n    return d.date;\n  })));\n\n  if (maxDateVaccines > maxDate) {\n    maxDate = maxDateVaccines;\n  }\n\n  options.maxDate = maxDate; // options.minDate = minDate;\n  // parse who data\n\n  let dayTotal = -1;\n  let dayCheck = 0;\n  let weekTotal = -1;\n  let weekCheck = -1;\n  let monthTotal = 0;\n  let monthCheck = 0;\n  data.who_data.sort(function (a, b) {\n    return new Date(a.Date_reported) - new Date(b.Date_reported);\n  });\n\n  for (var d = maxDate.toDate(); d <= new Date(); d.setDate(d.getDate() + 1)) {\n    //     // daysOfYear.push(new Date(d));\n    let date = d;\n    console.log(date); //     console.log(d);    if(maxDateVaccines>maxDate) {\n    //     maxDate = maxDateVaccines;\n    // }\n\n    data.who_data.push({\n      'Country': 'Afghanistan',\n      'Country_code': 'AF',\n      'Cumulative_cases': \"0\",\n      'Cumulative_deaths': \"0\",\n      'Date_reported': date,\n      'New_cases': \"0\",\n      'New_deaths': \"0\",\n      'WHO_region': null\n    });\n  }\n\n  maxDate = new Date();\n  console.log(data);\n  data.who_data.forEach(function (d, i) {// d.date = new Date(d.Date_reported);\n    // d.dayOfYear =  moment(d.date).dayOfYear();\n    // if(d.dayOfYear!==dayCheck) dayTotal++;\n    // d.dayTotal = dayTotal;\n    // d.week = moment(d.date).isoWeek();\n    // if(d.week!==weekCheck) weekTotal++;\n    // d.weekTotal = weekTotal;\n    // d.month = d.date.getMonth();\n    // if(d.month!==monthCheck) monthTotal++;\n    // d.monthTotal = monthTotal;\n    // d.year = d.date.getFullYear();\n    // d.new_cases = parseInt(d.New_cases);\n    // d.new_deaths = parseInt(d.New_deaths);\n    // d.cumulative_deaths = parseInt(d.Cumulative_deaths);\n    // d.cumulative_cases = parseInt(d.Cumulative_cases);\n    // data.equity_data.forEach(function(dd,ii){\n    //     if(dd.country_iso2===d.Country_code){\n    //         d.ifrc_region = dd.ifrc_region;\n    //         d.country_name = dd.country_name;\n    //     }\n    // })\n    // if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n    // delete d.Date_reported;\n    // delete d.New_cases;\n    // delete d.New_deaths;\n    // delete d.Cumulative_deaths;\n    // delete d.Cumulative_cases;\n    // // delete d.Country_code;\n    // delete d.WHO_region;\n    // // delete d.Country;\n    // dayCheck = d.dayOfYear;\n    // weekCheck = d.week;\n    // monthCheck = d.month;\n  }); // console.log(data);\n  // console.log(data.who_data[1000]);\n}\n_c = ParseData;\nexport default ParseData;\n\nvar _c;\n\n$RefreshReg$(_c, \"ParseData\");","map":{"version":3,"sources":["/Users/matthewsmawfield/www/ifrc-covid-dataviz/src/ParseData.js"],"names":["max","moment","ParseData","data","options","console","log","maxDate","Date","who_data","d","Date_reported","maxDateVaccines","vaccines_data","date","dayTotal","dayCheck","weekTotal","weekCheck","monthTotal","monthCheck","sort","a","b","toDate","setDate","getDate","push","forEach","i"],"mappings":"AAAA;AACA,SAAQA,GAAR,QAAkB,IAAlB;AAEA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,OAAO,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,OAAzB,EAAkC;AAErCC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ,EAJqC,CAMrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,MAAII,OAAO,GAAGN,MAAM,CAAC,IAAIO,IAAJ,CAASR,GAAG,CAACG,IAAI,CAACM,QAAN,EAAgB,UAASC,CAAT,EAAW;AACxD,WAAOA,CAAC,CAACC,aAAT;AACH,GAFgC,CAAZ,CAAD,CAApB;AAKA,MAAIC,eAAe,GAAGX,MAAM,CAAC,IAAIO,IAAJ,CAASR,GAAG,CAACG,IAAI,CAACU,aAAN,EAAqB,UAASH,CAAT,EAAW;AACrE,WAAOA,CAAC,CAACI,IAAT;AACH,GAFwC,CAAZ,CAAD,CAA5B;;AAIA,MAAGF,eAAe,GAACL,OAAnB,EAA4B;AACxBA,IAAAA,OAAO,GAAGK,eAAV;AACH;;AAEDR,EAAAA,OAAO,CAACG,OAAR,GAAkBA,OAAlB,CA3CqC,CA4CrC;AAEA;;AAEA,MAAIQ,QAAQ,GAAG,CAAC,CAAhB;AACA,MAAIC,QAAQ,GAAG,CAAf;AAEA,MAAIC,SAAS,GAAG,CAAC,CAAjB;AACA,MAAIC,SAAS,GAAG,CAAC,CAAjB;AAEA,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAIC,UAAU,GAAG,CAAjB;AAEAjB,EAAAA,IAAI,CAACM,QAAL,CAAcY,IAAd,CAAmB,UAASC,CAAT,EAAWC,CAAX,EAAa;AAC5B,WAAO,IAAIf,IAAJ,CAASc,CAAC,CAACX,aAAX,IAA4B,IAAIH,IAAJ,CAASe,CAAC,CAACZ,aAAX,CAAnC;AACH,GAFD;;AAIA,OAAK,IAAID,CAAC,GAAGH,OAAO,CAACiB,MAAR,EAAb,EAA+Bd,CAAC,IAAI,IAAIF,IAAJ,EAApC,EAAgDE,CAAC,CAACe,OAAF,CAAUf,CAAC,CAACgB,OAAF,KAAc,CAAxB,CAAhD,EAA4E;AAC5E;AACI,QAAIZ,IAAI,GAAGJ,CAAX;AACIL,IAAAA,OAAO,CAACC,GAAR,CAAYQ,IAAZ,EAHoE,CAI5E;AACA;AACA;;AACIX,IAAAA,IAAI,CAACM,QAAL,CAAckB,IAAd,CAAmB;AACf,iBAAW,aADI;AAEf,sBAAgB,IAFD;AAGf,0BAAoB,GAHL;AAIf,2BAAqB,GAJN;AAKf,uBAAiBb,IALF;AAMf,mBAAa,GANE;AAOf,oBAAc,GAPC;AAQf,oBAAc;AARC,KAAnB;AAUH;;AACDP,EAAAA,OAAO,GAAG,IAAIC,IAAJ,EAAV;AAEAH,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AAEAA,EAAAA,IAAI,CAACM,QAAL,CAAcmB,OAAd,CAAsB,UAASlB,CAAT,EAAWmB,CAAX,EAAa,CAE/B;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GApCD,EAnFqC,CAyHrC;AAEA;AACH;KA5He3B,S;AA8HhB,eAAeA,SAAf","sourcesContent":["// import * as d3 from \"d3\";\nimport {max} from \"d3\";\n\nimport moment from 'moment';\n\nexport function ParseData(data, options) {\n\n    console.log('ParseData');\n    console.log(options);\n    console.log(data);\n        \n    // add missing start dates\n    // data.who_data.push({\n    //     'Country': \"Afghanistan\",\n    //     'Country_code': \"AF\",\n    //     'Cumulative_cases': \"0\",\n    //     'Cumulative_deaths': \"0\",\n    //     'Date_reported': \"2020-01-01\",\n    //     'New_cases': \"0\",\n    //     'New_deaths': \"0\",\n    //     'WHO_region': \"EMRO\",\n    // })\n\n    // data.who_data.push({\n    //     'Country': \"Afghanistan\",\n    //     'Country_code': \"AF\",\n    //     'Cumulative_cases': \"0\",\n    //     'Cumulative_deaths': \"0\",\n    //     'Date_reported': \"2020-01-02\",\n    //     'New_cases': \"0\",\n    //     'New_deaths': \"0\",\n    //     'WHO_region': \"EMRO\",\n    // })\n\n    // max dates\n    let maxDate = moment(new Date(max(data.who_data, function(d){\n        return d.Date_reported;\n    })));\n    \n\n    let maxDateVaccines = moment(new Date(max(data.vaccines_data, function(d){\n        return d.date;\n    })));\n\n    if(maxDateVaccines>maxDate) {\n        maxDate = maxDateVaccines;\n    }\n\n    options.maxDate = maxDate;\n    // options.minDate = minDate;\n\n    // parse who data\n\n    let dayTotal = -1;\n    let dayCheck = 0;\n\n    let weekTotal = -1;\n    let weekCheck = -1;\n\n    let monthTotal = 0;\n    let monthCheck = 0;\n\n    data.who_data.sort(function(a,b){\n        return new Date(a.Date_reported) - new Date(b.Date_reported);\n    });\n\n    for (var d = maxDate.toDate(); d <= new Date(); d.setDate(d.getDate() + 1)) {\n    //     // daysOfYear.push(new Date(d));\n        let date = d;\n            console.log(date);\n    //     console.log(d);    if(maxDateVaccines>maxDate) {\n    //     maxDate = maxDateVaccines;\n    // }\n        data.who_data.push({\n            'Country': 'Afghanistan',\n            'Country_code': 'AF',\n            'Cumulative_cases': \"0\",\n            'Cumulative_deaths': \"0\",\n            'Date_reported': date,\n            'New_cases': \"0\",\n            'New_deaths': \"0\",\n            'WHO_region': null,\n        })\n    }\n    maxDate = new Date();\n\n    console.log(data);\n\n    data.who_data.forEach(function(d,i){\n\n        // d.date = new Date(d.Date_reported);\n        // d.dayOfYear =  moment(d.date).dayOfYear();\n        // if(d.dayOfYear!==dayCheck) dayTotal++;\n        // d.dayTotal = dayTotal;\n\n        // d.week = moment(d.date).isoWeek();\n        // if(d.week!==weekCheck) weekTotal++;\n        // d.weekTotal = weekTotal;\n        // d.month = d.date.getMonth();\n        // if(d.month!==monthCheck) monthTotal++;\n        // d.monthTotal = monthTotal;\n        // d.year = d.date.getFullYear();\n        // d.new_cases = parseInt(d.New_cases);\n        // d.new_deaths = parseInt(d.New_deaths);\n        // d.cumulative_deaths = parseInt(d.Cumulative_deaths);\n        // d.cumulative_cases = parseInt(d.Cumulative_cases);\n        // data.equity_data.forEach(function(dd,ii){\n        //     if(dd.country_iso2===d.Country_code){\n        //         d.ifrc_region = dd.ifrc_region;\n        //         d.country_name = dd.country_name;\n        //     }\n        // })\n        // if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n        // delete d.Date_reported;\n        // delete d.New_cases;\n        // delete d.New_deaths;\n        // delete d.Cumulative_deaths;\n        // delete d.Cumulative_cases;\n        // // delete d.Country_code;\n        // delete d.WHO_region;\n        // // delete d.Country;\n        // dayCheck = d.dayOfYear;\n        // weekCheck = d.week;\n        // monthCheck = d.month;\n    })\n\n    // console.log(data);\n\n    // console.log(data.who_data[1000]);\n}\n\nexport default ParseData;\n"]},"metadata":{},"sourceType":"module"}