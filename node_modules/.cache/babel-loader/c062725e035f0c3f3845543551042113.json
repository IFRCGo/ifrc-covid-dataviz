{"ast":null,"code":"// import * as d3 from \"d3\";\nimport { max } from \"d3\";\nimport moment from 'moment';\nexport function ParseData(data, options) {\n  console.log('ParseData');\n  console.log(options); // add missing start dates\n  // data.who_data.push({\n  //     'Country': \"Afghanistan\",\n  //     'Country_code': \"AF\",\n  //     'Cumulative_cases': \"0\",\n  //     'Cumulative_deaths': \"0\",\n  //     'Date_reported': \"2020-01-01\",\n  //     'New_cases': \"0\",\n  //     'New_deaths': \"0\",\n  //     'WHO_region': \"EMRO\",\n  // })\n  // data.who_data.push({\n  //     'Country': \"Afghanistan\",\n  //     'Country_code': \"AF\",\n  //     'Cumulative_cases': \"0\",\n  //     'Cumulative_deaths': \"0\",\n  //     'Date_reported': \"2020-01-02\",\n  //     'New_cases': \"0\",\n  //     'New_deaths': \"0\",\n  //     'WHO_region': \"EMRO\",\n  // })\n  // max dates\n\n  let maxDate = moment(new Date(max(data.who_data, function (d) {\n    return d.Date_reported;\n  })));\n  let maxDateVaccines = moment(new Date(max(data.vaccines_data, function (d) {\n    return d.date;\n  })));\n  maxDate = new Date();\n  options.maxDate = maxDate; // options.minDate = minDate;\n  // parse who data\n\n  let dayTotal = -1;\n  let dayCheck = 0;\n  let weekTotal = -1;\n  let weekCheck = -1;\n  let monthTotal = 0;\n  let monthCheck = 0;\n  data.who_data.sort(function (a, b) {\n    return new Date(a.Date_reported) - new Date(b.Date_reported);\n  });\n\n  if (maxDateVaccines > maxDate) {\n    maxDate = maxDateVaccines;\n  }\n\n  for (var d = maxDate; d <= now; d.setDate(d.getDate() + 1)) {\n    // daysOfYear.push(new Date(d));\n    console.log(d);\n  }\n\n  data.who_data.forEach(function (d, i) {\n    d.date = new Date(d.Date_reported);\n    d.dayOfYear = moment(d.date).dayOfYear();\n    if (d.dayOfYear !== dayCheck) dayTotal++;\n    d.dayTotal = dayTotal;\n    d.week = moment(d.date).isoWeek();\n    if (d.week !== weekCheck) weekTotal++;\n    d.weekTotal = weekTotal;\n    d.month = d.date.getMonth();\n    if (d.month !== monthCheck) monthTotal++;\n    d.monthTotal = monthTotal;\n    d.year = d.date.getFullYear();\n    d.new_cases = parseInt(d.New_cases);\n    d.new_deaths = parseInt(d.New_deaths);\n    d.cumulative_deaths = parseInt(d.Cumulative_deaths);\n    d.cumulative_cases = parseInt(d.Cumulative_cases);\n    data.equity_data.forEach(function (dd, ii) {\n      if (dd.country_iso2 === d.Country_code) {\n        d.ifrc_region = dd.ifrc_region;\n        d.country_name = dd.country_name;\n      }\n    });\n    if (d.ifrc_region == undefined) d.ifrc_region = 'OTH';\n    delete d.Date_reported;\n    delete d.New_cases;\n    delete d.New_deaths;\n    delete d.Cumulative_deaths;\n    delete d.Cumulative_cases; // delete d.Country_code;\n\n    delete d.WHO_region; // delete d.Country;\n\n    dayCheck = d.dayOfYear;\n    weekCheck = d.week;\n    monthCheck = d.month;\n  });\n  console.log(data); // console.log(data.who_data[1000]);\n}\n_c = ParseData;\nexport default ParseData;\n\nvar _c;\n\n$RefreshReg$(_c, \"ParseData\");","map":{"version":3,"sources":["/Users/matthewsmawfield/www/ifrc-covid-dataviz/src/ParseData.js"],"names":["max","moment","ParseData","data","options","console","log","maxDate","Date","who_data","d","Date_reported","maxDateVaccines","vaccines_data","date","dayTotal","dayCheck","weekTotal","weekCheck","monthTotal","monthCheck","sort","a","b","now","setDate","getDate","forEach","i","dayOfYear","week","isoWeek","month","getMonth","year","getFullYear","new_cases","parseInt","New_cases","new_deaths","New_deaths","cumulative_deaths","Cumulative_deaths","cumulative_cases","Cumulative_cases","equity_data","dd","ii","country_iso2","Country_code","ifrc_region","country_name","undefined","WHO_region"],"mappings":"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","sourcesContent":["// import * as d3 from \"d3\";\nimport {max} from \"d3\";\n\nimport moment from 'moment';\n\nexport function ParseData(data, options) {\n\n    console.log('ParseData');\n    console.log(options);\n    \n        \n    // add missing start dates\n    // data.who_data.push({\n    //     'Country': \"Afghanistan\",\n    //     'Country_code': \"AF\",\n    //     'Cumulative_cases': \"0\",\n    //     'Cumulative_deaths': \"0\",\n    //     'Date_reported': \"2020-01-01\",\n    //     'New_cases': \"0\",\n    //     'New_deaths': \"0\",\n    //     'WHO_region': \"EMRO\",\n    // })\n\n    // data.who_data.push({\n    //     'Country': \"Afghanistan\",\n    //     'Country_code': \"AF\",\n    //     'Cumulative_cases': \"0\",\n    //     'Cumulative_deaths': \"0\",\n    //     'Date_reported': \"2020-01-02\",\n    //     'New_cases': \"0\",\n    //     'New_deaths': \"0\",\n    //     'WHO_region': \"EMRO\",\n    // })\n\n    // max dates\n    let maxDate = moment(new Date(max(data.who_data, function(d){\n        return d.Date_reported;\n    })));\n    \n\n    let maxDateVaccines = moment(new Date(max(data.vaccines_data, function(d){\n        return d.date;\n    })));\n\n    maxDate = new Date();\n\n    options.maxDate = maxDate;\n    // options.minDate = minDate;\n\n    // parse who data\n\n    let dayTotal = -1;\n    let dayCheck = 0;\n\n    let weekTotal = -1;\n    let weekCheck = -1;\n\n    let monthTotal = 0;\n    let monthCheck = 0;\n\n    data.who_data.sort(function(a,b){\n        return new Date(a.Date_reported) - new Date(b.Date_reported);\n    });\n\n    if(maxDateVaccines>maxDate) {\n        maxDate = maxDateVaccines;\n    }\n\n    for (var d = maxDate; d <= now; d.setDate(d.getDate() + 1)) {\n        // daysOfYear.push(new Date(d));\n        console.log(d);\n    }\n\n\n\n\n    data.who_data.forEach(function(d,i){\n\n        d.date = new Date(d.Date_reported);\n        d.dayOfYear =  moment(d.date).dayOfYear();\n        if(d.dayOfYear!==dayCheck) dayTotal++;\n        d.dayTotal = dayTotal;\n\n        d.week = moment(d.date).isoWeek();\n        if(d.week!==weekCheck) weekTotal++;\n        d.weekTotal = weekTotal;\n        d.month = d.date.getMonth();\n        if(d.month!==monthCheck) monthTotal++;\n        d.monthTotal = monthTotal;\n        d.year = d.date.getFullYear();\n        d.new_cases = parseInt(d.New_cases);\n        d.new_deaths = parseInt(d.New_deaths);\n        d.cumulative_deaths = parseInt(d.Cumulative_deaths);\n        d.cumulative_cases = parseInt(d.Cumulative_cases);\n        data.equity_data.forEach(function(dd,ii){\n            if(dd.country_iso2===d.Country_code){\n                d.ifrc_region = dd.ifrc_region;\n                d.country_name = dd.country_name;\n            }\n        })\n        if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n        delete d.Date_reported;\n        delete d.New_cases;\n        delete d.New_deaths;\n        delete d.Cumulative_deaths;\n        delete d.Cumulative_cases;\n        // delete d.Country_code;\n        delete d.WHO_region;\n        // delete d.Country;\n        dayCheck = d.dayOfYear;\n        weekCheck = d.week;\n        monthCheck = d.month;\n    })\n\n    console.log(data);\n\n    // console.log(data.who_data[1000]);\n}\n\nexport default ParseData;\n"]},"metadata":{},"sourceType":"module"}