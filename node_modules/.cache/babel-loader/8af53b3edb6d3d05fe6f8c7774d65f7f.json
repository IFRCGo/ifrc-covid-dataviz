{"ast":null,"code":"import * as d3 from \"d3\";\nimport moment from 'moment';\nexport function drawTimechart(data, options) {\n  // console.log('draw timechart');\n  // console.log(data);\n  // console.log(options);\n  // const groupedData = d3.group(data.who_data, d => d[options.timeline_frequency+'Total'], d => d.ifrc_region)\n  const groupedData = [];\n  data.who_data.forEach(function (d, i) {\n    groupedData[d[options.timeline_frequency + 'Total']] = groupedData[d[options.timeline_frequency + 'Total']] || {};\n    if (options.timeline_frequency == 'day') groupedData[d[options.timeline_frequency + 'Total']].date = d.date;\n    if (options.timeline_frequency == 'week') groupedData[d[options.timeline_frequency + 'Total']].date = moment(d.date).startOf('isoWeek').toDate();\n    if (options.timeline_frequency == 'month') groupedData[d[options.timeline_frequency + 'Total']].date = moment(d.date).startOf('month').toDate();\n    groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region] = groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region] || {\n      new_cases: 0,\n      new_deaths: 0,\n      cumulative_cases: 0,\n      cumulative_deaths: 0\n    };\n    groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].new_cases += d.new_cases;\n    groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].new_deaths += d.new_deaths;\n    groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].cumulative_cases += d.cumulative_cases;\n    groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].cumulative_deaths += d.cumulative_deaths;\n  });\n  console.log(groupedData);\n  const numIntervals = d3.max(data.who_data, function (d, i) {\n    return d[options.timeline_frequency + 'Total'];\n  }); // define date range\n\n  const minDate = groupedData[1].date;\n  const maxDate = groupedData[numIntervals].date;\n  const svg = d3.select('#timechart_svg').attr('fill', 'blue');\n  const width = parseInt(svg.attr('width'));\n  const barWidth = width / numIntervals;\n  const barSpacing = 0.1;\n  const xScale = d3.scaleLinear().range([0, width]).domain([minDate, maxDate]);\n  console.log('minDate');\n  console.log(minDate);\n  console.log('maxDate');\n  console.log(maxDate); // CASES\n  // loop through groupedData and draw bars\n\n  const casesBarGroups = svg.selectAll('.cases_bar_group').data(groupedData).enter().append('g').attr('transform', function (d, i) {\n    return 'translate(' + xScale(d.date) + ')';\n  });\n  casesBarGroups.append('rect').attr('x', barWidth * barSpacing / 2).attr('y', 0).attr('width', barWidth * (1 - barSpacing)).attr('height', 100); // draw x-axis\n  // draw y-axis\n}\nexport function updateTimechart(data) {\n  console.log('update timechart');\n}\nexport default drawTimechart;","map":{"version":3,"sources":["/Users/matthewsmawfield/www/ifrc-covid-dataviz/src/Timechart.js"],"names":["d3","moment","drawTimechart","data","options","groupedData","who_data","forEach","d","i","timeline_frequency","date","startOf","toDate","ifrc_region","new_cases","new_deaths","cumulative_cases","cumulative_deaths","console","log","numIntervals","max","minDate","maxDate","svg","select","attr","width","parseInt","barWidth","barSpacing","xScale","scaleLinear","range","domain","casesBarGroups","selectAll","enter","append","updateTimechart"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,OAA7B,EAAsC;AAEzC;AACA;AACA;AACA;AAEA,QAAMC,WAAW,GAAG,EAApB;AAEAF,EAAAA,IAAI,CAACG,QAAL,CAAcC,OAAd,CAAsB,UAASC,CAAT,EAAWC,CAAX,EAAa;AAC/BJ,IAAAA,WAAW,CAACG,CAAC,CAACJ,OAAO,CAACM,kBAAR,GAA2B,OAA5B,CAAF,CAAX,GAAqDL,WAAW,CAACG,CAAC,CAACJ,OAAO,CAACM,kBAAR,GAA2B,OAA5B,CAAF,CAAX,IAAsD,EAA3G;AACA,QAAGN,OAAO,CAACM,kBAAR,IAA4B,KAA/B,EAAsCL,WAAW,CAACG,CAAC,CAACJ,OAAO,CAACM,kBAAR,GAA2B,OAA5B,CAAF,CAAX,CAAmDC,IAAnD,GAA0DH,CAAC,CAACG,IAA5D;AACtC,QAAGP,OAAO,CAACM,kBAAR,IAA4B,MAA/B,EAAuCL,WAAW,CAACG,CAAC,CAACJ,OAAO,CAACM,kBAAR,GAA2B,OAA5B,CAAF,CAAX,CAAmDC,IAAnD,GAA0DV,MAAM,CAACO,CAAC,CAACG,IAAH,CAAN,CAAeC,OAAf,CAAuB,SAAvB,EAAkCC,MAAlC,EAA1D;AACvC,QAAGT,OAAO,CAACM,kBAAR,IAA4B,OAA/B,EAAwCL,WAAW,CAACG,CAAC,CAACJ,OAAO,CAACM,kBAAR,GAA2B,OAA5B,CAAF,CAAX,CAAmDC,IAAnD,GAA0DV,MAAM,CAACO,CAAC,CAACG,IAAH,CAAN,CAAeC,OAAf,CAAuB,OAAvB,EAAgCC,MAAhC,EAA1D;AACxCR,IAAAA,WAAW,CAACG,CAAC,CAACJ,OAAO,CAACM,kBAAR,GAA2B,OAA5B,CAAF,CAAX,CAAmDF,CAAC,CAACM,WAArD,IAAoET,WAAW,CAACG,CAAC,CAACJ,OAAO,CAACM,kBAAR,GAA2B,OAA5B,CAAF,CAAX,CAAmDF,CAAC,CAACM,WAArD,KAAqE;AAACC,MAAAA,SAAS,EAAE,CAAZ;AAAeC,MAAAA,UAAU,EAAE,CAA3B;AAA8BC,MAAAA,gBAAgB,EAAE,CAAhD;AAAmDC,MAAAA,iBAAiB,EAAE;AAAtE,KAAzI;AACAb,IAAAA,WAAW,CAACG,CAAC,CAACJ,OAAO,CAACM,kBAAR,GAA2B,OAA5B,CAAF,CAAX,CAAmDF,CAAC,CAACM,WAArD,EAAkEC,SAAlE,IAA+EP,CAAC,CAACO,SAAjF;AACAV,IAAAA,WAAW,CAACG,CAAC,CAACJ,OAAO,CAACM,kBAAR,GAA2B,OAA5B,CAAF,CAAX,CAAmDF,CAAC,CAACM,WAArD,EAAkEE,UAAlE,IAAgFR,CAAC,CAACQ,UAAlF;AACAX,IAAAA,WAAW,CAACG,CAAC,CAACJ,OAAO,CAACM,kBAAR,GAA2B,OAA5B,CAAF,CAAX,CAAmDF,CAAC,CAACM,WAArD,EAAkEG,gBAAlE,IAAsFT,CAAC,CAACS,gBAAxF;AACAZ,IAAAA,WAAW,CAACG,CAAC,CAACJ,OAAO,CAACM,kBAAR,GAA2B,OAA5B,CAAF,CAAX,CAAmDF,CAAC,CAACM,WAArD,EAAkEI,iBAAlE,IAAuFV,CAAC,CAACU,iBAAzF;AACH,GAVD;AAYAC,EAAAA,OAAO,CAACC,GAAR,CAAYf,WAAZ;AAEA,QAAMgB,YAAY,GAAGrB,EAAE,CAACsB,GAAH,CAAOnB,IAAI,CAACG,QAAZ,EAAsB,UAASE,CAAT,EAAWC,CAAX,EAAa;AACpD,WAAOD,CAAC,CAACJ,OAAO,CAACM,kBAAR,GAA2B,OAA5B,CAAR;AACH,GAFoB,CAArB,CAvByC,CA2BzC;;AACA,QAAMa,OAAO,GAAGlB,WAAW,CAAC,CAAD,CAAX,CAAeM,IAA/B;AACA,QAAMa,OAAO,GAAGnB,WAAW,CAACgB,YAAD,CAAX,CAA0BV,IAA1C;AAEA,QAAMc,GAAG,GAAGzB,EAAE,CAAC0B,MAAH,CAAU,gBAAV,EAA4BC,IAA5B,CAAiC,MAAjC,EAAyC,MAAzC,CAAZ;AACA,QAAMC,KAAK,GAAGC,QAAQ,CAACJ,GAAG,CAACE,IAAJ,CAAS,OAAT,CAAD,CAAtB;AACA,QAAMG,QAAQ,GAAGF,KAAK,GAACP,YAAvB;AACA,QAAMU,UAAU,GAAG,GAAnB;AAEA,QAAMC,MAAM,GAAGhC,EAAE,CAACiC,WAAH,GACdC,KADc,CACR,CAAC,CAAD,EAAGN,KAAH,CADQ,EAEdO,MAFc,CAEP,CAACZ,OAAD,EAASC,OAAT,CAFO,CAAf;AAIAL,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYG,OAAZ;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYI,OAAZ,EA3CyC,CA6CzC;AACA;;AACA,QAAMY,cAAc,GAAGX,GAAG,CAACY,SAAJ,CAAc,kBAAd,EACtBlC,IADsB,CACjBE,WADiB,EAEtBiC,KAFsB,GAGtBC,MAHsB,CAGf,GAHe,EAItBZ,IAJsB,CAIjB,WAJiB,EAIJ,UAASnB,CAAT,EAAWC,CAAX,EAAa;AAAE,WAAO,eAAauB,MAAM,CAACxB,CAAC,CAACG,IAAH,CAAnB,GAA4B,GAAnC;AAAuC,GAJlD,CAAvB;AAMAyB,EAAAA,cAAc,CAACG,MAAf,CAAsB,MAAtB,EACCZ,IADD,CACM,GADN,EACYG,QAAQ,GAACC,UAAV,GAAsB,CADjC,EAECJ,IAFD,CAEM,GAFN,EAEW,CAFX,EAGCA,IAHD,CAGM,OAHN,EAGeG,QAAQ,IAAE,IAAEC,UAAJ,CAHvB,EAICJ,IAJD,CAIM,QAJN,EAIgB,GAJhB,EArDyC,CA6DzC;AAGA;AAEH;AAED,OAAO,SAASa,eAAT,CAAyBrC,IAAzB,EAA+B;AAElCgB,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AAEH;AAED,eAAelB,aAAf","sourcesContent":["import * as d3 from \"d3\";\nimport moment from 'moment';\n\nexport function drawTimechart(data, options) {\n\n    // console.log('draw timechart');\n    // console.log(data);\n    // console.log(options);\n    // const groupedData = d3.group(data.who_data, d => d[options.timeline_frequency+'Total'], d => d.ifrc_region)\n\n    const groupedData = [];\n\n    data.who_data.forEach(function(d,i){\n        groupedData[d[options.timeline_frequency+'Total']] = groupedData[d[options.timeline_frequency+'Total']] || {};\n        if(options.timeline_frequency=='day') groupedData[d[options.timeline_frequency+'Total']].date = d.date;\n        if(options.timeline_frequency=='week') groupedData[d[options.timeline_frequency+'Total']].date = moment(d.date).startOf('isoWeek').toDate();\n        if(options.timeline_frequency=='month') groupedData[d[options.timeline_frequency+'Total']].date = moment(d.date).startOf('month').toDate();\n        groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region] = groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region] || {new_cases: 0, new_deaths: 0, cumulative_cases: 0, cumulative_deaths: 0};\n        groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].new_cases += d.new_cases;\n        groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].new_deaths += d.new_deaths;\n        groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].cumulative_cases += d.cumulative_cases;\n        groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].cumulative_deaths += d.cumulative_deaths;\n    })\n\n    console.log(groupedData);\n\n    const numIntervals = d3.max(data.who_data, function(d,i){\n        return d[options.timeline_frequency+'Total'];\n    });\n\n    // define date range\n    const minDate = groupedData[1].date;\n    const maxDate = groupedData[numIntervals].date;\n\n    const svg = d3.select('#timechart_svg').attr('fill', 'blue');\n    const width = parseInt(svg.attr('width'));\n    const barWidth = width/numIntervals;\n    const barSpacing = 0.1;\n\n    const xScale = d3.scaleLinear()\n    .range([0,width])\n    .domain([minDate,maxDate]);\n\n    console.log('minDate');\n    console.log(minDate);\n    console.log('maxDate');\n    console.log(maxDate);\n\n    // CASES\n    // loop through groupedData and draw bars\n    const casesBarGroups = svg.selectAll('.cases_bar_group')\n    .data(groupedData)\n    .enter()\n    .append('g')\n    .attr('transform', function(d,i){ return 'translate('+xScale(d.date)+')'})\n\n    casesBarGroups.append('rect')\n    .attr('x', (barWidth*barSpacing)/2)\n    .attr('y', 0)\n    .attr('width', barWidth*(1-barSpacing))\n    .attr('height', 100);\n\n\n    \n    // draw x-axis\n\n\n    // draw y-axis\n\n}\n\nexport function updateTimechart(data) {\n\n    console.log('update timechart');\n\n}\n\nexport default drawTimechart;\n"]},"metadata":{},"sourceType":"module"}