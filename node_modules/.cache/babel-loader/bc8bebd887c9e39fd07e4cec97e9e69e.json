{"ast":null,"code":"// import * as d3 from \"d3\";\nimport { min, max, group, flatGroup } from \"d3\";\nimport moment from 'moment';\nimport clone from 'just-clone';\nimport { data } from \"jquery\"; // const regions = ['AF', 'ME', 'AP', 'EU', 'AM', 'OTH'];\n\nexport function ParseData2(data, options) {\n  // regions\n  data.regions = [{\n    'code': 'AF',\n    'population': 0\n  }, {\n    'code': 'ME',\n    'population': 0\n  }, {\n    'code': 'AP',\n    'population': 0\n  }, {\n    'code': 'EU',\n    'population': 0\n  }, {\n    'code': 'AM',\n    'population': 0\n  }, {\n    'code': 'OTH',\n    'population': 0\n  }]; // country data\n\n  data.country = data.equity_data;\n  data.country.forEach(function (d, i) {\n    // if not an IFRC region then set to OTH\n    if (d.ifrc_region != 'AF' && d.ifrc_region != 'ME' && d.ifrc_region != 'AP' && d.ifrc_region != 'EU' && d.ifrc_region != 'AM') {\n      d.ifrc_region = 'OTH';\n    } // parse country population\n\n\n    d.population = parseInt(d.population);\n    var pop = 0;\n    if (d.population > 0) pop = d.population; // sum up ifrc region population \n\n    data.regions.forEach(function (dd, ii) {\n      if (dd.code == d.ifrc_region) {\n        dd.population += pop;\n      }\n    }); // get WHO vaccine data (vaccine types used, vaccines_per_100\n\n    d.vaccines_used = [];\n    d.avg_tests_per_1000 = parseFloat(d.avg_tests_per_1000) || 0;\n    d.number_vaccine_types_used = 0;\n    d.vaccines_per_100 = 0;\n    data.vaccines_who_data.forEach(function (dd, ii) {\n      if (d.country_iso3 == dd.ISO3) {\n        d.data_updated = moment(dd.DATE_UPDATED).startOf('day').toDate();\n        d.number_vaccine_types_used = dd.NUMBER_VACCINES_TYPES_USED;\n        d.vaccines_per_100 = parseFloat(dd.TOTAL_VACCINATIONS_PER100);\n        if (isNaN(d.vaccines_per_100)) d.vaccines_per_100 = 0;\n        d.vaccines_used = dd.VACCINES_USED.split(',').map(function (item) {\n          return item.trim();\n        });\n      }\n    }); // get ns involvement in activities\n\n    d.ns_involvement = 0;\n    data.self_assessment.forEach(function (dd, ii) {\n      if (d.country_iso3 == dd.ISO3) {\n        if (dd['Final involvement'] == 'Yes') d.ns_involvement = 1;\n      }\n    }); // get vaccine acceptance\n\n    data.vaccine_acceptance.forEach(function (dd, ii) {\n      if (d.country_iso3 == dd.iso3) {\n        // if(dd['Final involvement']=='Yes') d.ns_involvement = 1;\n        d.country_code = d.country_iso2;\n        d.vaccine_acceptance_percent = parseFloat(dd.indicator_value) * 100;\n        d.vaccine_acceptance_population = parseInt(dd.population_size);\n      }\n    }); // get contrat tracing\n\n    if (d.contract_tracing.toLowerCase() == 'all' || d.contract_tracing.toLowerCase() == 'some') {\n      d.contract_tracing = 1;\n    } else {\n      d.contract_tracing = 0;\n    } // parse equity data inform/hdi indexes\n\n\n    if (d.hdi_category.match(/very high/i)) {\n      d.hdi_category = 'very-high';\n    } else if (d.hdi_category.match(/high/i)) {\n      d.hdi_category = 'high';\n    } else if (d.hdi_category.match(/medium/i)) {\n      d.hdi_category = 'medium';\n    } else if (d.hdi_category.match(/low/i)) {\n      d.hdi_category = 'low';\n    }\n\n    if (d.inform_severity.match(/very high/i)) {\n      d.inform_severity = 'very-high';\n    } else if (d.inform_severity.match(/high/i)) {\n      d.inform_severity = 'high';\n    } else if (d.inform_severity.match(/medium/i)) {\n      d.inform_severity = 'medium';\n    } else if (d.inform_severity.match(/low/i)) {\n      d.inform_severity = 'low';\n    } else if (d.inform_severity.match(/no/i)) {\n      d.inform_severity = 'no-score';\n    }\n  }); // // max dates\n  // let maxDate = moment(new Date(max(data2.who_data, function(d){\n  //     return d.Date_reported;\n  // })));\n  // let minDate = moment(new Date(min(data2.who_data, function(d){\n  //     return d.Date_reported;\n  // })));\n  // // override\n  // minDate = moment('2019-12-31');\n  // let minDateVaccines = (new Date(min(data2.vaccines_data, function(d){\n  //     return d.date;\n  // })));\n  // let maxDateVaccines = (new Date(max(data2.vaccines_data, function(d){\n  //     return d.date;\n  // })));\n  // options.maxDataDate = (maxDate).toDate();\n  // options.maxVDataDate = maxDateVaccines;\n  // if(maxDateVaccines>maxDate) {\n  //     maxDate = maxDateVaccines;\n  // }\n  // // if(maxDate<moment()){\n  // //     maxDate = moment();\n  // // }\n  // // if(maxDateVaccines<moment()){\n  // //     maxDateVaccines = moment();\n  // // }\n  // options.maxDate = moment(maxDate).toDate();\n  // options.maxVDate = moment(maxDateVaccines).toDate();\n  // options.minDate = moment(minDate).toDate();\n  // // parse who data\n  // let dayTotal = -1;\n  // let dayCheck = 0;\n  // let weekTotal = -1;\n  // let weekCheck = -1;\n  // let monthTotal = 0;\n  // let monthCheck = 0;\n  // // filter out negative new deaths\n  // // data2.who_data = data2.who_data.filter(d=>d.New_deaths>0);\n  // // data2.who_data = data2.who_data.filter(d=>d.New_cases>0);\n  // data2.who_data.sort(function(a,b){\n  //     return new Date(a.Date_reported) - new Date(b.Date_reported);\n  // });\n  // var countryCodes = [];\n  // var ccArray = [];\n  // data2.who_data.forEach(function(d,i){\n  //     d.date = new Date(d.Date_reported);\n  //     d.dayOfYear =  moment(d.date).dayOfYear();\n  //     if(d.dayOfYear!==dayCheck) dayTotal++;\n  //     d.dayTotal = dayTotal;\n  //     d.week = moment(d.date).isoWeek();\n  //     if(d.week!==weekCheck) weekTotal++;\n  //     d.weekTotal = weekTotal;\n  //     d.month = d.date.getMonth();\n  //     if(d.month!==monthCheck) monthTotal++;\n  //     d.monthTotal = monthTotal;\n  //     d.year = d.date.getFullYear();\n  //     d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n  //     d.month_start = new Date(moment(d.date).startOf('month').toDate());\n  //     d.new_cases = parseInt(d.New_cases);\n  //     d.new_deaths = parseInt(d.New_deaths);\n  //     // // negative values\n  //     if(d.new_deaths<0)d.new_deaths = 0;\n  //     if(d.new_cases<0)d.new_cases = 0;\n  //     d.cumulative_deaths = parseInt(d.Cumulative_deaths);\n  //     d.cumulative_cases = parseInt(d.Cumulative_cases);\n  //     d.country_code = d.Country_code;\n  //     d.country_name = null;\n  //     data2.equity_data.forEach(function(dd,ii){\n  //         if(dd.country_iso2===d.Country_code){\n  //             d.ifrc_region = dd.ifrc_region;\n  //             d.country_name = dd.country_name;\n  //         }\n  //     })\n  //     if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n  //     if(!countryCodes.includes(d.country_code)) {\n  //         if(d.ifrc_region=='OTH'){\n  //             ccArray.push([d.Country, d.country_code]);\n  //         }\n  //         countryCodes.push(d.country_code);\n  //     }\n  //     delete d.Date_reported;\n  //     delete d.Country;\n  //     delete d.New_cases;\n  //     delete d.New_deaths;\n  //     delete d.Country_code;\n  //     delete d.Cumulative_deaths;\n  //     delete d.Cumulative_cases;\n  //     // delete d.Country_code;\n  //     delete d.WHO_region;\n  //     // delete d.Country;\n  //     dayCheck = d.dayOfYear;\n  //     weekCheck = d.week;\n  //     monthCheck = d.month;\n  // })\n  // // check for missing coutries\n  // // ccArray.forEach(function(d,i){\n  // //     console.log(d[1])\n  // // })\n  // // console.log(ccArray);\n  // // parse vaccine cumulative data\n  // dayTotal = -1;\n  // dayCheck = 0;\n  // weekTotal = -1;\n  // weekCheck = -1;\n  // monthTotal = 0;\n  // monthCheck = 0;\n  // // filter out vaccine data on only include records with ISO3 country codes\n  // data2.vaccines_data_cumulative = data2.vaccines_data.filter(function(d,i){\n  //     return d.iso_code.length===3 && d.total_vaccinations > 0;\n  // })\n  // // fill out missing vaccinations date records (extend cumulative)\n  // var vGroup = flatGroup(data2.vaccines_data_cumulative, d => d.iso_code);\n  // var newDates = [];\n  // var hasDays = [];\n  // var initDate = 0;\n  // var lastRecord = {};\n  // var vDataFlat = [];\n  // vGroup.forEach(function(d,i){\n  //     var minDt = new Date(minDateVaccines);\n  //     var maxDt = new Date(maxDateVaccines);\n  //     var hasDays = [];\n  //     var newDays = [];\n  //     var newDays = [];        \n  //     data2.equity_data.forEach(function(dd,ii){\n  //         if(dd.country_iso3===vGroup[i][0]){\n  //             d.ifrc_region = dd.ifrc_region;\n  //             d.country_name = dd.country_name;\n  //             d.country_code = dd.country_iso2;\n  //         }\n  //     })\n  //     vGroup[i].lastDate = new Date(max(vGroup[i][1], function(d,i){ return d.date }));\n  //     vGroup[i][1].forEach(function(dd,ii){\n  //         hasDays.push(new Date(dd.date).getTime());\n  //     })\n  //     // if((i<1)||(d[0] =='BFA')||(d[0] =='RWA')){\n  //     vGroup[i][1].forEach(function(dd,ii){\n  //         dd.total_vaccinations = parseInt(dd.total_vaccinations);\n  //         for (var day = minDt;day <= maxDt; day.setDate(day.getDate() + 1)) {\n  //             var newDay = day.getTime();\n  //             if(!hasDays.includes(newDay)){\n  //                 newDays.push({date: new Date(day), total_vaccinations: null})\n  //             }\n  //         }\n  //         // dd.lastDate = dd.date;\n  //     });\n  //     vGroup[i][1].push(...newDays);\n  //     vGroup[i][1].sort(function(a,b){\n  //         return new Date(a.date) - new Date(b.date);\n  //     });\n  //     var totalVac = 0;\n  //     var totalVac100 = 0;\n  //     var people_vaccinated_per_hundred = 0;\n  //     var people_fully_vaccinated_per_hundred = 0;\n  //     vGroup[i][1].forEach(function(dd,ii){\n  //         if(dd.total_vaccinations){\n  //             totalVac = dd.total_vaccinations;\n  //         } else {\n  //             dd.total_vaccinations = totalVac;\n  //         }\n  //         if(dd.total_vaccinations_per_hundred){\n  //             totalVac100 = dd.total_vaccinations_per_hundred\n  //         } else {\n  //             dd.total_vaccinations_per_hundred = totalVac100;\n  //         }\n  //         if(dd.people_vaccinated_per_hundred){\n  //             people_vaccinated_per_hundred = dd.people_vaccinated_per_hundred;\n  //         } else {\n  //             dd.people_vaccinated_per_hundred = people_vaccinated_per_hundred;\n  //         }\n  //         if(dd.people_fully_vaccinated_per_hundred){\n  //             people_fully_vaccinated_per_hundred = dd.people_fully_vaccinated_per_hundred;\n  //         } else {\n  //             dd.people_fully_vaccinated_per_hundred = people_fully_vaccinated_per_hundred;\n  //         }\n  //         var countryName;\n  //         if(vGroup[i].country_name==null) { countryName = vGroup[i][0];\n  //         } else {\n  //             countryName = vGroup[i].country_name\n  //         }\n  //         vDataFlat.push({\n  //             date: new Date(dd.date),\n  //             lastDate: (vGroup[i].lastDate),\n  //             total_vaccinations_per_hundred: parseFloat(totalVac100),\n  //             people_vaccinated_per_hundred: people_vaccinated_per_hundred,\n  //             people_fully_vaccinated_per_hundred: people_fully_vaccinated_per_hundred,\n  //             iso_code: vGroup[i][0], \n  //             ifrc_region: vGroup[i].ifrc_region,\n  //             country_name: countryName,\n  //             country_code: vGroup[i].country_code, \n  //             total_vaccinations: totalVac \n  //         })\n  //     })\n  // });\n  // data2.vaccines_data_cumulative = vDataFlat;\n  // data2.vaccines_data_cumulative.sort(function(a,b){\n  //     return new Date(a.date) - new Date(b.date);\n  // });\n  // data2.vaccines_data_cumulative.forEach(function(d,i){\n  //     if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n  //     d.dayOfYear =  moment(d.date).dayOfYear();\n  //     if(d.dayOfYear!==dayCheck) dayTotal++;\n  //     d.dayTotal = dayTotal;\n  //     d.week = moment(d.date).isoWeek();\n  //     if(d.week!==weekCheck) weekTotal++;\n  //     d.weekTotal = weekTotal;\n  //     d.month = d.date.getMonth();\n  //     if(d.month!==monthCheck) monthTotal++;\n  //     d.monthTotal = monthTotal;\n  //     d.year = d.date.getFullYear();\n  //     dayCheck = d.dayOfYear;\n  //     weekCheck = d.week;\n  //     monthCheck = d.month;\n  //     d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n  //     d.month_start = new Date(moment(d.date).startOf('month').toDate());\n  // })\n  // // parse vaccine daily data\n  // dayTotal = -1;\n  // dayCheck = 0;\n  // weekTotal = -1;\n  // weekCheck = -1;\n  // monthTotal = 0;\n  // monthCheck = 0;\n  // // filter out vaccine data on only include records with ISO3 country codes\n  // data2.vaccines_data_daily = data2.vaccines_data.filter(function(d,i){\n  //     return d.iso_code.length===3 && d.daily_vaccinations > 0;\n  // })\n  // // fill out missing vaccinations date records (extend cumulative)\n  // var vGroup = flatGroup(data2.vaccines_data_daily, d => d.iso_code);\n  // var newDates = [];\n  // var hasDays = [];\n  // var initDate = 0;\n  // var lastRecord = {};\n  // var vDataFlat = [];\n  // vGroup.forEach(function(d,i){\n  //     var minDt = new Date(minDateVaccines);\n  //     var maxDt = new Date(maxDateVaccines);\n  //     var hasDays = [];\n  //     var newDays = [];\n  //     var newDays = [];\n  //     data2.equity_data.forEach(function(dd,ii){\n  //         if(dd.country_iso3===vGroup[i][0]){\n  //             d.ifrc_region = dd.ifrc_region;\n  //             d.country_name = dd.country_name;\n  //             d.country_code = dd.country_iso2;\n  //         }\n  //     })\n  //     vGroup[i][1].forEach(function(dd,ii){\n  //         hasDays.push(new Date(dd.date).getTime());\n  //     })\n  //     // if((i<1)||(d[0] =='BFA')||(d[0] =='RWA')){\n  //     vGroup[i][1].forEach(function(dd,ii){\n  //         dd.daily_vaccinations = parseInt(dd.daily_vaccinations);\n  //         for (var day = minDt;day <= maxDt; day.setDate(day.getDate() + 1)) {\n  //             var newDay = day.getTime();\n  //             if(!hasDays.includes(newDay)){\n  //                 newDays.push({date: new Date(day), daily_vaccinations: null})\n  //             }\n  //         }\n  //     });\n  //     vGroup[i][1].push(...newDays);\n  //     vGroup[i][1].sort(function(a,b){\n  //         return new Date(a.date) - new Date(b.date);\n  //     });\n  //     var daily_vaccinations = 0;\n  //     vGroup[i][1].forEach(function(dd,ii){\n  //         if(dd.daily_vaccinations){\n  //             daily_vaccinations = dd.daily_vaccinations;\n  //         } else {\n  //             dd.daily_vaccinations = daily_vaccinations;\n  //         }\n  //         var countryName;\n  //         if(vGroup[i].country_name==null) { countryName = vGroup[i][0];\n  //         } else {\n  //             countryName = vGroup[i].country_name\n  //         }\n  //         vDataFlat.push({\n  //             date: new Date(dd.date),\n  //             iso_code: vGroup[i][0], \n  //             ifrc_region: vGroup[i].ifrc_region,\n  //             country_name: countryName,\n  //             country_code: vGroup[i].country_code, \n  //             daily_vaccinations: daily_vaccinations \n  //         })\n  //     })\n  // });\n  // data2.vaccines_data_daily = vDataFlat;\n  // data2.vaccines_data_daily.sort(function(a,b){\n  //     return new Date(a.date) - new Date(b.date);\n  // });\n  // data2.vaccines_data_daily.forEach(function(d,i){\n  //     if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n  //     d.dayOfYear =  moment(d.date).dayOfYear();\n  //     if(d.dayOfYear!==dayCheck) dayTotal++;\n  //     d.dayTotal = dayTotal;\n  //     d.week = moment(d.date).isoWeek();\n  //     if(d.week!==weekCheck) weekTotal++;\n  //     d.weekTotal = weekTotal;\n  //     d.month = d.date.getMonth();\n  //     if(d.month!==monthCheck) monthTotal++;\n  //     d.monthTotal = monthTotal;\n  //     d.year = d.date.getFullYear();\n  //     dayCheck = d.dayOfYear;\n  //     weekCheck = d.week;\n  //     monthCheck = d.month;\n  //     d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n  //     d.month_start = new Date(moment(d.date).startOf('month').toDate());\n  // });\n  // data2.equity_data = data2.equity_data.filter(function(d,i){\n  //    return countryCodes.includes(d.country_iso2)\n  // })\n  // data2.original = clone(data2);\n\n  console.log(data);\n}\n_c = ParseData2;\nexport default ParseData2;\n\nvar _c;\n\n$RefreshReg$(_c, \"ParseData2\");","map":{"version":3,"sources":["/Users/matthewsmawfield/www/ifrc-covid-dataviz/src/ParseData2.js"],"names":["min","max","group","flatGroup","moment","clone","data","ParseData2","options","regions","country","equity_data","forEach","d","i","ifrc_region","population","parseInt","pop","dd","ii","code","vaccines_used","avg_tests_per_1000","parseFloat","number_vaccine_types_used","vaccines_per_100","vaccines_who_data","country_iso3","ISO3","data_updated","DATE_UPDATED","startOf","toDate","NUMBER_VACCINES_TYPES_USED","TOTAL_VACCINATIONS_PER100","isNaN","VACCINES_USED","split","map","item","trim","ns_involvement","self_assessment","vaccine_acceptance","iso3","country_code","country_iso2","vaccine_acceptance_percent","indicator_value","vaccine_acceptance_population","population_size","contract_tracing","toLowerCase","hdi_category","match","inform_severity","console","log"],"mappings":"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","sourcesContent":["// import * as d3 from \"d3\";\nimport {min,max,group,flatGroup} from \"d3\";\nimport moment from 'moment';\nimport clone from 'just-clone';\nimport { data } from \"jquery\";\n// const regions = ['AF', 'ME', 'AP', 'EU', 'AM', 'OTH'];\n\nexport function ParseData2(data, options) {\n\n    // regions\n    data.regions = [\n        {'code': 'AF', 'population': 0},\n        {'code': 'ME', 'population': 0},\n        {'code': 'AP', 'population': 0},\n        {'code': 'EU', 'population': 0},\n        {'code': 'AM', 'population': 0},\n        {'code': 'OTH', 'population': 0}\n    ]\n\n    // country data\n    data.country = data.equity_data;\n\n    data.country.forEach(function(d,i){\n\n        // if not an IFRC region then set to OTH\n        if((d.ifrc_region!='AF')&&(d.ifrc_region!='ME')&&(d.ifrc_region!='AP')&&(d.ifrc_region!='EU')&&(d.ifrc_region!='AM')){\n            d.ifrc_region = 'OTH';\n        }\n        \n        // parse country population\n        d.population = parseInt(d.population);\n        var pop = 0;\n        if(d.population>0) pop = d.population;\n\n        // sum up ifrc region population \n        data.regions.forEach(function(dd,ii){\n            if(dd.code==d.ifrc_region){\n                dd.population += pop\n            }\n        });\n\n        // get WHO vaccine data (vaccine types used, vaccines_per_100\n        d.vaccines_used = [];\n        d.avg_tests_per_1000 = parseFloat(d.avg_tests_per_1000)||0;\n        d.number_vaccine_types_used = 0;\n        d.vaccines_per_100 = 0;\n        data.vaccines_who_data.forEach(function(dd,ii){\n            if(d.country_iso3==dd.ISO3){\n                d.data_updated = moment(dd.DATE_UPDATED).startOf('day').toDate();\n                d.number_vaccine_types_used = dd.NUMBER_VACCINES_TYPES_USED;\n                d.vaccines_per_100 = parseFloat(dd.TOTAL_VACCINATIONS_PER100);\n                if(isNaN(d.vaccines_per_100))d.vaccines_per_100 = 0;\n                d.vaccines_used = dd.VACCINES_USED.split(',').map(function(item) {\n                    return item.trim();\n                  });\n            }\n        })\n\n        // get ns involvement in activities\n        d.ns_involvement = 0;\n        data.self_assessment.forEach(function(dd,ii){\n            if(d.country_iso3==dd.ISO3){\n                if(dd['Final involvement']=='Yes') d.ns_involvement = 1;\n            }\n        })\n\n        // get vaccine acceptance\n        data.vaccine_acceptance.forEach(function(dd,ii){\n            if(d.country_iso3==dd.iso3){\n                // if(dd['Final involvement']=='Yes') d.ns_involvement = 1;\n                d.country_code = d.country_iso2;\n                d.vaccine_acceptance_percent = parseFloat(dd.indicator_value)*100;\n                d.vaccine_acceptance_population = parseInt(dd.population_size);\n            }\n        })\n\n        // get contrat tracing\n        if((d.contract_tracing.toLowerCase()=='all')||(d.contract_tracing.toLowerCase()=='some')){\n            d.contract_tracing = 1;\n        } else {\n            d.contract_tracing = 0\n        }\n\n        // parse equity data inform/hdi indexes\n        if(d.hdi_category.match(/very high/i)){\n            d.hdi_category = 'very-high'\n        }\n        else if(d.hdi_category.match(/high/i)){\n            d.hdi_category = 'high'\n        }\n        else if(d.hdi_category.match(/medium/i)){\n            d.hdi_category = 'medium'\n        }\n        else if(d.hdi_category.match(/low/i)){\n            d.hdi_category = 'low'\n        }\n        if(d.inform_severity.match(/very high/i)){\n            d.inform_severity = 'very-high'\n        }\n        else if(d.inform_severity.match(/high/i)){\n            d.inform_severity = 'high'\n        }\n        else if(d.inform_severity.match(/medium/i)){\n            d.inform_severity = 'medium'\n        }\n        else if(d.inform_severity.match(/low/i)){\n            d.inform_severity = 'low'\n        }\n        else if(d.inform_severity.match(/no/i)){\n            d.inform_severity = 'no-score'\n        }\n\n\n    });\n\n\n    // // max dates\n    // let maxDate = moment(new Date(max(data2.who_data, function(d){\n    //     return d.Date_reported;\n    // })));\n\n    // let minDate = moment(new Date(min(data2.who_data, function(d){\n    //     return d.Date_reported;\n    // })));\n\n    // // override\n    // minDate = moment('2019-12-31');\n\n    // let minDateVaccines = (new Date(min(data2.vaccines_data, function(d){\n    //     return d.date;\n    // })));\n\n\n    // let maxDateVaccines = (new Date(max(data2.vaccines_data, function(d){\n    //     return d.date;\n    // })));\n\n    // options.maxDataDate = (maxDate).toDate();\n    // options.maxVDataDate = maxDateVaccines;\n\n    // if(maxDateVaccines>maxDate) {\n    //     maxDate = maxDateVaccines;\n    // }\n\n    // // if(maxDate<moment()){\n    // //     maxDate = moment();\n    // // }\n    // // if(maxDateVaccines<moment()){\n    // //     maxDateVaccines = moment();\n    // // }\n\n    // options.maxDate = moment(maxDate).toDate();\n    // options.maxVDate = moment(maxDateVaccines).toDate();\n    // options.minDate = moment(minDate).toDate();\n\n    // // parse who data\n\n    // let dayTotal = -1;\n    // let dayCheck = 0;\n\n    // let weekTotal = -1;\n    // let weekCheck = -1;\n\n    // let monthTotal = 0;\n    // let monthCheck = 0;\n\n    // // filter out negative new deaths\n    // // data2.who_data = data2.who_data.filter(d=>d.New_deaths>0);\n    // // data2.who_data = data2.who_data.filter(d=>d.New_cases>0);\n\n    // data2.who_data.sort(function(a,b){\n    //     return new Date(a.Date_reported) - new Date(b.Date_reported);\n    // });\n\n    // var countryCodes = [];\n    // var ccArray = [];\n\n    // data2.who_data.forEach(function(d,i){\n    //     d.date = new Date(d.Date_reported);\n    //     d.dayOfYear =  moment(d.date).dayOfYear();\n    //     if(d.dayOfYear!==dayCheck) dayTotal++;\n    //     d.dayTotal = dayTotal;\n\n    //     d.week = moment(d.date).isoWeek();\n    //     if(d.week!==weekCheck) weekTotal++;\n    //     d.weekTotal = weekTotal;\n    //     d.month = d.date.getMonth();\n    //     if(d.month!==monthCheck) monthTotal++;\n    //     d.monthTotal = monthTotal;\n    //     d.year = d.date.getFullYear();\n\n    //     d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n    //     d.month_start = new Date(moment(d.date).startOf('month').toDate());\n\n    //     d.new_cases = parseInt(d.New_cases);\n    //     d.new_deaths = parseInt(d.New_deaths);\n\n    //     // // negative values\n    //     if(d.new_deaths<0)d.new_deaths = 0;\n    //     if(d.new_cases<0)d.new_cases = 0;\n\n    //     d.cumulative_deaths = parseInt(d.Cumulative_deaths);\n    //     d.cumulative_cases = parseInt(d.Cumulative_cases);\n    //     d.country_code = d.Country_code;\n    //     d.country_name = null;\n    //     data2.equity_data.forEach(function(dd,ii){\n    //         if(dd.country_iso2===d.Country_code){\n    //             d.ifrc_region = dd.ifrc_region;\n    //             d.country_name = dd.country_name;\n    //         }\n    //     })\n    //     if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n    //     if(!countryCodes.includes(d.country_code)) {\n    //         if(d.ifrc_region=='OTH'){\n    //             ccArray.push([d.Country, d.country_code]);\n    //         }\n    //         countryCodes.push(d.country_code);\n    //     }\n\n    //     delete d.Date_reported;\n    //     delete d.Country;\n    //     delete d.New_cases;\n    //     delete d.New_deaths;\n    //     delete d.Country_code;\n    //     delete d.Cumulative_deaths;\n    //     delete d.Cumulative_cases;\n    //     // delete d.Country_code;\n    //     delete d.WHO_region;\n    //     // delete d.Country;\n    //     dayCheck = d.dayOfYear;\n    //     weekCheck = d.week;\n    //     monthCheck = d.month;\n    // })\n\n    // // check for missing coutries\n    // // ccArray.forEach(function(d,i){\n    // //     console.log(d[1])\n    // // })\n    // // console.log(ccArray);\n\n    \n    // // parse vaccine cumulative data\n    // dayTotal = -1;\n    // dayCheck = 0;\n\n    // weekTotal = -1;\n    // weekCheck = -1;\n    // monthTotal = 0;\n    // monthCheck = 0;\n\n    // // filter out vaccine data on only include records with ISO3 country codes\n    // data2.vaccines_data_cumulative = data2.vaccines_data.filter(function(d,i){\n    //     return d.iso_code.length===3 && d.total_vaccinations > 0;\n    // })\n\n    // // fill out missing vaccinations date records (extend cumulative)\n    // var vGroup = flatGroup(data2.vaccines_data_cumulative, d => d.iso_code);\n\n    // var newDates = [];\n    // var hasDays = [];\n    // var initDate = 0;\n    // var lastRecord = {};\n    // var vDataFlat = [];\n    // vGroup.forEach(function(d,i){\n\n    //     var minDt = new Date(minDateVaccines);\n    //     var maxDt = new Date(maxDateVaccines);\n    //     var hasDays = [];\n    //     var newDays = [];\n    //     var newDays = [];        \n    //     data2.equity_data.forEach(function(dd,ii){\n    //         if(dd.country_iso3===vGroup[i][0]){\n    //             d.ifrc_region = dd.ifrc_region;\n    //             d.country_name = dd.country_name;\n    //             d.country_code = dd.country_iso2;\n                \n    //         }\n    //     })\n\n    //     vGroup[i].lastDate = new Date(max(vGroup[i][1], function(d,i){ return d.date }));\n\n    //     vGroup[i][1].forEach(function(dd,ii){\n    //         hasDays.push(new Date(dd.date).getTime());\n    //     })\n\n    //     // if((i<1)||(d[0] =='BFA')||(d[0] =='RWA')){\n    //     vGroup[i][1].forEach(function(dd,ii){\n    //         dd.total_vaccinations = parseInt(dd.total_vaccinations);\n    //         for (var day = minDt;day <= maxDt; day.setDate(day.getDate() + 1)) {\n    //             var newDay = day.getTime();\n    //             if(!hasDays.includes(newDay)){\n    //                 newDays.push({date: new Date(day), total_vaccinations: null})\n    //             }\n    //         }\n    //         // dd.lastDate = dd.date;\n    //     });\n\n    //     vGroup[i][1].push(...newDays);\n\n    //     vGroup[i][1].sort(function(a,b){\n    //         return new Date(a.date) - new Date(b.date);\n    //     });\n\n    //     var totalVac = 0;\n    //     var totalVac100 = 0;\n    //     var people_vaccinated_per_hundred = 0;\n    //     var people_fully_vaccinated_per_hundred = 0;\n\n    //     vGroup[i][1].forEach(function(dd,ii){\n\n    //         if(dd.total_vaccinations){\n    //             totalVac = dd.total_vaccinations;\n    //         } else {\n    //             dd.total_vaccinations = totalVac;\n    //         }\n    //         if(dd.total_vaccinations_per_hundred){\n    //             totalVac100 = dd.total_vaccinations_per_hundred\n    //         } else {\n    //             dd.total_vaccinations_per_hundred = totalVac100;\n    //         }\n    //         if(dd.people_vaccinated_per_hundred){\n    //             people_vaccinated_per_hundred = dd.people_vaccinated_per_hundred;\n    //         } else {\n    //             dd.people_vaccinated_per_hundred = people_vaccinated_per_hundred;\n    //         }\n    //         if(dd.people_fully_vaccinated_per_hundred){\n    //             people_fully_vaccinated_per_hundred = dd.people_fully_vaccinated_per_hundred;\n    //         } else {\n    //             dd.people_fully_vaccinated_per_hundred = people_fully_vaccinated_per_hundred;\n    //         }\n\n    //         var countryName;\n    //         if(vGroup[i].country_name==null) { countryName = vGroup[i][0];\n    //         } else {\n    //             countryName = vGroup[i].country_name\n    //         }\n\n    //         vDataFlat.push({\n    //             date: new Date(dd.date),\n    //             lastDate: (vGroup[i].lastDate),\n    //             total_vaccinations_per_hundred: parseFloat(totalVac100),\n    //             people_vaccinated_per_hundred: people_vaccinated_per_hundred,\n    //             people_fully_vaccinated_per_hundred: people_fully_vaccinated_per_hundred,\n    //             iso_code: vGroup[i][0], \n    //             ifrc_region: vGroup[i].ifrc_region,\n    //             country_name: countryName,\n    //             country_code: vGroup[i].country_code, \n    //             total_vaccinations: totalVac \n    //         })\n    //     })\n    // });\n\n    // data2.vaccines_data_cumulative = vDataFlat;\n\n    // data2.vaccines_data_cumulative.sort(function(a,b){\n    //     return new Date(a.date) - new Date(b.date);\n    // });\n\n    // data2.vaccines_data_cumulative.forEach(function(d,i){\n    //     if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n    //     d.dayOfYear =  moment(d.date).dayOfYear();\n    //     if(d.dayOfYear!==dayCheck) dayTotal++;\n    //     d.dayTotal = dayTotal;\n    //     d.week = moment(d.date).isoWeek();\n    //     if(d.week!==weekCheck) weekTotal++;\n    //     d.weekTotal = weekTotal;\n    //     d.month = d.date.getMonth();\n    //     if(d.month!==monthCheck) monthTotal++;\n    //     d.monthTotal = monthTotal;\n    //     d.year = d.date.getFullYear();\n    //     dayCheck = d.dayOfYear;\n    //     weekCheck = d.week;\n    //     monthCheck = d.month;\n    //     d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n    //     d.month_start = new Date(moment(d.date).startOf('month').toDate());\n    // })\n\n    // // parse vaccine daily data\n\n    // dayTotal = -1;\n    // dayCheck = 0;\n\n    // weekTotal = -1;\n    // weekCheck = -1;\n    // monthTotal = 0;\n    // monthCheck = 0;\n\n    // // filter out vaccine data on only include records with ISO3 country codes\n    // data2.vaccines_data_daily = data2.vaccines_data.filter(function(d,i){\n    //     return d.iso_code.length===3 && d.daily_vaccinations > 0;\n    // })\n\n    // // fill out missing vaccinations date records (extend cumulative)\n    // var vGroup = flatGroup(data2.vaccines_data_daily, d => d.iso_code);\n\n    // var newDates = [];\n    // var hasDays = [];\n    // var initDate = 0;\n    // var lastRecord = {};\n    // var vDataFlat = [];\n    // vGroup.forEach(function(d,i){\n\n    //     var minDt = new Date(minDateVaccines);\n    //     var maxDt = new Date(maxDateVaccines);\n    //     var hasDays = [];\n    //     var newDays = [];\n    //     var newDays = [];\n\n    //     data2.equity_data.forEach(function(dd,ii){\n    //         if(dd.country_iso3===vGroup[i][0]){\n    //             d.ifrc_region = dd.ifrc_region;\n    //             d.country_name = dd.country_name;\n    //             d.country_code = dd.country_iso2;\n    //         }\n    //     })\n\n    //     vGroup[i][1].forEach(function(dd,ii){\n    //         hasDays.push(new Date(dd.date).getTime());\n    //     })\n\n    //     // if((i<1)||(d[0] =='BFA')||(d[0] =='RWA')){\n    //     vGroup[i][1].forEach(function(dd,ii){\n    //         dd.daily_vaccinations = parseInt(dd.daily_vaccinations);\n    //         for (var day = minDt;day <= maxDt; day.setDate(day.getDate() + 1)) {\n    //             var newDay = day.getTime();\n    //             if(!hasDays.includes(newDay)){\n    //                 newDays.push({date: new Date(day), daily_vaccinations: null})\n    //             }\n    //         }\n    //     });\n\n    //     vGroup[i][1].push(...newDays);\n\n    //     vGroup[i][1].sort(function(a,b){\n    //         return new Date(a.date) - new Date(b.date);\n    //     });\n\n    //     var daily_vaccinations = 0;\n\n    //     vGroup[i][1].forEach(function(dd,ii){\n    //         if(dd.daily_vaccinations){\n    //             daily_vaccinations = dd.daily_vaccinations;\n    //         } else {\n    //             dd.daily_vaccinations = daily_vaccinations;\n    //         }\n    //         var countryName;\n    //         if(vGroup[i].country_name==null) { countryName = vGroup[i][0];\n    //         } else {\n    //             countryName = vGroup[i].country_name\n    //         }\n    //         vDataFlat.push({\n    //             date: new Date(dd.date),\n    //             iso_code: vGroup[i][0], \n    //             ifrc_region: vGroup[i].ifrc_region,\n    //             country_name: countryName,\n    //             country_code: vGroup[i].country_code, \n    //             daily_vaccinations: daily_vaccinations \n    //         })\n    //     })\n    // });\n\n    // data2.vaccines_data_daily = vDataFlat;\n\n    // data2.vaccines_data_daily.sort(function(a,b){\n    //     return new Date(a.date) - new Date(b.date);\n    // });\n\n    // data2.vaccines_data_daily.forEach(function(d,i){\n    //     if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n    //     d.dayOfYear =  moment(d.date).dayOfYear();\n    //     if(d.dayOfYear!==dayCheck) dayTotal++;\n    //     d.dayTotal = dayTotal;\n    //     d.week = moment(d.date).isoWeek();\n    //     if(d.week!==weekCheck) weekTotal++;\n    //     d.weekTotal = weekTotal;\n    //     d.month = d.date.getMonth();\n    //     if(d.month!==monthCheck) monthTotal++;\n    //     d.monthTotal = monthTotal;\n    //     d.year = d.date.getFullYear();\n    //     dayCheck = d.dayOfYear;\n    //     weekCheck = d.week;\n    //     monthCheck = d.month;\n    //     d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n    //     d.month_start = new Date(moment(d.date).startOf('month').toDate());\n    // });\n\n\n    \n\n    // data2.equity_data = data2.equity_data.filter(function(d,i){\n    //    return countryCodes.includes(d.country_iso2)\n    // })\n    // data2.original = clone(data2);\n    console.log(data);\n}\n\nexport default ParseData2;\n"]},"metadata":{},"sourceType":"module"}