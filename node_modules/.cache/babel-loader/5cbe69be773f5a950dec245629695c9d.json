{"ast":null,"code":"import * as d3 from \"d3\";\nimport moment from 'moment';\nimport colors from './colors';\nexport function drawRegionchart(data, options) {\n  const regions = ['AF', 'ME', 'AP', 'EU', 'AM', 'OTH'];\n  const groupedData = [];\n  regions.forEach(function (d, i) {\n    groupedData[d] = {\n      region: d,\n      cumulative_case: 0,\n      cumulative_deaths: 0,\n      cumulative_vaccines: 0\n    };\n  });\n  data.who_data.forEach(function (d, i) {\n    groupedData[d.ifrc_region].cumulative_case += d.new_cases;\n    groupedData[d.ifrc_region].cumulative_deaths += d.new_deaths;\n  });\n  console.log(groupedData);\n  const maxCases = d3.max(groupedData, function (d, i) {\n    return d.cumulative_cases;\n  });\n  const maxDeaths = d3.max(groupedData, function (d, i) {\n    return d.cumulative_deaths;\n  }); // append region chart containerg\n\n  const regionChartContainer = d3.select('#layout #region_chart_container').attr('opacity', 0);\n  const rcSize = {\n    x: regionChartContainer.attr('x'),\n    y: regionChartContainer.attr('y'),\n    width: regionChartContainer.attr('width'),\n    height: regionChartContainer.attr('height')\n  };\n  const svg = d3.select('#layout').append('g').attr('transform', 'translate(' + rcSize.x + ', ' + rcSize.y + ')').attr('id', 'region_chart');\n  const margin = {\n    left: 100,\n    top: 0\n  };\n  var rowHeight = rcSize.height / groupedData.length;\n  var rows = svg.selectAll('.bar-row').data(groupedData).enter().append('g').attr('class', 'bar-row').attr('transform', function (d, i) {\n    return 'translate(0,' + (i * rowHeight + margin.top) + ')';\n  }); // svg.selectAll('g').remove();\n  // const width = 2000;\n  // const barWidth = width/numIntervals;\n  // let barSpacing = 0.04; \n  // if(options.timeline_frequency==='month') barSpacing = 0.03;\n  // if(options.timeline_frequency==='day') barSpacing = 0;\n  // const xScale = d3.scaleLinear()\n  // .range([0,width])\n  // .domain([0,numIntervals]);\n  // const yScaleCases = d3.scaleLinear()\n  // .range([0,140])\n  // .domain([0,maxCases]);\n  // const yScaleDeaths = d3.scaleLinear()\n  // .range([0,140])\n  // .domain([0,maxDeaths]);\n  // // CASES\n  // // loop through groupedData and draw bars\n  // const barGroups = svg.selectAll('.bar_group')\n  // .data(groupedData)\n  // .enter()\n  // .append('g')\n  // .attr('transform', function(d,i){ \n  //     return 'translate('+xScale(i)+')'\n  // })\n  // // CASES\n  // barGroups.selectAll('.cases_bar')\n  // .data(function(d,i){ return d.region.filter(function(dd,ii){\n  //     return dd.region!=='OTH';\n  // })})\n  // .enter()\n  // .append('rect')\n  // .attr('class', 'cases_bar')\n  // .attr('x', (barWidth*barSpacing))\n  // .attr('y', function(d,i){\n  //     const totalNewCases = d3.select(this.parentNode).datum().total_new_cases - d3.select(this.parentNode).datum().OTH.new_cases;\n  //     let dp = 0;\n  //     if(i>0){\n  //         for(let ii=1;ii<=i;ii++){\n  //             if(options.timeline_type==='cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].cumulative_cases;\n  //             if(options.timeline_type==='non-cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].new_cases;\n  //             if(options.timeline_type==='stacked') dp += d3.select(this.parentNode).datum().region[ii-1].new_cases;\n  //         }\n  //     }\n  //     let y = 0;\n  //     if(options.timeline_type==='cumulative') y = (140-yScaleCases(d.cumulative_cases)-(yScaleCases(dp)))\n  //     if(options.timeline_type==='non-cumulative') y = (140-yScaleCases(d.new_cases)-(yScaleCases(dp)))\n  //     if(options.timeline_type==='stacked') y = (140-(140*(d.new_cases/totalNewCases))-((140*(dp/totalNewCases))))\n  //     if(y){ return y; } else { return 0};\n  // })\n  // .attr('width', barWidth-(barWidth*barSpacing*2))\n  // .attr('height', function(d,i){\n  //     const totalNewCases = d3.select(this.parentNode).datum().total_new_cases - d3.select(this.parentNode).datum().OTH.new_cases;\n  //     let y = 0;\n  //     if(options.timeline_type==='cumulative') y = yScaleCases(d.cumulative_cases);\n  //     if(options.timeline_type==='non-cumulative') y = yScaleCases(d.new_cases);\n  //     if(options.timeline_type==='stacked') y = (140*(d.new_cases/totalNewCases));\n  //     if(y){ return y; } else { return 0};\n  // })\n  // .attr('fill', function(d,i){\n  //     return colors.regions[d.region];\n  // })\n  // // DEATHS\n  // barGroups.selectAll('.deaths_bar')\n  // .data(function(d,i){ return d.region.filter(function(dd,ii){\n  //     return dd.region!=='OTH';\n  // })})\n  // .enter()\n  // .append('rect')\n  // .attr('class', 'deaths_bar')\n  // .attr('x', (barWidth*barSpacing))\n  // .attr('y', function(d,i){\n  //     const totalNewDeaths = d3.select(this.parentNode).datum().total_new_deaths - d3.select(this.parentNode).datum().OTH.new_deaths;\n  //     let dp = 0;\n  //     if(i>0){\n  //         for(let ii=1;ii<=i;ii++){\n  //             if(options.timeline_type==='cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].cumulative_deaths;\n  //             if(options.timeline_type==='non-cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].new_deaths;\n  //             if(options.timeline_type==='stacked') dp += d3.select(this.parentNode).datum().region[ii-1].new_deaths;\n  //         }\n  //     }\n  //     let y = 0;\n  //     if(options.timeline_type==='cumulative') y = (140-yScaleDeaths(d.cumulative_deaths)-(yScaleDeaths(dp))+170)\n  //     if(options.timeline_type==='non-cumulative') y = (140-yScaleDeaths(d.new_deaths)-(yScaleDeaths(dp))+170)\n  //     if(options.timeline_type==='stacked') y = (140-(140*(d.new_deaths/totalNewDeaths))-((140*(dp/totalNewDeaths)))+170)\n  //     if(y){ return y; } else { return 0};\n  // })\n  // .attr('width', barWidth-(barWidth*barSpacing*2))\n  // .attr('height', function(d,i){\n  //     const totalNewDeaths = d3.select(this.parentNode).datum().total_new_deaths - d3.select(this.parentNode).datum().OTH.new_deaths;\n  //     let y = 0;\n  //     if(options.timeline_type==='cumulative') y = yScaleDeaths(d.cumulative_deaths);\n  //     if(options.timeline_type==='non-cumulative') y = yScaleDeaths(d.new_deaths);\n  //     if(options.timeline_type==='stacked') y = (140*(d.new_deaths/totalNewDeaths));\n  //     if(y){ return y; } else { return 0};\n  // })\n  // .attr('fill', function(d,i){\n  //     return colors.regions[d.region];\n  // })\n  // 10\n  // 0.1\n  // 1 - 8 - 1\n  // draw x-axis\n  // draw y-axis\n}\nexport function updateRegionchart(data) {\n  console.log('update regionchart');\n}\nexport default drawRegionchart;","map":{"version":3,"sources":["/Users/matthewsmawfield/www/ifrc-covid-dataviz/src/Regionchart.js"],"names":["d3","moment","colors","drawRegionchart","data","options","regions","groupedData","forEach","d","i","region","cumulative_case","cumulative_deaths","cumulative_vaccines","who_data","ifrc_region","new_cases","new_deaths","console","log","maxCases","max","cumulative_cases","maxDeaths","regionChartContainer","select","attr","rcSize","x","y","width","height","svg","append","margin","left","top","rowHeight","length","rows","selectAll","enter","updateRegionchart"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,OAAO,SAASC,eAAT,CAAyBC,IAAzB,EAA+BC,OAA/B,EAAwC;AAE3C,QAAMC,OAAO,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,KAA/B,CAAhB;AAEA,QAAMC,WAAW,GAAG,EAApB;AAEAD,EAAAA,OAAO,CAACE,OAAR,CAAgB,UAASC,CAAT,EAAWC,CAAX,EAAa;AACzBH,IAAAA,WAAW,CAACE,CAAD,CAAX,GAAiB;AAAEE,MAAAA,MAAM,EAAEF,CAAV;AAAaG,MAAAA,eAAe,EAAE,CAA9B;AAAiCC,MAAAA,iBAAiB,EAAE,CAApD;AAAuDC,MAAAA,mBAAmB,EAAE;AAA5E,KAAjB;AACH,GAFD;AAIAV,EAAAA,IAAI,CAACW,QAAL,CAAcP,OAAd,CAAsB,UAASC,CAAT,EAAWC,CAAX,EAAa;AAC/BH,IAAAA,WAAW,CAACE,CAAC,CAACO,WAAH,CAAX,CAA2BJ,eAA3B,IAA8CH,CAAC,CAACQ,SAAhD;AACAV,IAAAA,WAAW,CAACE,CAAC,CAACO,WAAH,CAAX,CAA2BH,iBAA3B,IAAgDJ,CAAC,CAACS,UAAlD;AACH,GAHD;AAKAC,EAAAA,OAAO,CAACC,GAAR,CAAYb,WAAZ;AAEA,QAAMc,QAAQ,GAAGrB,EAAE,CAACsB,GAAH,CAAOf,WAAP,EAAoB,UAASE,CAAT,EAAWC,CAAX,EAAa;AAC9C,WAAOD,CAAC,CAACc,gBAAT;AACH,GAFgB,CAAjB;AAIA,QAAMC,SAAS,GAAGxB,EAAE,CAACsB,GAAH,CAAOf,WAAP,EAAoB,UAASE,CAAT,EAAWC,CAAX,EAAa;AAC/C,WAAOD,CAAC,CAACI,iBAAT;AACH,GAFiB,CAAlB,CArB2C,CAyB3C;;AACA,QAAMY,oBAAoB,GAAGzB,EAAE,CAAC0B,MAAH,CAAU,iCAAV,EAA6CC,IAA7C,CAAkD,SAAlD,EAA6D,CAA7D,CAA7B;AACA,QAAMC,MAAM,GAAG;AACXC,IAAAA,CAAC,EAAEJ,oBAAoB,CAACE,IAArB,CAA0B,GAA1B,CADQ;AACwBG,IAAAA,CAAC,EAAEL,oBAAoB,CAACE,IAArB,CAA0B,GAA1B,CAD3B;AAC2DI,IAAAA,KAAK,EAAEN,oBAAoB,CAACE,IAArB,CAA0B,OAA1B,CADlE;AACsGK,IAAAA,MAAM,EAAEP,oBAAoB,CAACE,IAArB,CAA0B,QAA1B;AAD9G,GAAf;AAIA,QAAMM,GAAG,GAAGjC,EAAE,CAAC0B,MAAH,CAAU,SAAV,EAAqBQ,MAArB,CAA4B,GAA5B,EAAiCP,IAAjC,CAAsC,WAAtC,EAAmD,eAAaC,MAAM,CAACC,CAApB,GAAsB,IAAtB,GAA2BD,MAAM,CAACE,CAAlC,GAAoC,GAAvF,EACXH,IADW,CACN,IADM,EACA,cADA,CAAZ;AAGA,QAAMQ,MAAM,GAAG;AAAEC,IAAAA,IAAI,EAAE,GAAR;AAAaC,IAAAA,GAAG,EAAE;AAAlB,GAAf;AAEH,MAAIC,SAAS,GAAGV,MAAM,CAACI,MAAP,GAAczB,WAAW,CAACgC,MAA1C;AAEG,MAAIC,IAAI,GAAGP,GAAG,CAACQ,SAAJ,CAAc,UAAd,EACbrC,IADa,CACRG,WADQ,EAEbmC,KAFa,GAGbR,MAHa,CAGN,GAHM,EAIbP,IAJa,CAIR,OAJQ,EAIC,SAJD,EAKbA,IALa,CAKR,WALQ,EAKK,UAASlB,CAAT,EAAWC,CAAX,EAAa;AAC/B,WAAO,kBAAmBA,CAAC,GAAC4B,SAAH,GAAgBH,MAAM,CAACE,GAAzC,IAAgD,GAAvD;AACA,GAPa,CAAX,CAtC2C,CAiiBAAT,CAA2BvC,IAA3B,EAAiC;AAEpCe,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AAEH;AAED,eAAejB,eAAf","sourcesContent":["import * as d3 from \"d3\";\nimport moment from 'moment';\nimport colors from './colors';\n\nexport function drawRegionchart(data, options) {\n\n    const regions = ['AF', 'ME', 'AP', 'EU', 'AM', 'OTH'];\n\n    const groupedData = [];\n\n    regions.forEach(function(d,i){\n        groupedData[d] = { region: d, cumulative_case: 0, cumulative_deaths: 0, cumulative_vaccines: 0};\n    })\n\n    data.who_data.forEach(function(d,i){\n        groupedData[d.ifrc_region].cumulative_case += d.new_cases;\n        groupedData[d.ifrc_region].cumulative_deaths += d.new_deaths;\n    });\n\n    console.log(groupedData);\n\n    const maxCases = d3.max(groupedData, function(d,i){\n        return d.cumulative_cases;\n    })\n\n    const maxDeaths = d3.max(groupedData, function(d,i){\n        return d.cumulative_deaths;\n    })\n\n    // append region chart containerg\n    const regionChartContainer = d3.select('#layout #region_chart_container').attr('opacity', 0);\n    const rcSize = {\n        x: regionChartContainer.attr('x'), y: regionChartContainer.attr('y'), width: regionChartContainer.attr('width'), height: regionChartContainer.attr('height')\n    }\n\n    const svg = d3.select('#layout').append('g').attr('transform', 'translate('+rcSize.x+', '+rcSize.y+')')\n    .attr('id', 'region_chart');\n\n    const margin = { left: 100, top: 0 };\n\n\tvar rowHeight = rcSize.height/groupedData.length;\n\n    var rows = svg.selectAll('.bar-row')\n\t.data(groupedData)\n\t.enter()\n\t.append('g')\n\t.attr('class', 'bar-row')\n\t.attr('transform', function(d,i){\n\t\treturn 'translate(0,' + ((i*rowHeight) + margin.top) + ')';\n\t});\n\n\n\n    // svg.selectAll('g').remove();\n\n    // const width = 2000;\n    // const barWidth = width/numIntervals;\n\n    // let barSpacing = 0.04; \n    // if(options.timeline_frequency==='month') barSpacing = 0.03;\n    // if(options.timeline_frequency==='day') barSpacing = 0;\n\n    // const xScale = d3.scaleLinear()\n    // .range([0,width])\n    // .domain([0,numIntervals]);\n\n    // const yScaleCases = d3.scaleLinear()\n    // .range([0,140])\n    // .domain([0,maxCases]);\n\n    // const yScaleDeaths = d3.scaleLinear()\n    // .range([0,140])\n    // .domain([0,maxDeaths]);\n\n    // // CASES\n    // // loop through groupedData and draw bars\n    // const barGroups = svg.selectAll('.bar_group')\n    // .data(groupedData)\n    // .enter()\n    // .append('g')\n    // .attr('transform', function(d,i){ \n    //     return 'translate('+xScale(i)+')'\n    // })\n\n    // // CASES\n    // barGroups.selectAll('.cases_bar')\n    // .data(function(d,i){ return d.region.filter(function(dd,ii){\n    //     return dd.region!=='OTH';\n    // })})\n    // .enter()\n    // .append('rect')\n    // .attr('class', 'cases_bar')\n    // .attr('x', (barWidth*barSpacing))\n    // .attr('y', function(d,i){\n    //     const totalNewCases = d3.select(this.parentNode).datum().total_new_cases - d3.select(this.parentNode).datum().OTH.new_cases;\n    //     let dp = 0;\n    //     if(i>0){\n    //         for(let ii=1;ii<=i;ii++){\n    //             if(options.timeline_type==='cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].cumulative_cases;\n    //             if(options.timeline_type==='non-cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].new_cases;\n    //             if(options.timeline_type==='stacked') dp += d3.select(this.parentNode).datum().region[ii-1].new_cases;\n    //         }\n    //     }\n    //     let y = 0;\n    //     if(options.timeline_type==='cumulative') y = (140-yScaleCases(d.cumulative_cases)-(yScaleCases(dp)))\n    //     if(options.timeline_type==='non-cumulative') y = (140-yScaleCases(d.new_cases)-(yScaleCases(dp)))\n    //     if(options.timeline_type==='stacked') y = (140-(140*(d.new_cases/totalNewCases))-((140*(dp/totalNewCases))))\n    //     if(y){ return y; } else { return 0};\n    // })\n    // .attr('width', barWidth-(barWidth*barSpacing*2))\n    // .attr('height', function(d,i){\n    //     const totalNewCases = d3.select(this.parentNode).datum().total_new_cases - d3.select(this.parentNode).datum().OTH.new_cases;\n    //     let y = 0;\n    //     if(options.timeline_type==='cumulative') y = yScaleCases(d.cumulative_cases);\n    //     if(options.timeline_type==='non-cumulative') y = yScaleCases(d.new_cases);\n    //     if(options.timeline_type==='stacked') y = (140*(d.new_cases/totalNewCases));\n    //     if(y){ return y; } else { return 0};\n    // })\n    // .attr('fill', function(d,i){\n    //     return colors.regions[d.region];\n    // })\n\n    // // DEATHS\n    // barGroups.selectAll('.deaths_bar')\n    // .data(function(d,i){ return d.region.filter(function(dd,ii){\n    //     return dd.region!=='OTH';\n    // })})\n    // .enter()\n    // .append('rect')\n    // .attr('class', 'deaths_bar')\n    // .attr('x', (barWidth*barSpacing))\n    // .attr('y', function(d,i){\n    //     const totalNewDeaths = d3.select(this.parentNode).datum().total_new_deaths - d3.select(this.parentNode).datum().OTH.new_deaths;\n    //     let dp = 0;\n    //     if(i>0){\n    //         for(let ii=1;ii<=i;ii++){\n    //             if(options.timeline_type==='cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].cumulative_deaths;\n    //             if(options.timeline_type==='non-cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].new_deaths;\n    //             if(options.timeline_type==='stacked') dp += d3.select(this.parentNode).datum().region[ii-1].new_deaths;\n    //         }\n    //     }\n    //     let y = 0;\n    //     if(options.timeline_type==='cumulative') y = (140-yScaleDeaths(d.cumulative_deaths)-(yScaleDeaths(dp))+170)\n    //     if(options.timeline_type==='non-cumulative') y = (140-yScaleDeaths(d.new_deaths)-(yScaleDeaths(dp))+170)\n    //     if(options.timeline_type==='stacked') y = (140-(140*(d.new_deaths/totalNewDeaths))-((140*(dp/totalNewDeaths)))+170)\n    //     if(y){ return y; } else { return 0};\n    // })\n    // .attr('width', barWidth-(barWidth*barSpacing*2))\n    // .attr('height', function(d,i){\n    //     const totalNewDeaths = d3.select(this.parentNode).datum().total_new_deaths - d3.select(this.parentNode).datum().OTH.new_deaths;\n    //     let y = 0;\n    //     if(options.timeline_type==='cumulative') y = yScaleDeaths(d.cumulative_deaths);\n    //     if(options.timeline_type==='non-cumulative') y = yScaleDeaths(d.new_deaths);\n    //     if(options.timeline_type==='stacked') y = (140*(d.new_deaths/totalNewDeaths));\n    //     if(y){ return y; } else { return 0};\n    // })\n    // .attr('fill', function(d,i){\n    //     return colors.regions[d.region];\n    // })\n\n    // 10\n\n    // 0.1\n\n    // 1 - 8 - 1\n    \n    // draw x-axis\n\n\n    // draw y-axis\n\n}\n\nexport function updateRegionchart(data) {\n\n    console.log('update regionchart');\n\n}\n\nexport default drawRegionchart;\n"]},"metadata":{},"sourceType":"module"}