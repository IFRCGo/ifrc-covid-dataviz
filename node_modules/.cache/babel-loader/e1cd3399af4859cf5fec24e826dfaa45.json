{"ast":null,"code":"// import * as d3 from \"d3\";\nimport { min, max, group, flatGroup } from \"d3\";\nimport moment from 'moment';\nexport function ParseData(data, options) {\n  console.log('ParseData');\n  console.log(options); // max dates\n\n  let maxDate = moment(new Date(max(data.who_data, function (d) {\n    return d.Date_reported;\n  })));\n  let minDateVaccines = new Date(min(data.vaccines_data, function (d) {\n    return d.date;\n  }));\n  let maxDateVaccines = new Date(max(data.vaccines_data, function (d) {\n    return d.date;\n  }));\n\n  if (maxDateVaccines > maxDate) {\n    maxDate = maxDateVaccines;\n  }\n\n  options.maxDate = maxDate; // options.minDate = minDate;\n  // parse who data\n\n  let dayTotal = -1;\n  let dayCheck = 0;\n  let weekTotal = -1;\n  let weekCheck = -1;\n  let monthTotal = 0;\n  let monthCheck = 0;\n  data.who_data.sort(function (a, b) {\n    return new Date(a.Date_reported) - new Date(b.Date_reported);\n  });\n  data.who_data.forEach(function (d, i) {\n    d.date = new Date(d.Date_reported); // d.dayOfYear =  moment(d.date).dayOfYear();\n    // if(d.dayOfYear!==dayCheck) dayTotal++;\n    // d.dayTotal = dayTotal;\n    // d.week = moment(d.date).isoWeek();\n    // if(d.week!==weekCheck) weekTotal++;\n    // d.weekTotal = weekTotal;\n    // d.month = d.date.getMonth();\n    // if(d.month!==monthCheck) monthTotal++;\n    // d.monthTotal = monthTotal;\n    // d.year = d.date.getFullYear();\n\n    d.new_cases = parseInt(d.New_cases);\n    d.new_deaths = parseInt(d.New_deaths);\n    d.cumulative_deaths = parseInt(d.Cumulative_deaths);\n    d.cumulative_cases = parseInt(d.Cumulative_cases);\n    d.country_code = d.Country_code;\n    d.country_name = null;\n    data.equity_data.forEach(function (dd, ii) {\n      if (dd.country_iso2 === d.Country_code) {\n        d.ifrc_region = dd.ifrc_region;\n        d.country_name = dd.country_name;\n      }\n    });\n    if (d.ifrc_region == undefined) d.ifrc_region = 'OTH';\n    delete d.Date_reported;\n    delete d.Country;\n    delete d.New_cases;\n    delete d.New_deaths;\n    delete d.Country_code;\n    delete d.Cumulative_deaths;\n    delete d.Cumulative_cases; // delete d.Country_code;\n\n    delete d.WHO_region; // delete d.Country;\n\n    dayCheck = d.dayOfYear;\n    weekCheck = d.week;\n    monthCheck = d.month;\n  }); // parse vaccine data\n\n  dayTotal = -1;\n  dayCheck = 0;\n  weekTotal = -1;\n  weekCheck = -1;\n  monthTotal = 0;\n  monthCheck = 0; // filter out vaccine data on only include records with ISO3 country codes\n\n  data.vaccines_data_cumulative = data.vaccines_data.filter(function (d, i) {\n    return d.iso_code.length === 3 && d.total_vaccinations > 0;\n  }); // fill out missing vaccinations date records (extend cumulative)\n\n  var vGroup = flatGroup(data.vaccines_data_cumulative, d => d.iso_code);\n  var newDates = [];\n  var hasDays = [];\n  var initDate = 0;\n  var lastRecord = {};\n  var vDataFlat = [];\n  vGroup.forEach(function (d, i) {\n    var minDt = new Date(minDateVaccines);\n    var maxDt = new Date(maxDateVaccines);\n    var hasDays = [];\n    var newDays = [];\n    var newDays = [];\n    data.equity_data.forEach(function (dd, ii) {\n      if (dd.country_iso3 === vGroup[i][0]) {\n        d.ifrc_region = dd.ifrc_region;\n        d.country_name = dd.country_name;\n        d.country_code = dd.country_iso2;\n      }\n    });\n    vGroup[i][1].forEach(function (dd, ii) {\n      hasDays.push(new Date(dd.date).getTime());\n    }); // if((i<1)||(d[0] =='BFA')||(d[0] =='RWA')){\n\n    vGroup[i][1].forEach(function (dd, ii) {\n      dd.total_vaccinations = parseInt(dd.total_vaccinations);\n\n      for (var day = minDt; day <= maxDt; day.setDate(day.getDate() + 1)) {\n        var newDay = day.getTime();\n\n        if (!hasDays.includes(newDay)) {\n          newDays.push({\n            date: new Date(day),\n            total_vaccinations: null\n          });\n        }\n      }\n    });\n    vGroup[i][1].push(...newDays);\n    vGroup[i][1].sort(function (a, b) {\n      return new Date(a.date) - new Date(b.date);\n    });\n    var totalVac = 0;\n    vGroup[i][1].forEach(function (dd, ii) {\n      if (dd.total_vaccinations) {\n        totalVac = dd.total_vaccinations;\n      } else {\n        dd.total_vaccinations = totalVac;\n      }\n\n      vDataFlat.push({\n        iso_code: vGroup[i][0],\n        ifrc_region: vGroup[i].ifrc_region,\n        country_name: vGroup[i].country_name,\n        country_code: vGroup[i].country_iso2,\n        total_vaccinations: totalVac\n      });\n    });\n  });\n  data.vaccines_data_cumulative = vDataFlat; // console.log('vGroup');\n  // console.log(vGroup);\n  // console.log(vGroup[31]);\n  // console.log(vGroup[154]);\n  // data.vaccines_data.sort(function(a,b){\n  //     return new Date(a.date) - new Date(b.date);\n  // });\n  // data.vaccines_data.forEach(function(d,i){\n  //     d.date = new Date(d.date);\n  //     d.dayOfYear =  moment(d.date).dayOfYear();\n  //     if(d.dayOfYear!==dayCheck) dayTotal++;\n  //     d.dayTotal = dayTotal;\n  //     d.week = moment(d.date).isoWeek();\n  //     if(d.week!==weekCheck) weekTotal++;\n  //     d.weekTotal = weekTotal;\n  //     d.month = d.date.getMonth();\n  //     if(d.month!==monthCheck) monthTotal++;\n  //     d.monthTotal = monthTotal;\n  //     d.year = d.date.getFullYear();\n  //     if(d.daily_vaccinations){\n  //         d.new_vaccines = parseInt(d.daily_vaccinations);\n  //     } else {\n  //         d.new_vaccines = 0;\n  //     }\n  //     if(d.total_vaccinations){\n  //         d.cumulative_vaccines = parseInt(d.total_vaccinations);\n  //     } else {\n  //         d.cumulative_vaccines = 0;\n  //     }\n  //     d.country_code = null;\n  //     d.country_name = null;\n  //     data.equity_data.forEach(function(dd,ii){\n  //         if(dd.country_iso3===d.iso_code){\n  //             d.ifrc_region = dd.ifrc_region;\n  //             d.country_name = dd.country_name;\n  //             d.country_code = dd.country_iso2;\n  //         }\n  //     })\n  //     if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n  //     delete d.Date_reported;\n  //     // delete d.New_cases;\n  //     // delete d.New_deaths;\n  //     // delete d.location;\n  //     // delete d.iso_code;\n  //     dayCheck = d.dayOfYear;\n  //     weekCheck = d.week;\n  //     monthCheck = d.month;\n  // })\n\n  console.log(data);\n}\n_c = ParseData;\nexport default ParseData;\n\nvar _c;\n\n$RefreshReg$(_c, \"ParseData\");","map":{"version":3,"sources":["/Users/matthewsmawfield/www/ifrc-covid-dataviz/src/ParseData.js"],"names":["min","max","group","flatGroup","moment","ParseData","data","options","console","log","maxDate","Date","who_data","d","Date_reported","minDateVaccines","vaccines_data","date","maxDateVaccines","dayTotal","dayCheck","weekTotal","weekCheck","monthTotal","monthCheck","sort","a","b","forEach","i","new_cases","parseInt","New_cases","new_deaths","New_deaths","cumulative_deaths","Cumulative_deaths","cumulative_cases","Cumulative_cases","country_code","Country_code","country_name","equity_data","dd","ii","country_iso2","ifrc_region","undefined","Country","WHO_region","dayOfYear","week","month","vaccines_data_cumulative","filter","iso_code","length","total_vaccinations","vGroup","newDates","hasDays","initDate","lastRecord","vDataFlat","minDt","maxDt","newDays","country_iso3","push","getTime","day","setDate","getDate","newDay","includes","totalVac"],"mappings":"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","sourcesContent":["// import * as d3 from \"d3\";\nimport {min,max,group,flatGroup} from \"d3\";\nimport moment from 'moment';\n\nexport function ParseData(data, options) {\n\n    console.log('ParseData');\n    console.log(options);\n        \n    // max dates\n    let maxDate = moment(new Date(max(data.who_data, function(d){\n        return d.Date_reported;\n    })));\n\n    let minDateVaccines = (new Date(min(data.vaccines_data, function(d){\n        return d.date;\n    })));\n\n\n    let maxDateVaccines = (new Date(max(data.vaccines_data, function(d){\n        return d.date;\n    })));\n\n    if(maxDateVaccines>maxDate) {\n        maxDate = maxDateVaccines;\n    }\n\n    options.maxDate = maxDate;\n    // options.minDate = minDate;\n\n    // parse who data\n\n    let dayTotal = -1;\n    let dayCheck = 0;\n\n    let weekTotal = -1;\n    let weekCheck = -1;\n\n    let monthTotal = 0;\n    let monthCheck = 0;\n\n    data.who_data.sort(function(a,b){\n        return new Date(a.Date_reported) - new Date(b.Date_reported);\n    });\n\n    data.who_data.forEach(function(d,i){\n\n        d.date = new Date(d.Date_reported);\n        // d.dayOfYear =  moment(d.date).dayOfYear();\n        // if(d.dayOfYear!==dayCheck) dayTotal++;\n        // d.dayTotal = dayTotal;\n\n        // d.week = moment(d.date).isoWeek();\n        // if(d.week!==weekCheck) weekTotal++;\n        // d.weekTotal = weekTotal;\n        // d.month = d.date.getMonth();\n        // if(d.month!==monthCheck) monthTotal++;\n        // d.monthTotal = monthTotal;\n        // d.year = d.date.getFullYear();\n        d.new_cases = parseInt(d.New_cases);\n        d.new_deaths = parseInt(d.New_deaths);\n        d.cumulative_deaths = parseInt(d.Cumulative_deaths);\n        d.cumulative_cases = parseInt(d.Cumulative_cases);\n        d.country_code = d.Country_code;\n        d.country_name = null;\n        data.equity_data.forEach(function(dd,ii){\n            if(dd.country_iso2===d.Country_code){\n                d.ifrc_region = dd.ifrc_region;\n                d.country_name = dd.country_name;\n            }\n        })\n        if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n        delete d.Date_reported;\n        delete d.Country;\n        delete d.New_cases;\n        delete d.New_deaths;\n        delete d.Country_code;\n        delete d.Cumulative_deaths;\n        delete d.Cumulative_cases;\n        // delete d.Country_code;\n        delete d.WHO_region;\n        // delete d.Country;\n        dayCheck = d.dayOfYear;\n        weekCheck = d.week;\n        monthCheck = d.month;\n    })\n\n    // parse vaccine data\n\n    dayTotal = -1;\n    dayCheck = 0;\n\n    weekTotal = -1;\n    weekCheck = -1;\n    monthTotal = 0;\n    monthCheck = 0;\n\n    // filter out vaccine data on only include records with ISO3 country codes\n    data.vaccines_data_cumulative = data.vaccines_data.filter(function(d,i){\n        return d.iso_code.length===3 && d.total_vaccinations > 0;\n    })\n\n    // fill out missing vaccinations date records (extend cumulative)\n    var vGroup = flatGroup(data.vaccines_data_cumulative, d => d.iso_code);\n\n    var newDates = [];\n    var hasDays = [];\n    var initDate = 0;\n    var lastRecord = {};\n    var vDataFlat = [];\n    vGroup.forEach(function(d,i){\n\n        var minDt = new Date(minDateVaccines);\n        var maxDt = new Date(maxDateVaccines);\n        var hasDays = [];\n        var newDays = [];\n        var newDays = [];\n\n        data.equity_data.forEach(function(dd,ii){\n            if(dd.country_iso3===vGroup[i][0]){\n                d.ifrc_region = dd.ifrc_region;\n                d.country_name = dd.country_name;\n                d.country_code = dd.country_iso2;\n            }\n        })\n\n        vGroup[i][1].forEach(function(dd,ii){\n            hasDays.push(new Date(dd.date).getTime());\n        })\n\n        // if((i<1)||(d[0] =='BFA')||(d[0] =='RWA')){\n        vGroup[i][1].forEach(function(dd,ii){\n            dd.total_vaccinations = parseInt(dd.total_vaccinations);\n            for (var day = minDt;day <= maxDt; day.setDate(day.getDate() + 1)) {\n                var newDay = day.getTime();\n                if(!hasDays.includes(newDay)){\n                    newDays.push({date: new Date(day), total_vaccinations: null})\n                }\n            }\n        });\n\n        vGroup[i][1].push(...newDays);\n\n        vGroup[i][1].sort(function(a,b){\n            return new Date(a.date) - new Date(b.date);\n        });\n\n        var totalVac = 0;\n\n        vGroup[i][1].forEach(function(dd,ii){\n            if(dd.total_vaccinations){\n                totalVac = dd.total_vaccinations;\n            } else {\n                dd.total_vaccinations = totalVac;\n            }\n            vDataFlat.push({\n                iso_code: vGroup[i][0], \n                ifrc_region: vGroup[i].ifrc_region,\n                country_name: vGroup[i].country_name,\n                country_code: vGroup[i].country_iso2, \n                total_vaccinations: totalVac \n            })\n        })\n    });\n\n    data.vaccines_data_cumulative = vDataFlat;\n\n\n\n\n\n    // console.log('vGroup');\n    // console.log(vGroup);\n    // console.log(vGroup[31]);\n    // console.log(vGroup[154]);\n\n    // data.vaccines_data.sort(function(a,b){\n    //     return new Date(a.date) - new Date(b.date);\n    // });\n\n    // data.vaccines_data.forEach(function(d,i){\n\n    //     d.date = new Date(d.date);\n    //     d.dayOfYear =  moment(d.date).dayOfYear();\n    //     if(d.dayOfYear!==dayCheck) dayTotal++;\n    //     d.dayTotal = dayTotal;\n\n    //     d.week = moment(d.date).isoWeek();\n    //     if(d.week!==weekCheck) weekTotal++;\n    //     d.weekTotal = weekTotal;\n    //     d.month = d.date.getMonth();\n    //     if(d.month!==monthCheck) monthTotal++;\n    //     d.monthTotal = monthTotal;\n    //     d.year = d.date.getFullYear();\n    //     if(d.daily_vaccinations){\n    //         d.new_vaccines = parseInt(d.daily_vaccinations);\n    //     } else {\n    //         d.new_vaccines = 0;\n    //     }\n    //     if(d.total_vaccinations){\n    //         d.cumulative_vaccines = parseInt(d.total_vaccinations);\n    //     } else {\n    //         d.cumulative_vaccines = 0;\n    //     }\n    //     d.country_code = null;\n    //     d.country_name = null;\n    //     data.equity_data.forEach(function(dd,ii){\n    //         if(dd.country_iso3===d.iso_code){\n    //             d.ifrc_region = dd.ifrc_region;\n    //             d.country_name = dd.country_name;\n    //             d.country_code = dd.country_iso2;\n    //         }\n    //     })\n    //     if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n    //     delete d.Date_reported;\n    //     // delete d.New_cases;\n    //     // delete d.New_deaths;\n    //     // delete d.location;\n    //     // delete d.iso_code;\n    //     dayCheck = d.dayOfYear;\n    //     weekCheck = d.week;\n    //     monthCheck = d.month;\n    // })\n\n    console.log(data);\n}\n\nexport default ParseData;\n"]},"metadata":{},"sourceType":"module"}