{"ast":null,"code":"import * as d3 from \"d3\";\nimport moment from 'moment';\nimport colors from './colors';\nexport function drawRegionchart(data, options) {\n  const regions = ['AF', 'ME', 'AP', 'EU', 'AM', 'OTH'];\n  const groupedData = {};\n  regions.forEach(function (d, i) {\n    groupedData[d] = {\n      cumulative_case: 0,\n      cumulative_deaths: 0,\n      cumulative_vaccines: 0\n    };\n  });\n  data.who_data.forEach(function (d, i) {\n    groupedData[d.ifrc_region].cumulative_case += d.new_cases;\n    groupedData[d.ifrc_region].cumulative_deaths += d.new_deaths;\n  });\n  console.log(groupedData);\n  const maxCases = d3.max(groupedData, function (d, i) {\n    return d.cumulative_cases;\n  });\n  const maxDeaths = d3.max(groupedData, function (d, i) {\n    return d.cumulative_deaths;\n  });\n  const g = d3.select('#'); // const svg = d3.select('#timechart_svg');\n  // svg.selectAll('g').remove();\n  // const width = 2000;\n  // const barWidth = width/numIntervals;\n  // let barSpacing = 0.04; \n  // if(options.timeline_frequency==='month') barSpacing = 0.03;\n  // if(options.timeline_frequency==='day') barSpacing = 0;\n  // const xScale = d3.scaleLinear()\n  // .range([0,width])\n  // .domain([0,numIntervals]);\n  // const yScaleCases = d3.scaleLinear()\n  // .range([0,140])\n  // .domain([0,maxCases]);\n  // const yScaleDeaths = d3.scaleLinear()\n  // .range([0,140])\n  // .domain([0,maxDeaths]);\n  // // CASES\n  // // loop through groupedData and draw bars\n  // const barGroups = svg.selectAll('.bar_group')\n  // .data(groupedData)\n  // .enter()\n  // .append('g')\n  // .attr('transform', function(d,i){ \n  //     return 'translate('+xScale(i)+')'\n  // })\n  // // CASES\n  // barGroups.selectAll('.cases_bar')\n  // .data(function(d,i){ return d.region.filter(function(dd,ii){\n  //     return dd.region!=='OTH';\n  // })})\n  // .enter()\n  // .append('rect')\n  // .attr('class', 'cases_bar')\n  // .attr('x', (barWidth*barSpacing))\n  // .attr('y', function(d,i){\n  //     const totalNewCases = d3.select(this.parentNode).datum().total_new_cases - d3.select(this.parentNode).datum().OTH.new_cases;\n  //     let dp = 0;\n  //     if(i>0){\n  //         for(let ii=1;ii<=i;ii++){\n  //             if(options.timeline_type==='cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].cumulative_cases;\n  //             if(options.timeline_type==='non-cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].new_cases;\n  //             if(options.timeline_type==='stacked') dp += d3.select(this.parentNode).datum().region[ii-1].new_cases;\n  //         }\n  //     }\n  //     let y = 0;\n  //     if(options.timeline_type==='cumulative') y = (140-yScaleCases(d.cumulative_cases)-(yScaleCases(dp)))\n  //     if(options.timeline_type==='non-cumulative') y = (140-yScaleCases(d.new_cases)-(yScaleCases(dp)))\n  //     if(options.timeline_type==='stacked') y = (140-(140*(d.new_cases/totalNewCases))-((140*(dp/totalNewCases))))\n  //     if(y){ return y; } else { return 0};\n  // })\n  // .attr('width', barWidth-(barWidth*barSpacing*2))\n  // .attr('height', function(d,i){\n  //     const totalNewCases = d3.select(this.parentNode).datum().total_new_cases - d3.select(this.parentNode).datum().OTH.new_cases;\n  //     let y = 0;\n  //     if(options.timeline_type==='cumulative') y = yScaleCases(d.cumulative_cases);\n  //     if(options.timeline_type==='non-cumulative') y = yScaleCases(d.new_cases);\n  //     if(options.timeline_type==='stacked') y = (140*(d.new_cases/totalNewCases));\n  //     if(y){ return y; } else { return 0};\n  // })\n  // .attr('fill', function(d,i){\n  //     return colors.regions[d.region];\n  // })\n  // // DEATHS\n  // barGroups.selectAll('.deaths_bar')\n  // .data(function(d,i){ return d.region.filter(function(dd,ii){\n  //     return dd.region!=='OTH';\n  // })})\n  // .enter()\n  // .append('rect')\n  // .attr('class', 'deaths_bar')\n  // .attr('x', (barWidth*barSpacing))\n  // .attr('y', function(d,i){\n  //     const totalNewDeaths = d3.select(this.parentNode).datum().total_new_deaths - d3.select(this.parentNode).datum().OTH.new_deaths;\n  //     let dp = 0;\n  //     if(i>0){\n  //         for(let ii=1;ii<=i;ii++){\n  //             if(options.timeline_type==='cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].cumulative_deaths;\n  //             if(options.timeline_type==='non-cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].new_deaths;\n  //             if(options.timeline_type==='stacked') dp += d3.select(this.parentNode).datum().region[ii-1].new_deaths;\n  //         }\n  //     }\n  //     let y = 0;\n  //     if(options.timeline_type==='cumulative') y = (140-yScaleDeaths(d.cumulative_deaths)-(yScaleDeaths(dp))+170)\n  //     if(options.timeline_type==='non-cumulative') y = (140-yScaleDeaths(d.new_deaths)-(yScaleDeaths(dp))+170)\n  //     if(options.timeline_type==='stacked') y = (140-(140*(d.new_deaths/totalNewDeaths))-((140*(dp/totalNewDeaths)))+170)\n  //     if(y){ return y; } else { return 0};\n  // })\n  // .attr('width', barWidth-(barWidth*barSpacing*2))\n  // .attr('height', function(d,i){\n  //     const totalNewDeaths = d3.select(this.parentNode).datum().total_new_deaths - d3.select(this.parentNode).datum().OTH.new_deaths;\n  //     let y = 0;\n  //     if(options.timeline_type==='cumulative') y = yScaleDeaths(d.cumulative_deaths);\n  //     if(options.timeline_type==='non-cumulative') y = yScaleDeaths(d.new_deaths);\n  //     if(options.timeline_type==='stacked') y = (140*(d.new_deaths/totalNewDeaths));\n  //     if(y){ return y; } else { return 0};\n  // })\n  // .attr('fill', function(d,i){\n  //     return colors.regions[d.region];\n  // })\n  // 10\n  // 0.1\n  // 1 - 8 - 1\n  // draw x-axis\n  // draw y-axis\n}\nexport function updateRegionchart(data) {\n  console.log('update regionchart');\n}\nexport default drawRegionchart;","map":{"version":3,"sources":["/Users/matthewsmawfield/www/ifrc-covid-dataviz/src/Regionchart.js"],"names":["d3","moment","colors","drawRegionchart","data","options","regions","groupedData","forEach","d","i","cumulative_case","cumulative_deaths","cumulative_vaccines","who_data","ifrc_region","new_cases","new_deaths","console","log","maxCases","max","cumulative_cases","maxDeaths","g","select","updateRegionchart"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,OAAO,SAASC,eAAT,CAAyBC,IAAzB,EAA+BC,OAA/B,EAAwC;AAE3C,QAAMC,OAAO,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,KAA/B,CAAhB;AAEA,QAAMC,WAAW,GAAG,EAApB;AAEAD,EAAAA,OAAO,CAACE,OAAR,CAAgB,UAASC,CAAT,EAAWC,CAAX,EAAa;AACzBH,IAAAA,WAAW,CAACE,CAAD,CAAX,GAAiB;AAAEE,MAAAA,eAAe,EAAE,CAAnB;AAAsBC,MAAAA,iBAAiB,EAAE,CAAzC;AAA4CC,MAAAA,mBAAmB,EAAE;AAAjE,KAAjB;AACH,GAFD;AAIAT,EAAAA,IAAI,CAACU,QAAL,CAAcN,OAAd,CAAsB,UAASC,CAAT,EAAWC,CAAX,EAAa;AAC/BH,IAAAA,WAAW,CAACE,CAAC,CAACM,WAAH,CAAX,CAA2BJ,eAA3B,IAA8CF,CAAC,CAACO,SAAhD;AACAT,IAAAA,WAAW,CAACE,CAAC,CAACM,WAAH,CAAX,CAA2BH,iBAA3B,IAAgDH,CAAC,CAACQ,UAAlD;AACH,GAHD;AAKAC,EAAAA,OAAO,CAACC,GAAR,CAAYZ,WAAZ;AAEA,QAAMa,QAAQ,GAAGpB,EAAE,CAACqB,GAAH,CAAOd,WAAP,EAAoB,UAASE,CAAT,EAAWC,CAAX,EAAa;AAC9C,WAAOD,CAAC,CAACa,gBAAT;AACH,GAFgB,CAAjB;AAIA,QAAMC,SAAS,GAAGvB,EAAE,CAACqB,GAAH,CAAOd,WAAP,EAAoB,UAASE,CAAT,EAAWC,CAAX,EAAa;AAC/C,WAAOD,CAAC,CAACG,iBAAT;AACH,GAFiB,CAAlB;AAIA,QAAMY,CAAC,GAAGxB,EAAE,CAACyB,MAAH,CAAU,GAAV,CAAV,CAzB2C,CA2B3C;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAGA;AAEH;AAED,OAAO,SAASC,iBAAT,CAA2BtB,IAA3B,EAAiC;AAEpCc,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AAEH;AAED,eAAehB,eAAf","sourcesContent":["import * as d3 from \"d3\";\nimport moment from 'moment';\nimport colors from './colors';\n\nexport function drawRegionchart(data, options) {\n\n    const regions = ['AF', 'ME', 'AP', 'EU', 'AM', 'OTH'];\n\n    const groupedData = {};\n\n    regions.forEach(function(d,i){\n        groupedData[d] = { cumulative_case: 0, cumulative_deaths: 0, cumulative_vaccines: 0}\n    })\n\n    data.who_data.forEach(function(d,i){\n        groupedData[d.ifrc_region].cumulative_case += d.new_cases;\n        groupedData[d.ifrc_region].cumulative_deaths += d.new_deaths;\n    });\n\n    console.log(groupedData);\n\n    const maxCases = d3.max(groupedData, function(d,i){\n        return d.cumulative_cases;\n    })\n\n    const maxDeaths = d3.max(groupedData, function(d,i){\n        return d.cumulative_deaths;\n    })\n\n    const g = d3.select('#')\n\n    // const svg = d3.select('#timechart_svg');\n    // svg.selectAll('g').remove();\n\n    // const width = 2000;\n    // const barWidth = width/numIntervals;\n\n    // let barSpacing = 0.04; \n    // if(options.timeline_frequency==='month') barSpacing = 0.03;\n    // if(options.timeline_frequency==='day') barSpacing = 0;\n\n    // const xScale = d3.scaleLinear()\n    // .range([0,width])\n    // .domain([0,numIntervals]);\n\n    // const yScaleCases = d3.scaleLinear()\n    // .range([0,140])\n    // .domain([0,maxCases]);\n\n    // const yScaleDeaths = d3.scaleLinear()\n    // .range([0,140])\n    // .domain([0,maxDeaths]);\n\n    // // CASES\n    // // loop through groupedData and draw bars\n    // const barGroups = svg.selectAll('.bar_group')\n    // .data(groupedData)\n    // .enter()\n    // .append('g')\n    // .attr('transform', function(d,i){ \n    //     return 'translate('+xScale(i)+')'\n    // })\n\n    // // CASES\n    // barGroups.selectAll('.cases_bar')\n    // .data(function(d,i){ return d.region.filter(function(dd,ii){\n    //     return dd.region!=='OTH';\n    // })})\n    // .enter()\n    // .append('rect')\n    // .attr('class', 'cases_bar')\n    // .attr('x', (barWidth*barSpacing))\n    // .attr('y', function(d,i){\n    //     const totalNewCases = d3.select(this.parentNode).datum().total_new_cases - d3.select(this.parentNode).datum().OTH.new_cases;\n    //     let dp = 0;\n    //     if(i>0){\n    //         for(let ii=1;ii<=i;ii++){\n    //             if(options.timeline_type==='cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].cumulative_cases;\n    //             if(options.timeline_type==='non-cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].new_cases;\n    //             if(options.timeline_type==='stacked') dp += d3.select(this.parentNode).datum().region[ii-1].new_cases;\n    //         }\n    //     }\n    //     let y = 0;\n    //     if(options.timeline_type==='cumulative') y = (140-yScaleCases(d.cumulative_cases)-(yScaleCases(dp)))\n    //     if(options.timeline_type==='non-cumulative') y = (140-yScaleCases(d.new_cases)-(yScaleCases(dp)))\n    //     if(options.timeline_type==='stacked') y = (140-(140*(d.new_cases/totalNewCases))-((140*(dp/totalNewCases))))\n    //     if(y){ return y; } else { return 0};\n    // })\n    // .attr('width', barWidth-(barWidth*barSpacing*2))\n    // .attr('height', function(d,i){\n    //     const totalNewCases = d3.select(this.parentNode).datum().total_new_cases - d3.select(this.parentNode).datum().OTH.new_cases;\n    //     let y = 0;\n    //     if(options.timeline_type==='cumulative') y = yScaleCases(d.cumulative_cases);\n    //     if(options.timeline_type==='non-cumulative') y = yScaleCases(d.new_cases);\n    //     if(options.timeline_type==='stacked') y = (140*(d.new_cases/totalNewCases));\n    //     if(y){ return y; } else { return 0};\n    // })\n    // .attr('fill', function(d,i){\n    //     return colors.regions[d.region];\n    // })\n\n    // // DEATHS\n    // barGroups.selectAll('.deaths_bar')\n    // .data(function(d,i){ return d.region.filter(function(dd,ii){\n    //     return dd.region!=='OTH';\n    // })})\n    // .enter()\n    // .append('rect')\n    // .attr('class', 'deaths_bar')\n    // .attr('x', (barWidth*barSpacing))\n    // .attr('y', function(d,i){\n    //     const totalNewDeaths = d3.select(this.parentNode).datum().total_new_deaths - d3.select(this.parentNode).datum().OTH.new_deaths;\n    //     let dp = 0;\n    //     if(i>0){\n    //         for(let ii=1;ii<=i;ii++){\n    //             if(options.timeline_type==='cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].cumulative_deaths;\n    //             if(options.timeline_type==='non-cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].new_deaths;\n    //             if(options.timeline_type==='stacked') dp += d3.select(this.parentNode).datum().region[ii-1].new_deaths;\n    //         }\n    //     }\n    //     let y = 0;\n    //     if(options.timeline_type==='cumulative') y = (140-yScaleDeaths(d.cumulative_deaths)-(yScaleDeaths(dp))+170)\n    //     if(options.timeline_type==='non-cumulative') y = (140-yScaleDeaths(d.new_deaths)-(yScaleDeaths(dp))+170)\n    //     if(options.timeline_type==='stacked') y = (140-(140*(d.new_deaths/totalNewDeaths))-((140*(dp/totalNewDeaths)))+170)\n    //     if(y){ return y; } else { return 0};\n    // })\n    // .attr('width', barWidth-(barWidth*barSpacing*2))\n    // .attr('height', function(d,i){\n    //     const totalNewDeaths = d3.select(this.parentNode).datum().total_new_deaths - d3.select(this.parentNode).datum().OTH.new_deaths;\n    //     let y = 0;\n    //     if(options.timeline_type==='cumulative') y = yScaleDeaths(d.cumulative_deaths);\n    //     if(options.timeline_type==='non-cumulative') y = yScaleDeaths(d.new_deaths);\n    //     if(options.timeline_type==='stacked') y = (140*(d.new_deaths/totalNewDeaths));\n    //     if(y){ return y; } else { return 0};\n    // })\n    // .attr('fill', function(d,i){\n    //     return colors.regions[d.region];\n    // })\n\n    // 10\n\n    // 0.1\n\n    // 1 - 8 - 1\n    \n    // draw x-axis\n\n\n    // draw y-axis\n\n}\n\nexport function updateRegionchart(data) {\n\n    console.log('update regionchart');\n\n}\n\nexport default drawRegionchart;\n"]},"metadata":{},"sourceType":"module"}