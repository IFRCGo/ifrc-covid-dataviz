{"ast":null,"code":"// import * as d3 from \"d3\";\nimport { min, max, group, flatGroup } from \"d3\";\nimport moment from 'moment';\nexport function ParseData(data, options) {\n  console.log('ParseData');\n  console.log(options); // max dates\n\n  let maxDate = moment(new Date(max(data.who_data, function (d) {\n    return d.Date_reported;\n  })));\n  let minDateVaccines = new Date(min(data.vaccines_data, function (d) {\n    return d.date;\n  }));\n  let maxDateVaccines = new Date(max(data.vaccines_data, function (d) {\n    return d.date;\n  }));\n\n  if (maxDateVaccines > maxDate) {\n    maxDate = maxDateVaccines;\n  }\n\n  options.maxDate = maxDate; // options.minDate = minDate;\n  // parse who data\n\n  let dayTotal = -1;\n  let dayCheck = 0;\n  let weekTotal = -1;\n  let weekCheck = -1;\n  let monthTotal = 0;\n  let monthCheck = 0;\n  data.who_data.sort(function (a, b) {\n    return new Date(a.Date_reported) - new Date(b.Date_reported);\n  });\n  data.who_data.forEach(function (d, i) {\n    d.date = new Date(d.Date_reported);\n    d.dayOfYear = moment(d.date).dayOfYear();\n    if (d.dayOfYear !== dayCheck) dayTotal++;\n    d.dayTotal = dayTotal;\n    d.week = moment(d.date).isoWeek();\n    if (d.week !== weekCheck) weekTotal++;\n    d.weekTotal = weekTotal;\n    d.month = d.date.getMonth();\n    if (d.month !== monthCheck) monthTotal++;\n    d.monthTotal = monthTotal;\n    d.year = d.date.getFullYear();\n    d.new_cases = parseInt(d.New_cases);\n    d.new_deaths = parseInt(d.New_deaths);\n    d.cumulative_deaths = parseInt(d.Cumulative_deaths);\n    d.cumulative_cases = parseInt(d.Cumulative_cases);\n    d.country_code = d.Country_code;\n    d.country_name = null;\n    data.equity_data.forEach(function (dd, ii) {\n      if (dd.country_iso2 === d.Country_code) {\n        d.ifrc_region = dd.ifrc_region;\n        d.country_name = dd.country_name;\n      }\n    });\n    if (d.ifrc_region == undefined) d.ifrc_region = 'OTH';\n    delete d.Date_reported;\n    delete d.Country;\n    delete d.New_cases;\n    delete d.New_deaths;\n    delete d.Country_code;\n    delete d.Cumulative_deaths;\n    delete d.Cumulative_cases; // delete d.Country_code;\n\n    delete d.WHO_region; // delete d.Country;\n\n    dayCheck = d.dayOfYear;\n    weekCheck = d.week;\n    monthCheck = d.month;\n  }); // parse vaccine data\n\n  dayTotal = -1;\n  dayCheck = 0;\n  weekTotal = -1;\n  weekCheck = -1;\n  monthTotal = 0;\n  monthCheck = 0; // filter out vaccine data on only include records with ISO3 country codes\n\n  data.vaccines_data = data.vaccines_data.filter(function (d, i) {\n    return d.iso_code.length === 3;\n  }); // fill out missing vaccinations date records (extend cumulative)\n\n  var vGroup = flatGroup(data.vaccines_data, d => d.iso_code);\n  console.log('minDateVaccines');\n  console.log(minDateVaccines);\n  console.log('maxDateVaccines');\n  console.log(maxDateVaccines);\n  var newDates = [];\n  var hasDays = [];\n  var initDate = 0;\n  var lastRecord = {};\n  vGroup.forEach(function (d, i) {\n    if (i < 3 || d[0] == 'BFA') {\n      // if((d[0] =='BFA')){\n      console.log(d);\n      initDate = 0;\n      hasDays = [];\n      newDates = [];\n      lastRecord = {};\n      var minDt = new Date(minDateVaccines);\n      var maxDt = new Date(maxDateVaccines);\n      vGroup[i][1].forEach(function (dd, ii) {\n        hasDays.push(new Date(dd.date).getTime());\n      });\n      console.log(hasDays);\n      console.log('initDate: ' + initDate);\n      vGroup[i][1].forEach(function (dd, ii) {\n        var lR = lastRecord;\n        console.log(lR);\n        var dt = new Date(dd.date).getTime(); // console.log(dt);\n\n        for (var day = minDt; day <= maxDt; day.setDate(day.getDate() + 1)) {\n          // console.log(day);\n          var newDay = new Date(day).getTime();\n\n          if (newDay == dt) {\n            initDate = 1;\n          }\n\n          if (initDate != 1) {\n            newDates.push({\n              iso_code: d[0],\n              date: new Date(day),\n              daily_vaccinations: 0,\n              total_vaccinations: 0\n            });\n          }\n\n          if (initDate == 1 && !hasDays.includes(newDay)) {\n            console.log('include');\n            console.log(day);\n            console.log(dd);\n            console.log(lR);\n            lastRecord.date2 = new Date(day);\n            newDates.push(lastRecord);\n          }\n        }\n\n        lR = dd;\n      });\n      console.log('newDates');\n      console.log(newDates);\n      vGroup[i][1].push(...newDates);\n      vGroup[i][1].sort(function (a, b) {\n        return new Date(a.date) - new Date(b.date);\n      });\n    }\n  });\n  console.log('vGroup');\n  console.log(vGroup);\n  console.log(vGroup[31]);\n  data.vaccines_data.sort(function (a, b) {\n    return new Date(a.date) - new Date(b.date);\n  });\n  data.vaccines_data.forEach(function (d, i) {\n    d.date = new Date(d.date);\n    d.dayOfYear = moment(d.date).dayOfYear();\n    if (d.dayOfYear !== dayCheck) dayTotal++;\n    d.dayTotal = dayTotal;\n    d.week = moment(d.date).isoWeek();\n    if (d.week !== weekCheck) weekTotal++;\n    d.weekTotal = weekTotal;\n    d.month = d.date.getMonth();\n    if (d.month !== monthCheck) monthTotal++;\n    d.monthTotal = monthTotal;\n    d.year = d.date.getFullYear();\n\n    if (d.daily_vaccinations) {\n      d.new_vaccines = parseInt(d.daily_vaccinations);\n    } else {\n      d.new_vaccines = 0;\n    }\n\n    if (d.total_vaccinations) {\n      d.cumulative_vaccines = parseInt(d.total_vaccinations);\n    } else {\n      d.cumulative_vaccines = 0;\n    }\n\n    d.country_code = null;\n    d.country_name = null;\n    data.equity_data.forEach(function (dd, ii) {\n      if (dd.country_iso3 === d.iso_code) {\n        d.ifrc_region = dd.ifrc_region;\n        d.country_name = dd.country_name;\n        d.country_code = dd.country_iso2;\n      }\n    });\n    if (d.ifrc_region == undefined) d.ifrc_region = 'OTH';\n    delete d.Date_reported; // delete d.New_cases;\n    // delete d.New_deaths;\n    // delete d.location;\n    // delete d.iso_code;\n\n    dayCheck = d.dayOfYear;\n    weekCheck = d.week;\n    monthCheck = d.month;\n  });\n  console.log(data);\n}\n_c = ParseData;\nexport default ParseData;\n\nvar _c;\n\n$RefreshReg$(_c, \"ParseData\");","map":{"version":3,"sources":["/Users/matthewsmawfield/www/ifrc-covid-dataviz/src/ParseData.js"],"names":["min","max","group","flatGroup","moment","ParseData","data","options","console","log","maxDate","Date","who_data","d","Date_reported","minDateVaccines","vaccines_data","date","maxDateVaccines","dayTotal","dayCheck","weekTotal","weekCheck","monthTotal","monthCheck","sort","a","b","forEach","i","dayOfYear","week","isoWeek","month","getMonth","year","getFullYear","new_cases","parseInt","New_cases","new_deaths","New_deaths","cumulative_deaths","Cumulative_deaths","cumulative_cases","Cumulative_cases","country_code","Country_code","country_name","equity_data","dd","ii","country_iso2","ifrc_region","undefined","Country","WHO_region","filter","iso_code","length","vGroup","newDates","hasDays","initDate","lastRecord","minDt","maxDt","push","getTime","lR","dt","day","setDate","getDate","newDay","daily_vaccinations","total_vaccinations","includes","date2","new_vaccines","cumulative_vaccines","country_iso3"],"mappings":"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","sourcesContent":["// import * as d3 from \"d3\";\nimport {min,max,group,flatGroup} from \"d3\";\n\nimport moment from 'moment';\n\nexport function ParseData(data, options) {\n\n    console.log('ParseData');\n    console.log(options);\n        \n    // max dates\n    let maxDate = moment(new Date(max(data.who_data, function(d){\n        return d.Date_reported;\n    })));\n\n    let minDateVaccines = (new Date(min(data.vaccines_data, function(d){\n        return d.date;\n    })));\n\n\n    let maxDateVaccines = (new Date(max(data.vaccines_data, function(d){\n        return d.date;\n    })));\n\n    if(maxDateVaccines>maxDate) {\n        maxDate = maxDateVaccines;\n    }\n\n    options.maxDate = maxDate;\n    // options.minDate = minDate;\n\n    // parse who data\n\n    let dayTotal = -1;\n    let dayCheck = 0;\n\n    let weekTotal = -1;\n    let weekCheck = -1;\n\n    let monthTotal = 0;\n    let monthCheck = 0;\n\n    data.who_data.sort(function(a,b){\n        return new Date(a.Date_reported) - new Date(b.Date_reported);\n    });\n\n    data.who_data.forEach(function(d,i){\n\n        d.date = new Date(d.Date_reported);\n        d.dayOfYear =  moment(d.date).dayOfYear();\n        if(d.dayOfYear!==dayCheck) dayTotal++;\n        d.dayTotal = dayTotal;\n\n        d.week = moment(d.date).isoWeek();\n        if(d.week!==weekCheck) weekTotal++;\n        d.weekTotal = weekTotal;\n        d.month = d.date.getMonth();\n        if(d.month!==monthCheck) monthTotal++;\n        d.monthTotal = monthTotal;\n        d.year = d.date.getFullYear();\n        d.new_cases = parseInt(d.New_cases);\n        d.new_deaths = parseInt(d.New_deaths);\n        d.cumulative_deaths = parseInt(d.Cumulative_deaths);\n        d.cumulative_cases = parseInt(d.Cumulative_cases);\n        d.country_code = d.Country_code;\n        d.country_name = null;\n        data.equity_data.forEach(function(dd,ii){\n            if(dd.country_iso2===d.Country_code){\n                d.ifrc_region = dd.ifrc_region;\n                d.country_name = dd.country_name;\n            }\n        })\n        if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n        delete d.Date_reported;\n        delete d.Country;\n        delete d.New_cases;\n        delete d.New_deaths;\n        delete d.Country_code;\n        delete d.Cumulative_deaths;\n        delete d.Cumulative_cases;\n        // delete d.Country_code;\n        delete d.WHO_region;\n        // delete d.Country;\n        dayCheck = d.dayOfYear;\n        weekCheck = d.week;\n        monthCheck = d.month;\n    })\n\n\n    // parse vaccine data\n\n    dayTotal = -1;\n    dayCheck = 0;\n\n    weekTotal = -1;\n    weekCheck = -1;\n    monthTotal = 0;\n    monthCheck = 0;\n\n    // filter out vaccine data on only include records with ISO3 country codes\n    data.vaccines_data = data.vaccines_data.filter(function(d,i){\n        return d.iso_code.length===3;\n    })\n\n    // fill out missing vaccinations date records (extend cumulative)\n    var vGroup = flatGroup(data.vaccines_data, d => d.iso_code);\n\n    console.log('minDateVaccines');\n    console.log(minDateVaccines);\n    console.log('maxDateVaccines');\n    console.log(maxDateVaccines);\n\n    var newDates = [];\n    var hasDays = [];\n    var initDate = 0;\n    var lastRecord = {};\n\n    vGroup.forEach(function(d,i){\n\n        if((i<3)||(d[0] =='BFA')){\n        // if((d[0] =='BFA')){\n\n            console.log(d);\n            initDate = 0;\n            hasDays = [];\n            newDates = [];\n            lastRecord = {};\n            var minDt = new Date(minDateVaccines);\n            var maxDt = new Date(maxDateVaccines);\n\n            vGroup[i][1].forEach(function(dd,ii){\n                hasDays.push(new Date(dd.date).getTime());\n            });\n\n            console.log(hasDays);\n            console.log('initDate: ' + initDate);\n\n            vGroup[i][1].forEach(function(dd,ii){\n\n                var lR = lastRecord; \n                console.log(lR);\n\n                var dt = new Date(dd.date).getTime();\n                // console.log(dt);\n\n                for (var day = minDt;day <= maxDt; day.setDate(day.getDate() + 1)) {\n                    // console.log(day);\n                    var newDay = new Date(day).getTime();\n\n                    if((newDay)==(dt)) {\n                        initDate=1;\n                    }\n                    if(initDate!=1){\n                        newDates.push({iso_code: d[0], date: new Date(day), daily_vaccinations: 0, total_vaccinations: 0})\n                    } \n                    \n                    if((initDate==1)&&(!hasDays.includes(newDay))){\n                        console.log('include');\n                        console.log(day);\n                        console.log(dd);\n                        console.log(lR);\n                        lastRecord.date2 = new Date(day);\n                        newDates.push(lastRecord);\n                    }\n                }\n\n                lR = dd;\n\n            });\n\n            console.log('newDates');\n            console.log(newDates);\n\n            vGroup[i][1].push(...newDates);\n\n            vGroup[i][1].sort(function(a,b){\n                return new Date(a.date) - new Date(b.date);\n            });\n\n        }\n\n\n    })\n\n    console.log('vGroup');\n    console.log(vGroup);\n    console.log(vGroup[31]);\n\n    data.vaccines_data.sort(function(a,b){\n        return new Date(a.date) - new Date(b.date);\n    });\n\n    data.vaccines_data.forEach(function(d,i){\n\n        d.date = new Date(d.date);\n        d.dayOfYear =  moment(d.date).dayOfYear();\n        if(d.dayOfYear!==dayCheck) dayTotal++;\n        d.dayTotal = dayTotal;\n\n        d.week = moment(d.date).isoWeek();\n        if(d.week!==weekCheck) weekTotal++;\n        d.weekTotal = weekTotal;\n        d.month = d.date.getMonth();\n        if(d.month!==monthCheck) monthTotal++;\n        d.monthTotal = monthTotal;\n        d.year = d.date.getFullYear();\n        if(d.daily_vaccinations){\n            d.new_vaccines = parseInt(d.daily_vaccinations);\n        } else {\n            d.new_vaccines = 0;\n        }\n        if(d.total_vaccinations){\n            d.cumulative_vaccines = parseInt(d.total_vaccinations);\n        } else {\n            d.cumulative_vaccines = 0;\n        }\n        d.country_code = null;\n        d.country_name = null;\n        data.equity_data.forEach(function(dd,ii){\n            if(dd.country_iso3===d.iso_code){\n                d.ifrc_region = dd.ifrc_region;\n                d.country_name = dd.country_name;\n                d.country_code = dd.country_iso2;\n            }\n        })\n        if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n        delete d.Date_reported;\n        // delete d.New_cases;\n        // delete d.New_deaths;\n        // delete d.location;\n        // delete d.iso_code;\n        dayCheck = d.dayOfYear;\n        weekCheck = d.week;\n        monthCheck = d.month;\n    })\n\n    console.log(data);\n}\n\nexport default ParseData;\n"]},"metadata":{},"sourceType":"module"}