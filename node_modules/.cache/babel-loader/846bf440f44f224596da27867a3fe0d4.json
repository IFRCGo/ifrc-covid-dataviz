{"ast":null,"code":"export function addCommas(nStr) {\n  nStr += '';\n  let x = nStr.split('.');\n  let x1 = x[0];\n  let x2 = x.length > 1 ? '.' + x[1] : '';\n  var rgx = /(\\d+)(\\d{3})/;\n\n  while (rgx.test(x1)) {\n    x1 = x1.replace(rgx, '$1' + ',' + '$2');\n  }\n\n  return x1 + x2;\n}\nexport function nFormatter(num, digits) {\n  const lookup = [{\n    value: 1,\n    symbol: \"\"\n  }, {\n    value: 1e3,\n    symbol: \"k\"\n  }, {\n    value: 1e6,\n    symbol: \"M\"\n  }, {\n    value: 1e9,\n    symbol: \"G\"\n  }, {\n    value: 1e12,\n    symbol: \"T\"\n  }, {\n    value: 1e15,\n    symbol: \"P\"\n  }, {\n    value: 1e18,\n    symbol: \"E\"\n  }];\n  const rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n  var item = lookup.slice().reverse().find(function (item) {\n    return num >= item.value;\n  });\n  return item ? (num / item.value).toFixed(digits).replace(rx, \"$1\") + item.symbol : \"0\";\n}","map":{"version":3,"sources":["/Users/matthewsmawfield/www/ifrc-covid-dataviz/src/HelperFunctions.js"],"names":["addCommas","nStr","x","split","x1","x2","length","rgx","test","replace","nFormatter","num","digits","lookup","value","symbol","rx","item","slice","reverse","find","toFixed"],"mappings":"AAAA,OAAO,SAASA,SAAT,CAAmBC,IAAnB,EAAwB;AAC3BA,EAAAA,IAAI,IAAI,EAAR;AACA,MAAIC,CAAC,GAAGD,IAAI,CAACE,KAAL,CAAW,GAAX,CAAR;AACA,MAAIC,EAAE,GAAGF,CAAC,CAAC,CAAD,CAAV;AACA,MAAIG,EAAE,GAAGH,CAAC,CAACI,MAAF,GAAW,CAAX,GAAe,MAAMJ,CAAC,CAAC,CAAD,CAAtB,GAA4B,EAArC;AACA,MAAIK,GAAG,GAAG,cAAV;;AACA,SAAOA,GAAG,CAACC,IAAJ,CAASJ,EAAT,CAAP,EAAqB;AACjBA,IAAAA,EAAE,GAAGA,EAAE,CAACK,OAAH,CAAWF,GAAX,EAAgB,OAAO,GAAP,GAAa,IAA7B,CAAL;AACH;;AACD,SAAOH,EAAE,GAAGC,EAAZ;AACH;AAED,OAAO,SAASK,UAAT,CAAoBC,GAApB,EAAyBC,MAAzB,EAAiC;AACpC,QAAMC,MAAM,GAAG,CACb;AAAEC,IAAAA,KAAK,EAAE,CAAT;AAAYC,IAAAA,MAAM,EAAE;AAApB,GADa,EAEb;AAAED,IAAAA,KAAK,EAAE,GAAT;AAAcC,IAAAA,MAAM,EAAE;AAAtB,GAFa,EAGb;AAAED,IAAAA,KAAK,EAAE,GAAT;AAAcC,IAAAA,MAAM,EAAE;AAAtB,GAHa,EAIb;AAAED,IAAAA,KAAK,EAAE,GAAT;AAAcC,IAAAA,MAAM,EAAE;AAAtB,GAJa,EAKb;AAAED,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,MAAM,EAAE;AAAvB,GALa,EAMb;AAAED,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,MAAM,EAAE;AAAvB,GANa,EAOb;AAAED,IAAAA,KAAK,EAAE,IAAT;AAAeC,IAAAA,MAAM,EAAE;AAAvB,GAPa,CAAf;AASA,QAAMC,EAAE,GAAG,0BAAX;AACA,MAAIC,IAAI,GAAGJ,MAAM,CAACK,KAAP,GAAeC,OAAf,GAAyBC,IAAzB,CAA8B,UAASH,IAAT,EAAe;AACtD,WAAON,GAAG,IAAIM,IAAI,CAACH,KAAnB;AACD,GAFU,CAAX;AAGA,SAAOG,IAAI,GAAG,CAACN,GAAG,GAAGM,IAAI,CAACH,KAAZ,EAAmBO,OAAnB,CAA2BT,MAA3B,EAAmCH,OAAnC,CAA2CO,EAA3C,EAA+C,IAA/C,IAAuDC,IAAI,CAACF,MAA/D,GAAwE,GAAnF;AACD","sourcesContent":["export function addCommas(nStr){\n    nStr += '';\n    let x = nStr.split('.');\n    let x1 = x[0];\n    let x2 = x.length > 1 ? '.' + x[1] : '';\n    var rgx = /(\\d+)(\\d{3})/;\n    while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + ',' + '$2');\n    }\n    return x1 + x2;\n}\n\nexport function nFormatter(num, digits) {\n    const lookup = [\n      { value: 1, symbol: \"\" },\n      { value: 1e3, symbol: \"k\" },\n      { value: 1e6, symbol: \"M\" },\n      { value: 1e9, symbol: \"G\" },\n      { value: 1e12, symbol: \"T\" },\n      { value: 1e15, symbol: \"P\" },\n      { value: 1e18, symbol: \"E\" }\n    ];\n    const rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n    var item = lookup.slice().reverse().find(function(item) {\n      return num >= item.value;\n    });\n    return item ? (num / item.value).toFixed(digits).replace(rx, \"$1\") + item.symbol : \"0\";\n  }\n  \n"]},"metadata":{},"sourceType":"module"}