{"ast":null,"code":"import * as d3 from \"d3\";\nimport moment from 'moment';\nexport function drawTimechart(data, options) {\n  const regions = ['AP', 'AM', 'AF', 'ME', 'EU', 'OTH']; // console.log('draw timechart');\n  // console.log(data);\n  // console.log(options);\n  // const groupedData = d3.group(data.who_data, d => d[options.timeline_frequency+'Total'], d => d.ifrc_region)\n\n  const groupedData = [];\n  data.who_data.forEach(function (d, i) {\n    if (!groupedData[d[options.timeline_frequency + 'Total']]) groupedData[d[options.timeline_frequency + 'Total']] = {};\n    if (options.timeline_frequency == 'day') groupedData[d[options.timeline_frequency + 'Total']].date = d.date;\n    if (options.timeline_frequency == 'week') groupedData[d[options.timeline_frequency + 'Total']].date = moment(d.date).startOf('isoWeek').toDate();\n    if (options.timeline_frequency == 'month') groupedData[d[options.timeline_frequency + 'Total']].date = moment(d.date).startOf('month').toDate();\n    if (!groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region]) groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region] = {\n      new_cases: 0,\n      new_deaths: 0,\n      cumulative_cases: 0,\n      cumulative_deaths: 0\n    };\n    groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].new_cases += d.new_cases;\n    groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].new_deaths += d.new_deaths; // groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].cumulative_cases = 0;\n\n    if (i > 0) groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].cumulative_cases += parseInt(d.new_cases) + parseInt(groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].cumulative_cases);\n\n    if (d.new_cases > 0 && i > 0) {\n      groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].cumulative_cases = d.cumulative_cases;\n    } // if(d.new_deaths>0)\n    // groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].cumulative_deaths += d.cumulative_deaths;\n\n  });\n  console.log(groupedData); // totals by date\n\n  groupedData.forEach(function (d, i) {\n    d.total_new_cases = d.AF.new_cases + d.AP.new_cases + d.AM.new_cases + d.EU.new_cases + d.ME.new_cases + d.OTH.new_cases;\n    d.total_cumulative_cases = d.AF.cumulative_cases + d.AP.cumulative_cases + d.AM.cumulative_cases + d.EU.cumulative_cases + d.ME.cumulative_cases + d.OTH.cumulative_cases;\n    d.total_new_deaths = d.AF.new_deaths + d.AP.new_deaths + d.AM.new_deaths + d.EU.new_deaths + d.ME.new_deaths + d.OTH.new_deaths;\n    d.total_cumulative_deaths = d.AF.cumulative_deaths + d.AP.cumulative_deaths + d.AM.cumulative_deaths + d.EU.cumulative_deaths + d.ME.cumulative_deaths + d.OTH.cumulative_deaths;\n  }); // console.log(groupedData);\n  // const numIntervals = d3.max(data.who_data, function(d,i){\n  //     return d[options.timeline_frequency+'Total'];\n  // });\n  // const maxCases = d3.max(groupedData, function(d,i){\n  //     if(options.timeline_type=='non-cumulative') return d.total_new_cases;\n  //     if(options.timeline_type=='cumulative') return d.total_cumulative_cases;\n  //     if(options.timeline_type=='stacked') return 100;\n  // })\n  // // define date range\n  // const minDate = groupedData[0].date;\n  // const maxDate = groupedData[numIntervals].date;\n  // const svg = d3.select('#timechart_svg').attr('fill', 'blue');\n  // const width = parseInt(svg.attr('width'));\n  // const barWidth = width/numIntervals;\n  // const barSpacing = 0.2;\n  // const xScale = d3.scaleLinear()\n  // .range([0,width])\n  // .domain([minDate,maxDate]);\n  // const yScaleCases = d3.scaleLinear()\n  // .range([140,0])\n  // .domain([0,maxCases]);\n  // console.log('minDate');\n  // console.log(minDate);\n  // console.log('maxDate');\n  // console.log(maxDate);\n  // // CASES\n  // // loop through groupedData and draw bars\n  // const casesBarGroups = svg.selectAll('.cases_bar_group')\n  // .data(groupedData)\n  // .enter()\n  // .append('g')\n  // .attr('transform', function(d,i){ return 'translate('+xScale(d.date)+')'})\n  // casesBarGroups.append('rect')\n  // .attr('x', (barWidth*barSpacing))\n  // .attr('y', 0)\n  // .attr('width', barWidth-(barWidth*barSpacing*2))\n  // .attr('height', function(d,i){\n  //     // console.log(d);\n  // });\n  // 10\n  // 0.1\n  // 1 - 8 - 1\n  // draw x-axis\n  // draw y-axis\n}\nexport function updateTimechart(data) {\n  console.log('update timechart');\n}\nexport default drawTimechart;","map":{"version":3,"sources":["/Users/matthewsmawfield/www/ifrc-covid-dataviz/src/Timechart.js"],"names":["d3","moment","drawTimechart","data","options","regions","groupedData","who_data","forEach","d","i","timeline_frequency","date","startOf","toDate","ifrc_region","new_cases","new_deaths","cumulative_cases","cumulative_deaths","parseInt","console","log","total_new_cases","AF","AP","AM","EU","ME","OTH","total_cumulative_cases","total_new_deaths","total_cumulative_deaths","updateTimechart"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,OAA7B,EAAsC;AAEzC,QAAMC,OAAO,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,KAA/B,CAAhB,CAFyC,CAGzC;AACA;AACA;AACA;;AAEA,QAAMC,WAAW,GAAG,EAApB;AAEAH,EAAAA,IAAI,CAACI,QAAL,CAAcC,OAAd,CAAsB,UAASC,CAAT,EAAWC,CAAX,EAAa;AAC/B,QAAG,CAACJ,WAAW,CAACG,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAf,EAAuDL,WAAW,CAACG,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAX,GAAqD,EAArD;AACvD,QAAGP,OAAO,CAACO,kBAAR,IAA4B,KAA/B,EAAsCL,WAAW,CAACG,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAX,CAAmDC,IAAnD,GAA0DH,CAAC,CAACG,IAA5D;AACtC,QAAGR,OAAO,CAACO,kBAAR,IAA4B,MAA/B,EAAuCL,WAAW,CAACG,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAX,CAAmDC,IAAnD,GAA0DX,MAAM,CAACQ,CAAC,CAACG,IAAH,CAAN,CAAeC,OAAf,CAAuB,SAAvB,EAAkCC,MAAlC,EAA1D;AACvC,QAAGV,OAAO,CAACO,kBAAR,IAA4B,OAA/B,EAAwCL,WAAW,CAACG,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAX,CAAmDC,IAAnD,GAA0DX,MAAM,CAACQ,CAAC,CAACG,IAAH,CAAN,CAAeC,OAAf,CAAuB,OAAvB,EAAgCC,MAAhC,EAA1D;AACxC,QAAG,CAACR,WAAW,CAACG,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAX,CAAmDF,CAAC,CAACM,WAArD,CAAJ,EAAuET,WAAW,CAACG,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAX,CAAmDF,CAAC,CAACM,WAArD,IAAoE;AAACC,MAAAA,SAAS,EAAE,CAAZ;AAAeC,MAAAA,UAAU,EAAE,CAA3B;AAA8BC,MAAAA,gBAAgB,EAAE,CAAhD;AAAmDC,MAAAA,iBAAiB,EAAE;AAAtE,KAApE;AACvEb,IAAAA,WAAW,CAACG,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAX,CAAmDF,CAAC,CAACM,WAArD,EAAkEC,SAAlE,IAA+EP,CAAC,CAACO,SAAjF;AACAV,IAAAA,WAAW,CAACG,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAX,CAAmDF,CAAC,CAACM,WAArD,EAAkEE,UAAlE,IAAgFR,CAAC,CAACQ,UAAlF,CAP+B,CAQ/B;;AACA,QAAGP,CAAC,GAAC,CAAL,EACAJ,WAAW,CAACG,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAX,CAAmDF,CAAC,CAACM,WAArD,EAAkEG,gBAAlE,IAAsFE,QAAQ,CAACX,CAAC,CAACO,SAAH,CAAR,GAAwBI,QAAQ,CAACd,WAAW,CAACG,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAX,CAAmDF,CAAC,CAACM,WAArD,EAAkEG,gBAAnE,CAAtH;;AAEA,QAAIT,CAAC,CAACO,SAAF,GAAY,CAAb,IAAkBN,CAAC,GAAC,CAAvB,EAA0B;AACtBJ,MAAAA,WAAW,CAACG,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAX,CAAmDF,CAAC,CAACM,WAArD,EAAkEG,gBAAlE,GAAqFT,CAAC,CAACS,gBAAvF;AACH,KAd8B,CAgB/B;AACA;;AACH,GAlBD;AAoBAG,EAAAA,OAAO,CAACC,GAAR,CAAYhB,WAAZ,EA9ByC,CAgCzC;;AACAA,EAAAA,WAAW,CAACE,OAAZ,CAAoB,UAASC,CAAT,EAAWC,CAAX,EAAa;AAE7BD,IAAAA,CAAC,CAACc,eAAF,GAAoBd,CAAC,CAACe,EAAF,CAAKR,SAAL,GAAiBP,CAAC,CAACgB,EAAF,CAAKT,SAAtB,GAAkCP,CAAC,CAACiB,EAAF,CAAKV,SAAvC,GAAmDP,CAAC,CAACkB,EAAF,CAAKX,SAAxD,GAAoEP,CAAC,CAACmB,EAAF,CAAKZ,SAAzE,GAAqFP,CAAC,CAACoB,GAAF,CAAMb,SAA/G;AACAP,IAAAA,CAAC,CAACqB,sBAAF,GAA2BrB,CAAC,CAACe,EAAF,CAAKN,gBAAL,GAAwBT,CAAC,CAACgB,EAAF,CAAKP,gBAA7B,GAAgDT,CAAC,CAACiB,EAAF,CAAKR,gBAArD,GAAwET,CAAC,CAACkB,EAAF,CAAKT,gBAA7E,GAAgGT,CAAC,CAACmB,EAAF,CAAKV,gBAArG,GAAwHT,CAAC,CAACoB,GAAF,CAAMX,gBAAzJ;AACAT,IAAAA,CAAC,CAACsB,gBAAF,GAAqBtB,CAAC,CAACe,EAAF,CAAKP,UAAL,GAAkBR,CAAC,CAACgB,EAAF,CAAKR,UAAvB,GAAoCR,CAAC,CAACiB,EAAF,CAAKT,UAAzC,GAAsDR,CAAC,CAACkB,EAAF,CAAKV,UAA3D,GAAwER,CAAC,CAACmB,EAAF,CAAKX,UAA7E,GAA0FR,CAAC,CAACoB,GAAF,CAAMZ,UAArH;AACAR,IAAAA,CAAC,CAACuB,uBAAF,GAA4BvB,CAAC,CAACe,EAAF,CAAKL,iBAAL,GAAyBV,CAAC,CAACgB,EAAF,CAAKN,iBAA9B,GAAkDV,CAAC,CAACiB,EAAF,CAAKP,iBAAvD,GAA2EV,CAAC,CAACkB,EAAF,CAAKR,iBAAhF,GAAoGV,CAAC,CAACmB,EAAF,CAAKT,iBAAzG,GAA6HV,CAAC,CAACoB,GAAF,CAAMV,iBAA/J;AAEH,GAPD,EAjCyC,CA0CzC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAGA;AAEH;AAED,OAAO,SAASc,eAAT,CAAyB9B,IAAzB,EAA+B;AAElCkB,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AAEH;AAED,eAAepB,aAAf","sourcesContent":["import * as d3 from \"d3\";\nimport moment from 'moment';\n\nexport function drawTimechart(data, options) {\n\n    const regions = ['AP', 'AM', 'AF', 'ME', 'EU', 'OTH'];\n    // console.log('draw timechart');\n    // console.log(data);\n    // console.log(options);\n    // const groupedData = d3.group(data.who_data, d => d[options.timeline_frequency+'Total'], d => d.ifrc_region)\n\n    const groupedData = [];\n\n    data.who_data.forEach(function(d,i){\n        if(!groupedData[d[options.timeline_frequency+'Total']])groupedData[d[options.timeline_frequency+'Total']] = {};\n        if(options.timeline_frequency=='day') groupedData[d[options.timeline_frequency+'Total']].date = d.date;\n        if(options.timeline_frequency=='week') groupedData[d[options.timeline_frequency+'Total']].date = moment(d.date).startOf('isoWeek').toDate();\n        if(options.timeline_frequency=='month') groupedData[d[options.timeline_frequency+'Total']].date = moment(d.date).startOf('month').toDate();\n        if(!groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region]) groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region] = {new_cases: 0, new_deaths: 0, cumulative_cases: 0, cumulative_deaths: 0};\n        groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].new_cases += d.new_cases;\n        groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].new_deaths += d.new_deaths;\n        // groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].cumulative_cases = 0;\n        if(i>0)\n        groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].cumulative_cases += parseInt(d.new_cases) + parseInt(groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].cumulative_cases);\n\n        if((d.new_cases>0)&&(i>0)){\n            groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].cumulative_cases = d.cumulative_cases;\n        }\n\n        // if(d.new_deaths>0)\n        // groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].cumulative_deaths += d.cumulative_deaths;\n    });\n\n    console.log(groupedData);\n\n    // totals by date\n    groupedData.forEach(function(d,i){\n        \n        d.total_new_cases = d.AF.new_cases + d.AP.new_cases + d.AM.new_cases + d.EU.new_cases + d.ME.new_cases + d.OTH.new_cases; \n        d.total_cumulative_cases = d.AF.cumulative_cases + d.AP.cumulative_cases + d.AM.cumulative_cases + d.EU.cumulative_cases + d.ME.cumulative_cases + d.OTH.cumulative_cases; \n        d.total_new_deaths = d.AF.new_deaths + d.AP.new_deaths + d.AM.new_deaths + d.EU.new_deaths + d.ME.new_deaths + d.OTH.new_deaths; \n        d.total_cumulative_deaths = d.AF.cumulative_deaths + d.AP.cumulative_deaths + d.AM.cumulative_deaths + d.EU.cumulative_deaths + d.ME.cumulative_deaths + d.OTH.cumulative_deaths; \n\n    })\n\n    // console.log(groupedData);\n    // const numIntervals = d3.max(data.who_data, function(d,i){\n    //     return d[options.timeline_frequency+'Total'];\n    // });\n\n    // const maxCases = d3.max(groupedData, function(d,i){\n    //     if(options.timeline_type=='non-cumulative') return d.total_new_cases;\n    //     if(options.timeline_type=='cumulative') return d.total_cumulative_cases;\n    //     if(options.timeline_type=='stacked') return 100;\n    // })\n\n    // // define date range\n    // const minDate = groupedData[0].date;\n    // const maxDate = groupedData[numIntervals].date;\n\n    // const svg = d3.select('#timechart_svg').attr('fill', 'blue');\n    // const width = parseInt(svg.attr('width'));\n    // const barWidth = width/numIntervals;\n    // const barSpacing = 0.2;\n\n    // const xScale = d3.scaleLinear()\n    // .range([0,width])\n    // .domain([minDate,maxDate]);\n\n    // const yScaleCases = d3.scaleLinear()\n    // .range([140,0])\n    // .domain([0,maxCases]);\n\n    // console.log('minDate');\n    // console.log(minDate);\n    // console.log('maxDate');\n    // console.log(maxDate);\n\n    // // CASES\n    // // loop through groupedData and draw bars\n    // const casesBarGroups = svg.selectAll('.cases_bar_group')\n    // .data(groupedData)\n    // .enter()\n    // .append('g')\n    // .attr('transform', function(d,i){ return 'translate('+xScale(d.date)+')'})\n\n    // casesBarGroups.append('rect')\n    // .attr('x', (barWidth*barSpacing))\n    // .attr('y', 0)\n    // .attr('width', barWidth-(barWidth*barSpacing*2))\n    // .attr('height', function(d,i){\n    //     // console.log(d);\n    // });\n\n    // 10\n\n    // 0.1\n\n    // 1 - 8 - 1\n    \n    // draw x-axis\n\n\n    // draw y-axis\n\n}\n\nexport function updateTimechart(data) {\n\n    console.log('update timechart');\n\n}\n\nexport default drawTimechart;\n"]},"metadata":{},"sourceType":"module"}