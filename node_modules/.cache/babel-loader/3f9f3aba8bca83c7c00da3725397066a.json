{"ast":null,"code":"import * as d3 from \"d3\";\nimport moment from 'moment';\nimport colors from './colors';\nimport { filter } from './App';\nimport mapboxgl from '!mapbox-gl'; // eslint-disable-line import/no-webpack-loader-syntax\n\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport { addCommas } from './HelperFunctions';\nmapboxgl.accessToken = 'pk.eyJ1IjoiZ28taWZyYyIsImEiOiJjams3b2ZhZWswMGFvM3hxeHp2ZHFhOTRrIn0._pqO9OQ2iNeDGrpopJNjpg';\nlet map;\nlet dots;\nlet maxSize = 15;\nlet mapTooltip;\nexport function createMap(data, options, filter) {\n  d3.select('#map-refresh').attr('display', 'none').style('cursor', 'pointer').on('click', function (d, i) {\n    map.setCenter([8, 22]);\n    map.setZoom(1);\n    d3.select('#map-refresh').attr('display', 'none');\n  });\n  map = new mapboxgl.Map({\n    container: 'map_div',\n    // container ID\n    style: 'mapbox://styles/go-ifrc/ck9tz6f150ub11ip8j97wrsww',\n    // style URL\n    center: [8, 22],\n    // starting position [lng, lat]\n    zoom: 1 // starting zoom\n\n  });\n  map.setRenderWorldCopies(false);\n  map.addControl(new mapboxgl.NavigationControl());\n  map.on('zoom', function () {\n    d3.select('#map-refresh').attr('display', 'inline');\n  });\n  map.on('touchmove', function () {\n    d3.select('#map-refresh').attr('display', 'inline');\n  });\n  map.on('wheel', function () {\n    d3.select('#map-refresh').attr('display', 'inline');\n  });\n  map.on('drag', function () {\n    d3.select('#map-refresh').attr('display', 'inline');\n  });\n  var container = map.getCanvasContainer();\n  var svg = d3.select(container).append(\"svg\").attr('id', 'mapoverlay').attr(\"width\", \"100%\").attr(\"height\", \"24vw\").style(\"position\", \"absolute\").style(\"z-index\", 2);\n  mapTooltip = d3.select('#map_tooltip').attr('opacity', 1).attr('transform', 'translate(0,0)').attr('display', 'inline'); // dots = svg\n  // .selectAll(\".country-map\")\n  // .data(data.world)\n  // .enter()\n  // .append(\"circle\")\n  // .attr('class', 'country-map')\n  // .attr('id', function(d,i){ return 'country-map-'+d.iso2 })\n  // .attr(\"r\", 0)\n  // var maxValue = d3.max(data.country, function(d,i){\n  //     return d[1].cumulative_cases;\n  // })\n  // var rScale = d3.scalePow().exponent(0.5)\n  //   .domain([0, maxValue])\n  //   .range([0, 15]);\n  // data.country.forEach(function(d,i){\n  //     d3.select('#country-'+d[0]).attr('r', rScale(d[1].cumulative_cases))\n  //     .attr('data-name', d[1].country)\n  // })\n\n  document.getElementById(\"mapoverlay\").appendChild(d3.select('#map_tooltip').node());\n  mapTooltip.attr('display', 'none');\n  map.on('mousemove', function (e) {\n    var features = map.queryRenderedFeatures(e.point);\n    var displayProperties = ['type', 'properties', 'id', 'layer', 'source', 'sourceLayer', 'state'];\n\n    if (features.length == 1 && features[0].layer.id == 'countries') {\n      var id = features[0].properties.ISO2;\n      var countryfiltered = data.equity_data.filter(d => d.country_iso2 == id);\n      var countryName;\n      if (countryfiltered[0]) countryName = countryfiltered[0].country_name;\n      mapTooltip.select('#map_tooltip_name tspan').text(countryName);\n\n      if (options.map_toggle == 'cases') {\n        var country = data.country.filter(d => d[1].country_code == id)[0];\n        if (!country || country.length == 0) return false;\n        mapTooltip.select('#map_tooltip_val tspan').text(addCommas(country[1].cumulative_cases) + ' cases');\n      }\n\n      if (options.map_toggle == 'deaths') {\n        var country = data.country.filter(d => d[1].country_code == id)[0];\n        if (!country || country.length == 0) return false;\n        mapTooltip.select('#map_tooltip_val tspan').text(addCommas(country[1].cumulative_deaths) + ' deaths');\n      }\n\n      if (options.map_toggle == 'bi-weekly-change') {\n        var country = data.country.filter(d => d[1].country_code == id)[0];\n        if (!country || country.length == 0) return false;\n        var val = (country[1].percent_change * 100).toFixed(1);\n        var str = '';\n\n        if (val >= 0) {\n          str = '% increase';\n        } else {\n          str = '% decrease';\n        }\n\n        mapTooltip.select('#map_tooltip_val tspan').text(Math.abs(val) + str);\n      }\n\n      if (options.map_toggle == 'percent-fully-vaccinated') {\n        var country = data.vGroup.filter(d => d[1][0].country_code == id);\n        if (!country || country.length == 0) return false;\n        if (!country[0][1]) return false;\n        country = country[0][1];\n        mapTooltip.select('#map_tooltip_val tspan').text(parseFloat(country[0].people_fully_vaccinated_per_hundred).toFixed(1) + '% fully vaccinated');\n      }\n\n      if (options.map_toggle == 'percent-vaccine-acceptance') {\n        var country = data.vGroup.filter(d => d[1][0].country_code == id);\n        if (!country || country.length == 0) return false;\n        if (!country[0][1]) return false;\n        country = country[0][1];\n        mapTooltip.select('#map_tooltip_val tspan').text(parseFloat(country[0].vaccine_acceptance_percent).toFixed(1) + '% vaccine acceptance');\n      }\n\n      d3.select('#map_tooltip_bg').attr('width', 0);\n      var bbox = mapTooltip.node().getBBox();\n      d3.select('#map_tooltip_bg').attr('width', parseFloat(bbox.width) + 5);\n      var scale = window.innerWidth / 1329;\n      mapTooltip.attr('display', 'inline').attr('transform', 'translate(' + (e.point.x + 20) + ',' + e.point.y + ')scale(' + scale + ')');\n      var heightOffset = mapTooltip.node().getBBox(); // mapTooltip.attr('transform', 'translate('+(project(([d.lng, d.lat])).x+3)+','+(project(([d.lng, d.lat])).y+2-heightOffset.height/2)+')scale('+scale+')');\n    } else {\n      mapTooltip.attr('display', 'none');\n    }\n  });\n  map.on('load', function (e) {\n    map.setPaintProperty('countries', 'fill-opacity-transition', {\n      duration: 0,\n      delay: 0\n    });\n    updateMap(data, options);\n  });\n}\nexport function updateMap(data, options) {\n  var duration = 800;\n  var delay = 10;\n  map.setLayoutProperty('countries', 'visibility', 'none');\n\n  if (options.map_toggle == 'bi-weekly-change') {\n    var maxIncrease = d3.max(data.country, function (d, i) {\n      return d[1].percent_change;\n    });\n    var maxDecrease = d3.min(data.country, function (d, i) {\n      return d[1].percent_change;\n    }); // var rScale = d3.scalePow().exponent(0.5)\n    // .domain([-1, 0, 1])\n    // .range([maxSize, 0, maxSize])\n    // .clamp(true);\n    // d3.selectAll('.country-map').transition('c').duration(duration/1.7).attr('r',0);\n    // data.country.forEach(function(d,i){\n    //     d3.select('#country-map-'+d[0])\n    //     .transition('c').duration(duration).delay(delay)\n    //     .attr('r', rScale(d[1].percent_change))\n    //     .style('stroke', function(){\n    //         // if(d[1].percent_change>1){ return '#E02225'} else { return '#1F558C'}\n    //         return '#FFF'\n    //     }).style('fill', function(){\n    //         if(d[1].percent_change>0){ return colors.red } else { return colors.blue}\n    //     })\n    // })\n\n    var colorScale = d3.scaleLinear() // .domain([-1, 0, 1])\n    .domain([maxDecrease, 0, maxIncrease]).range([colors.blue, colors.lightgrey, colors.red]).clamp(true);\n    var fillColorArray = ['case'];\n    data.country.forEach(function (d, i) {\n      fillColorArray.push(['==', ['get', \"ISO2\"], d[0]]);\n      fillColorArray.push(colorScale(d[1].percent_change));\n    });\n\n    if (fillColorArray.length > 1) {\n      fillColorArray.push(colors.darkgrey);\n      map.setPaintProperty('countries', 'fill-color', fillColorArray);\n    }\n  }\n\n  if (options.map_toggle == 'cases') {\n    var maxValue = d3.max(data.country, function (d, i) {\n      return d[1].cumulative_cases;\n    }); // var rScale = d3.scalePow().exponent(0.5)\n    // .domain([0, maxValue])\n    // .range([0, maxSize]);\n    // d3.selectAll('.country-map').transition('c').duration(duration/1.7).attr('r',0);\n    // data.country.forEach(function(d,i){\n    //     d3.select('#country-map-'+d[0])\n    //     .transition('c').duration(duration).delay(delay)\n    //     .attr('r', rScale(d[1].cumulative_cases))\n    //     .style('fill', colors.red)\n    //     .style('stroke', '#FFF');\n    // })\n\n    var colorScale = d3.scaleLinear().domain([0, maxValue]).range([colors.lightgrey, colors.red]);\n    var fillColorArray = ['case'];\n    data.country.forEach(function (d, i) {\n      fillColorArray.push(['==', ['get', \"ISO2\"], d[0]]);\n      fillColorArray.push(colorScale(d[1].cumulative_cases));\n    });\n\n    if (fillColorArray.length > 1) {\n      fillColorArray.push(colors.darkgrey);\n      map.setPaintProperty('countries', 'fill-color', fillColorArray);\n    }\n  }\n\n  if (options.map_toggle == 'deaths') {\n    var maxValue = d3.max(data.country, function (d, i) {\n      return d[1].cumulative_deaths;\n    }); // var rScale = d3.scalePow().exponent(0.5)\n    // .domain([0, maxValue])\n    // .range([0, maxSize]);\n    // d3.selectAll('.country-map').transition('c').duration(duration/1.7).attr('r',0);\n    // data.country.forEach(function(d,i){\n    //     d3.select('#country-map-'+d[0])\n    //     .transition('c').duration(duration).delay(delay)\n    //     .attr('r', rScale(d[1].cumulative_deaths))\n    //     .style('fill', colors.red)\n    //     .style('stroke', '#FFF');\n    // })\n\n    var colorScale = d3.scaleLinear().domain([0, maxValue]).range([colors.lightgrey, colors.red]);\n    var fillColorArray = ['case'];\n    data.country.forEach(function (d, i) {\n      fillColorArray.push(['==', ['get', \"ISO2\"], d[0]]);\n      fillColorArray.push(colorScale(d[1].cumulative_deaths));\n    });\n\n    if (fillColorArray.length > 1) {\n      fillColorArray.push(colors.darkgrey);\n      map.setPaintProperty('countries', 'fill-color', fillColorArray);\n    }\n  }\n\n  if (options.map_toggle == 'percent-fully-vaccinated') {\n    var maxValue = d3.max(data.vGroup, function (d, i) {\n      return parseFloat(d[1][0].people_fully_vaccinated_per_hundred) / 100;\n    }); // var rScale = d3.scalePow().exponent(0.55)\n    // .domain([0, 1])\n    // .range([1, maxSize])\n    // .clamp(true);\n    // d3.selectAll('.country-map').transition('c').duration(duration/1.7).attr('r',0);\n    // data.vGroup.forEach(function(d,i){\n    //     var peoplevaccinated = parseFloat(d[1][0].people_fully_vaccinated_per_hundred)/100;\n    //     if(isNaN(peoplevaccinated)) peoplevaccinated = 0;\n    //     d3.select('#country-map-'+d[1][0].country_code)\n    //     .transition('c').duration(duration).delay(delay)\n    //     .attr('r', rScale(peoplevaccinated))\n    //     .style('stroke', '#FFF')\n    //     .style('fill', function(){\n    //         return colors.blue;\n    //     })\n    // })\n\n    var colorScale = d3.scaleLinear().domain([0, maxValue]).range([colors.lightgrey, colors.blue]);\n    var fillColorArray = ['case'];\n    data.vGroup.forEach(function (d, i) {\n      var peoplevaccinated = parseFloat(d[1][0].people_fully_vaccinated_per_hundred) / 100;\n      if (isNaN(peoplevaccinated)) peoplevaccinated = 0;\n\n      if (peoplevaccinated > 0) {\n        if (d[1][0].country_code) fillColorArray.push(['==', ['get', \"ISO2\"], d[1][0].country_code]);\n        if (d[1][0].country_code) fillColorArray.push(colorScale(peoplevaccinated));\n      }\n    });\n    console.log(fillColorArray);\n\n    if (fillColorArray.length > 1) {\n      fillColorArray.push(colors.darkgrey);\n      map.setPaintProperty('countries', 'fill-color', fillColorArray);\n    } else {\n      map.setPaintProperty('countries', 'fill-color', colors.darkgrey);\n    }\n  }\n\n  if (options.map_toggle == 'percent-vaccine-acceptance') {\n    var maxValue = d3.max(data.vGroup, function (d, i) {\n      return parseFloat(d[1][0].vaccine_acceptance_percent) / 100;\n    }); // var rScale = d3.scalePow().exponent(1)\n    // .domain([0, 1])\n    // .range([1, maxSize*.7])\n    // // .clamp(true);\n    // d3.selectAll('.country-map').transition('c').duration(duration/1.7).attr('r',0);\n    // data.vGroup.forEach(function(d,i){\n    //     var vaccine_acceptance_percent = parseFloat(d[1][0].vaccine_acceptance_percent/100);\n    //     if(isNaN(vaccine_acceptance_percent)) vaccine_acceptance_percent = 0;\n    //     d3.select('#country-map-'+d[1][0].country_code)\n    //     .transition('c').duration(duration).delay(delay)\n    //     .attr('r', rScale(vaccine_acceptance_percent))\n    //     .style('stroke', '#FFF')\n    //     .style('fill', function(){\n    //         return colors.blue;\n    //     })\n    // })\n\n    var colorScale = d3.scaleLinear().domain([0, maxValue]).range([colors.lightgrey, colors.blue]);\n    var fillColorArray = ['case'];\n    data.vGroup.forEach(function (d, i) {\n      var vaccine_acceptance_percent = parseFloat(d[1][0].vaccine_acceptance_percent) / 100;\n      if (isNaN(vaccine_acceptance_percent)) vaccine_acceptance_percent = 0;\n\n      if (vaccine_acceptance_percent > 0) {\n        if (d[1][0].country_code) fillColorArray.push(['==', ['get', \"ISO2\"], d[1][0].country_code]);\n        if (d[1][0].country_code) fillColorArray.push(colorScale(vaccine_acceptance_percent));\n      }\n    });\n    console.log(fillColorArray);\n\n    if (fillColorArray.length > 1) {\n      fillColorArray.push(colors.darkgrey);\n      map.setPaintProperty('countries', 'fill-color', fillColorArray);\n    } else {\n      map.setPaintProperty('countries', 'fill-color', colors.darkgrey);\n    }\n  }\n\n  mapTooltip.attr('display', 'none');\n  map.on('mousemove', function (e) {\n    var features = map.queryRenderedFeatures(e.point);\n    var displayProperties = ['type', 'properties', 'id', 'layer', 'source', 'sourceLayer', 'state'];\n\n    if (features.length == 1 && features[0].layer.id == 'countries') {\n      var id = features[0].properties.ISO2;\n      var countryfiltered = data.equity_data.filter(d => d.country_iso2 == id);\n      var countryName;\n      if (countryfiltered[0]) countryName = countryfiltered[0].country_name;\n      mapTooltip.select('#map_tooltip_name tspan').text(countryName);\n\n      if (options.map_toggle == 'cases') {\n        var country = data.country.filter(d => d[1].country_code == id)[0];\n        if (!country || country.length == 0) return false;\n        mapTooltip.select('#map_tooltip_val tspan').text(addCommas(country[1].cumulative_cases) + ' cases');\n      }\n\n      if (options.map_toggle == 'deaths') {\n        var country = data.country.filter(d => d[1].country_code == id)[0];\n        if (!country || country.length == 0) return false;\n        mapTooltip.select('#map_tooltip_val tspan').text(addCommas(country[1].cumulative_deaths) + ' deaths');\n      }\n\n      if (options.map_toggle == 'bi-weekly-change') {\n        var country = data.country.filter(d => d[1].country_code == id)[0];\n        if (!country || country.length == 0) return false;\n        var val = (country[1].percent_change * 100).toFixed(1);\n        var str = '';\n\n        if (val >= 0) {\n          str = '% increase';\n        } else {\n          str = '% decrease';\n        }\n\n        mapTooltip.select('#map_tooltip_val tspan').text(Math.abs(val) + str);\n      }\n\n      if (options.map_toggle == 'percent-fully-vaccinated') {\n        var country = data.vGroup.filter(d => d[1][0].country_code == id);\n        if (!country || country.length == 0) return false;\n        if (!country[0][1]) return false;\n        country = country[0][1];\n        mapTooltip.select('#map_tooltip_val tspan').text(parseFloat(country[0].people_fully_vaccinated_per_hundred).toFixed(1) + '% fully vaccinated');\n      }\n\n      if (options.map_toggle == 'percent-vaccine-acceptance') {\n        var country = data.vGroup.filter(d => d[1][0].country_code == id);\n        if (!country || country.length == 0) return false;\n        if (!country[0][1]) return false;\n        country = country[0][1];\n        mapTooltip.select('#map_tooltip_val tspan').text(parseFloat(country[0].vaccine_acceptance_percent).toFixed(1) + '% vaccine acceptance');\n      }\n\n      var str = mapTooltip.select('#map_tooltip_val tspan').text();\n      if (str.includes('NaN')) mapTooltip.attr('display', 'none');\n      d3.select('#map_tooltip_bg').attr('width', 0);\n      var bbox = mapTooltip.node().getBBox();\n      d3.select('#map_tooltip_bg').attr('width', parseFloat(bbox.width) + 5);\n      var scale = window.innerWidth / 1329;\n      mapTooltip.attr('display', 'inline').attr('transform', 'translate(' + (e.point.x + 20) + ',' + e.point.y + ')scale(' + scale + ')');\n      var heightOffset = mapTooltip.node().getBBox(); // mapTooltip.attr('transform', 'translate('+(project(([d.lng, d.lat])).x+3)+','+(project(([d.lng, d.lat])).y+2-heightOffset.height/2)+')scale('+scale+')');\n    } else {\n      mapTooltip.attr('display', 'none');\n    }\n  }); // function render() {\n  //     dots\n  //       .attr(\"cx\", function(d) {\n  //         return project(([d.lng, d.lat])).x;\n  //       })\n  //       .attr(\"cy\", function(d) {\n  //         return project(([d.lng, d.lat])).y;\n  //       });\n  //   }\n  // map.on(\"viewreset\", render);\n  // map.on(\"move\", render);\n  // map.on(\"moveend\", render);\n  // render(); // Call once to render\n  // tooltips\n  // var mapTooltip = d3.select('#map_tooltip').attr('opacity', 1).attr('transform', 'translate(0,0)').attr('display', 'none');\n  // d3.selectAll('.country-map').on('mousemove', function(event, d){\n  //     var id = d3.select(this).attr('id').substr(12,2);\n  //     var countryfiltered = data.equity_data.filter(d=>d.country_iso2 == id);\n  //     var countryName;\n  //     if(countryfiltered[0]) countryName = countryfiltered[0].country_name;\n  //     mapTooltip.select('#map_tooltip_name tspan').text(countryName);\n  //     if(options.map_toggle=='cases'){\n  //         var country = data.country.filter(d=>d[1].country_code == id)[0];\n  //         if((!country)||(country.length==0)) return false;\n  //         mapTooltip.select('#map_tooltip_val tspan').text(addCommas(country[1].cumulative_cases)+' cases');\n  //     }\n  //     if(options.map_toggle=='deaths'){\n  //         var country = data.country.filter(d=>d[1].country_code == id)[0];\n  //         if((!country)||(country.length==0)) return false;\n  //         mapTooltip.select('#map_tooltip_val tspan').text(addCommas(country[1].cumulative_deaths)+' deaths');\n  //     }\n  //     if(options.map_toggle=='bi-weekly-change'){\n  //         var country = data.country.filter(d=>d[1].country_code == id)[0];\n  //         if((!country)||(country.length==0)) return false;\n  //         var val = ((country[1].percent_change)*100).toFixed(1);\n  //         var str = '';\n  //         if(val>=0){\n  //             str = '% increase';\n  //         } else {\n  //             str = '% decrease';\n  //         }\n  //         mapTooltip.select('#map_tooltip_val tspan').text(Math.abs(val)+str);\n  //     }\n  //     if(options.map_toggle=='percent-fully-vaccinated'){\n  //         var country = data.vGroup.filter(d=>d[1][0].country_code == id)[0][1];\n  //         if((!country)||(country.length==0)) return false;\n  //         mapTooltip.select('#map_tooltip_val tspan').text(parseFloat(country[0].people_fully_vaccinated_per_hundred).toFixed(1)+'% fully vaccinated');\n  //     }\n  //     if(options.map_toggle=='percent-vaccine-acceptance'){\n  //         var country = data.vGroup.filter(d=>d[1][0].country_code == id)[0][1];\n  //         if((!country)||(country.length==0)) return false;\n  //         mapTooltip.select('#map_tooltip_val tspan').text(parseFloat(country[0].vaccine_acceptance_percent).toFixed(1)+'% vaccine acceptance');\n  //     }\n  //     d3.select('#map_tooltip_bg').attr('width', 0)\n  //     var bbox = mapTooltip.node().getBBox();\n  //     d3.select('#map_tooltip_bg').attr('width', (parseFloat(bbox.width)+2))\n  //     var scale = window.innerWidth/1329;\n  //     mapTooltip\n  //     .attr('display', 'inline')\n  //     .attr('transform', 'translate('+project(([d.lng, d.lat])).x+','+project(([d.lng, d.lat])).y+')scale('+scale+')');\n  //     var heightOffset = mapTooltip.node().getBBox();\n  //     mapTooltip.attr('transform', 'translate('+(project(([d.lng, d.lat])).x+3)+','+(project(([d.lng, d.lat])).y+2-heightOffset.height/2)+')scale('+scale+')');\n  // }).on('mouseout', function(event){\n  //     if(event.toElement=='tspan') return false;\n  //     mapTooltip.attr('display', 'none');\n  // })\n\n  map.setLayoutProperty('countries', 'visibility', 'visible');\n} // function project(d) {\n//     return map.project(new mapboxgl.LngLat(d[0], d[1]));\n// }\n\nexport default createMap;","map":{"version":3,"sources":["/Users/matthewsmawfield/www/ifrc-covid-dataviz/src/Map.js"],"names":["d3","moment","colors","filter","mapboxgl","addCommas","accessToken","map","dots","maxSize","mapTooltip","createMap","data","options","select","attr","style","on","d","i","setCenter","setZoom","Map","container","center","zoom","setRenderWorldCopies","addControl","NavigationControl","getCanvasContainer","svg","append","document","getElementById","appendChild","node","e","features","queryRenderedFeatures","point","displayProperties","length","layer","id","properties","ISO2","countryfiltered","equity_data","country_iso2","countryName","country_name","text","map_toggle","country","country_code","cumulative_cases","cumulative_deaths","val","percent_change","toFixed","str","Math","abs","vGroup","parseFloat","people_fully_vaccinated_per_hundred","vaccine_acceptance_percent","bbox","getBBox","width","scale","window","innerWidth","x","y","heightOffset","setPaintProperty","duration","delay","updateMap","setLayoutProperty","maxIncrease","max","maxDecrease","min","colorScale","scaleLinear","domain","range","blue","lightgrey","red","clamp","fillColorArray","forEach","push","darkgrey","maxValue","peoplevaccinated","isNaN","console","log","includes"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\nimport moment from 'moment';\nimport colors from './colors';\nimport {filter} from './App';\nimport mapboxgl from '!mapbox-gl'; // eslint-disable-line import/no-webpack-loader-syntax\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport {addCommas} from './HelperFunctions';\n\nmapboxgl.accessToken = 'pk.eyJ1IjoiZ28taWZyYyIsImEiOiJjams3b2ZhZWswMGFvM3hxeHp2ZHFhOTRrIn0._pqO9OQ2iNeDGrpopJNjpg';\n\nlet map;\nlet dots; \nlet maxSize = 15; \nlet mapTooltip;\n\nexport function createMap(data, options, filter) {\n\n    d3.select('#map-refresh').attr('display', 'none').style('cursor', 'pointer')\n    .on('click', function(d,i){\n        map.setCenter([8, 22]);\n        map.setZoom(1);\n        d3.select('#map-refresh').attr('display', 'none');\n    })\n    \n    map = new mapboxgl.Map({\n        container: 'map_div', // container ID\n        style: 'mapbox://styles/go-ifrc/ck9tz6f150ub11ip8j97wrsww', // style URL\n        center: [8, 22], // starting position [lng, lat]\n        zoom: 1 // starting zoom\n    });\n\n    map.setRenderWorldCopies(false);\n    map.addControl(new mapboxgl.NavigationControl());\n    \n    map.on('zoom', function() {\n        d3.select('#map-refresh').attr('display', 'inline');\n    });\n\n    map.on('touchmove', function() {\n        d3.select('#map-refresh').attr('display', 'inline');\n    });\n\n    map.on('wheel', function() {\n        d3.select('#map-refresh').attr('display', 'inline');\n    });\n\n    map.on('drag', function() {\n        d3.select('#map-refresh').attr('display', 'inline');\n    });\n\n    var container = map.getCanvasContainer();\n\n    var svg = d3\n    .select(container)\n    .append(\"svg\")\n    .attr('id', 'mapoverlay')\n    .attr(\"width\", \"100%\")\n    .attr(\"height\", \"24vw\")\n    .style(\"position\", \"absolute\")\n    .style(\"z-index\", 2);\n\n    mapTooltip = d3.select('#map_tooltip').attr('opacity', 1).attr('transform', 'translate(0,0)').attr('display', 'inline');\n\n    // dots = svg\n    // .selectAll(\".country-map\")\n    // .data(data.world)\n    // .enter()\n    // .append(\"circle\")\n    // .attr('class', 'country-map')\n    // .attr('id', function(d,i){ return 'country-map-'+d.iso2 })\n    // .attr(\"r\", 0)\n    \n\n    // var maxValue = d3.max(data.country, function(d,i){\n    //     return d[1].cumulative_cases;\n    // })\n\n    // var rScale = d3.scalePow().exponent(0.5)\n    //   .domain([0, maxValue])\n    //   .range([0, 15]);\n\n    // data.country.forEach(function(d,i){\n    //     d3.select('#country-'+d[0]).attr('r', rScale(d[1].cumulative_cases))\n    //     .attr('data-name', d[1].country)\n    // })\n    \n    document.getElementById(\"mapoverlay\").appendChild(d3.select('#map_tooltip').node());\n    mapTooltip.attr('display', 'none')  \n\n    map.on('mousemove', function (e) {\n        var features = map.queryRenderedFeatures(e.point);\n         \n        var displayProperties = [\n        'type',\n        'properties',\n        'id',\n        'layer',\n        'source',\n        'sourceLayer',\n        'state'\n        ];\n         \n        if((features.length==1)&&(features[0].layer.id=='countries')){\n\n            var id = features[0].properties.ISO2;\n            var countryfiltered = data.equity_data.filter(d=>d.country_iso2 == id);\n            var countryName;\n            if(countryfiltered[0]) countryName = countryfiltered[0].country_name;\n    \n            mapTooltip.select('#map_tooltip_name tspan').text(countryName);\n    \n            if(options.map_toggle=='cases'){\n                var country = data.country.filter(d=>d[1].country_code == id)[0];\n                if((!country)||(country.length==0)) return false;\n                mapTooltip.select('#map_tooltip_val tspan').text(addCommas(country[1].cumulative_cases)+' cases');\n            }\n    \n            if(options.map_toggle=='deaths'){\n                var country = data.country.filter(d=>d[1].country_code == id)[0];\n                if((!country)||(country.length==0)) return false;\n                mapTooltip.select('#map_tooltip_val tspan').text(addCommas(country[1].cumulative_deaths)+' deaths');\n            }\n    \n            if(options.map_toggle=='bi-weekly-change'){\n                var country = data.country.filter(d=>d[1].country_code == id)[0];\n                if((!country)||(country.length==0)) return false;\n                var val = ((country[1].percent_change)*100).toFixed(1);\n                var str = '';\n                if(val>=0){\n                    str = '% increase';\n                } else {\n                    str = '% decrease';\n                }\n                mapTooltip.select('#map_tooltip_val tspan').text(Math.abs(val)+str);\n            }\n    \n            if(options.map_toggle=='percent-fully-vaccinated'){\n                var country = data.vGroup.filter(d=>d[1][0].country_code == id);\n                if((!country)||(country.length==0)) return false;\n                if((!country[0][1])) return false;\n                country = country[0][1];\n                mapTooltip.select('#map_tooltip_val tspan').text(parseFloat(country[0].people_fully_vaccinated_per_hundred).toFixed(1)+'% fully vaccinated');\n            }\n    \n            if(options.map_toggle=='percent-vaccine-acceptance'){\n                var country = data.vGroup.filter(d=>d[1][0].country_code == id);\n                if((!country)||(country.length==0)) return false;\n                if((!country[0][1])) return false;\n                country = country[0][1];\n                mapTooltip.select('#map_tooltip_val tspan').text(parseFloat(country[0].vaccine_acceptance_percent).toFixed(1)+'% vaccine acceptance');\n            }\n    \n            d3.select('#map_tooltip_bg').attr('width', 0)\n            var bbox = mapTooltip.node().getBBox();\n            d3.select('#map_tooltip_bg').attr('width', (parseFloat(bbox.width)+5))\n            var scale = window.innerWidth/1329;\n            mapTooltip\n            .attr('display', 'inline')\n            .attr('transform', 'translate('+(e.point.x+20)+','+e.point.y+')scale('+scale+')');\n            var heightOffset = mapTooltip.node().getBBox();\n            // mapTooltip.attr('transform', 'translate('+(project(([d.lng, d.lat])).x+3)+','+(project(([d.lng, d.lat])).y+2-heightOffset.height/2)+')scale('+scale+')');\n        } else {\n            mapTooltip.attr('display', 'none')\n        }\n    })\n\n    map.on('load', function (e) {\n\n        map.setPaintProperty('countries', 'fill-opacity-transition', {duration: 0, delay: 0});\n\n        updateMap(data, options) ;\n\n    });\n\n}\n\nexport function updateMap(data, options) {\n   \n    var duration = 800;\n    var delay = 10;\n\n    map.setLayoutProperty(\n        'countries',\n        'visibility',\n        'none'\n    );\n\n    if(options.map_toggle == 'bi-weekly-change'){\n        \n        var maxIncrease = d3.max(data.country, function(d,i){\n            return d[1].percent_change;\n        })\n\n        var maxDecrease = d3.min(data.country, function(d,i){\n            return d[1].percent_change;\n        })\n\n        // var rScale = d3.scalePow().exponent(0.5)\n        // .domain([-1, 0, 1])\n        // .range([maxSize, 0, maxSize])\n        // .clamp(true);\n\n        // d3.selectAll('.country-map').transition('c').duration(duration/1.7).attr('r',0);\n\n        // data.country.forEach(function(d,i){\n        //     d3.select('#country-map-'+d[0])\n        //     .transition('c').duration(duration).delay(delay)\n        //     .attr('r', rScale(d[1].percent_change))\n        //     .style('stroke', function(){\n        //         // if(d[1].percent_change>1){ return '#E02225'} else { return '#1F558C'}\n        //         return '#FFF'\n        //     }).style('fill', function(){\n        //         if(d[1].percent_change>0){ return colors.red } else { return colors.blue}\n        //     })\n        // })\n\n        var colorScale = d3.scaleLinear()\n        // .domain([-1, 0, 1])\n        .domain([maxDecrease, 0, maxIncrease])\n        .range([colors.blue, colors.lightgrey, colors.red])\n        .clamp(true);\n\n        var fillColorArray = ['case']\n        data.country.forEach(function(d,i){\n            fillColorArray.push(['==', ['get', \"ISO2\"], d[0]]);\n            fillColorArray.push(colorScale(d[1].percent_change));\n        });\n\n        if(fillColorArray.length>1){\n            fillColorArray.push(colors.darkgrey)\n            map.setPaintProperty(\n                'countries', \n                'fill-color', fillColorArray\n            );\n        }\n        \n    }\n\n    if(options.map_toggle == 'cases'){\n        var maxValue = d3.max(data.country, function(d,i){\n            return d[1].cumulative_cases;\n        })\n\n        // var rScale = d3.scalePow().exponent(0.5)\n        // .domain([0, maxValue])\n        // .range([0, maxSize]);\n\n        // d3.selectAll('.country-map').transition('c').duration(duration/1.7).attr('r',0);\n\n        // data.country.forEach(function(d,i){\n        //     d3.select('#country-map-'+d[0])\n        //     .transition('c').duration(duration).delay(delay)\n        //     .attr('r', rScale(d[1].cumulative_cases))\n        //     .style('fill', colors.red)\n        //     .style('stroke', '#FFF');\n        // })\n\n        var colorScale = d3.scaleLinear()\n        .domain([0, maxValue])\n        .range([colors.lightgrey, colors.red]);\n\n        var fillColorArray = ['case']\n        data.country.forEach(function(d,i){\n            fillColorArray.push(['==', ['get', \"ISO2\"], d[0]]);\n            fillColorArray.push(colorScale(d[1].cumulative_cases));\n        });\n\n        if(fillColorArray.length>1){\n            fillColorArray.push(colors.darkgrey)\n            map.setPaintProperty(\n                'countries', \n                'fill-color', fillColorArray\n            );\n        }\n\n    }\n    \n    if(options.map_toggle == 'deaths'){\n        var maxValue = d3.max(data.country, function(d,i){\n            return d[1].cumulative_deaths;\n        })\n\n        // var rScale = d3.scalePow().exponent(0.5)\n        // .domain([0, maxValue])\n        // .range([0, maxSize]);\n\n        // d3.selectAll('.country-map').transition('c').duration(duration/1.7).attr('r',0);\n\n        // data.country.forEach(function(d,i){\n        //     d3.select('#country-map-'+d[0])\n        //     .transition('c').duration(duration).delay(delay)\n        //     .attr('r', rScale(d[1].cumulative_deaths))\n        //     .style('fill', colors.red)\n        //     .style('stroke', '#FFF');\n        // })\n\n        var colorScale = d3.scaleLinear()\n        .domain([0, maxValue])\n        .range([colors.lightgrey, colors.red]);\n\n        var fillColorArray = ['case']\n        data.country.forEach(function(d,i){\n            fillColorArray.push(['==', ['get', \"ISO2\"], d[0]]);\n            fillColorArray.push(colorScale(d[1].cumulative_deaths));\n        });\n\n        if(fillColorArray.length>1){\n            fillColorArray.push(colors.darkgrey)\n            map.setPaintProperty(\n                'countries', \n                'fill-color', fillColorArray\n            );\n        }\n    }\n\n    if(options.map_toggle == 'percent-fully-vaccinated'){\n        var maxValue = d3.max(data.vGroup, function(d,i){\n            return parseFloat(d[1][0].people_fully_vaccinated_per_hundred)/100;\n        })\n\n        // var rScale = d3.scalePow().exponent(0.55)\n        // .domain([0, 1])\n        // .range([1, maxSize])\n        // .clamp(true);\n\n        // d3.selectAll('.country-map').transition('c').duration(duration/1.7).attr('r',0);\n\n        // data.vGroup.forEach(function(d,i){\n        //     var peoplevaccinated = parseFloat(d[1][0].people_fully_vaccinated_per_hundred)/100;\n        //     if(isNaN(peoplevaccinated)) peoplevaccinated = 0;\n        //     d3.select('#country-map-'+d[1][0].country_code)\n        //     .transition('c').duration(duration).delay(delay)\n        //     .attr('r', rScale(peoplevaccinated))\n        //     .style('stroke', '#FFF')\n        //     .style('fill', function(){\n        //         return colors.blue;\n        //     })\n        // })\n\n        var colorScale = d3.scaleLinear()\n        .domain([0, maxValue])\n        .range([colors.lightgrey, colors.blue]);\n\n        var fillColorArray = ['case']\n        data.vGroup.forEach(function(d,i){\n            var peoplevaccinated = parseFloat(d[1][0].people_fully_vaccinated_per_hundred)/100;\n            if(isNaN(peoplevaccinated)) peoplevaccinated = 0;\n            if(peoplevaccinated>0){\n                if(d[1][0].country_code) fillColorArray.push(['==', ['get', \"ISO2\"], d[1][0].country_code]);\n                if(d[1][0].country_code) fillColorArray.push(colorScale(peoplevaccinated));\n            }\n        });\n\n        console.log(fillColorArray);\n\n        if(fillColorArray.length>1){\n            fillColorArray.push(colors.darkgrey)\n            map.setPaintProperty(\n                'countries', \n                'fill-color', fillColorArray\n            );\n        } else {\n            map.setPaintProperty(\n                'countries', \n                'fill-color',\n                colors.darkgrey\n            );\n        }\n        \n    }\n\n    if(options.map_toggle == 'percent-vaccine-acceptance'){\n        var maxValue = d3.max(data.vGroup, function(d,i){\n            return parseFloat(d[1][0].vaccine_acceptance_percent)/100;\n        })\n\n        \n        // var rScale = d3.scalePow().exponent(1)\n        // .domain([0, 1])\n        // .range([1, maxSize*.7])\n        // // .clamp(true);\n\n        // d3.selectAll('.country-map').transition('c').duration(duration/1.7).attr('r',0);\n\n        // data.vGroup.forEach(function(d,i){\n        //     var vaccine_acceptance_percent = parseFloat(d[1][0].vaccine_acceptance_percent/100);\n            \n        //     if(isNaN(vaccine_acceptance_percent)) vaccine_acceptance_percent = 0;\n\n        //     d3.select('#country-map-'+d[1][0].country_code)\n        //     .transition('c').duration(duration).delay(delay)\n        //     .attr('r', rScale(vaccine_acceptance_percent))\n        //     .style('stroke', '#FFF')\n        //     .style('fill', function(){\n        //         return colors.blue;\n        //     })\n        // })\n\n        var colorScale = d3.scaleLinear()\n        .domain([0, maxValue])\n        .range([colors.lightgrey, colors.blue]);\n\n        var fillColorArray = ['case']\n        data.vGroup.forEach(function(d,i){\n            var vaccine_acceptance_percent = parseFloat(d[1][0].vaccine_acceptance_percent)/100;\n            if(isNaN(vaccine_acceptance_percent)) vaccine_acceptance_percent = 0;\n            if(vaccine_acceptance_percent>0){\n                if(d[1][0].country_code) fillColorArray.push(['==', ['get', \"ISO2\"], d[1][0].country_code]);\n                if(d[1][0].country_code) fillColorArray.push(colorScale(vaccine_acceptance_percent));\n            }\n        });\n\n        console.log(fillColorArray);\n\n        if(fillColorArray.length>1){\n            fillColorArray.push(colors.darkgrey)\n            map.setPaintProperty(\n                'countries', \n                'fill-color', fillColorArray\n            );\n        } else {\n            map.setPaintProperty(\n                'countries', \n                'fill-color',\n                colors.darkgrey\n            );\n        }\n\n\n    }\n\n    mapTooltip.attr('display', 'none')  \n\n    map.on('mousemove', function (e) {\n        var features = map.queryRenderedFeatures(e.point);\n         \n        var displayProperties = [\n        'type',\n        'properties',\n        'id',\n        'layer',\n        'source',\n        'sourceLayer',\n        'state'\n        ];\n         \n        if((features.length==1)&&(features[0].layer.id=='countries')){\n\n            var id = features[0].properties.ISO2;\n            var countryfiltered = data.equity_data.filter(d=>d.country_iso2 == id);\n            var countryName;\n            if(countryfiltered[0]) countryName = countryfiltered[0].country_name;\n    \n            mapTooltip.select('#map_tooltip_name tspan').text(countryName);\n    \n            if(options.map_toggle=='cases'){\n                var country = data.country.filter(d=>d[1].country_code == id)[0];\n                if((!country)||(country.length==0)) return false;\n                mapTooltip.select('#map_tooltip_val tspan').text(addCommas(country[1].cumulative_cases)+' cases');\n            }\n    \n            if(options.map_toggle=='deaths'){\n                var country = data.country.filter(d=>d[1].country_code == id)[0];\n                if((!country)||(country.length==0)) return false;\n                mapTooltip.select('#map_tooltip_val tspan').text(addCommas(country[1].cumulative_deaths)+' deaths');\n            }\n    \n            if(options.map_toggle=='bi-weekly-change'){\n                var country = data.country.filter(d=>d[1].country_code == id)[0];\n                if((!country)||(country.length==0)) return false;\n                var val = ((country[1].percent_change)*100).toFixed(1);\n                var str = '';\n                if(val>=0){\n                    str = '% increase';\n                } else {\n                    str = '% decrease';\n                }\n                mapTooltip.select('#map_tooltip_val tspan').text(Math.abs(val)+str);\n            }\n    \n            if(options.map_toggle=='percent-fully-vaccinated'){\n                var country = data.vGroup.filter(d=>d[1][0].country_code == id);\n                if((!country)||(country.length==0)) return false;\n                if((!country[0][1])) return false;\n                country = country[0][1];\n                mapTooltip.select('#map_tooltip_val tspan').text(parseFloat(country[0].people_fully_vaccinated_per_hundred).toFixed(1)+'% fully vaccinated');\n            }\n    \n            if(options.map_toggle=='percent-vaccine-acceptance'){\n                var country = data.vGroup.filter(d=>d[1][0].country_code == id);\n                if((!country)||(country.length==0)) return false;\n                if((!country[0][1])) return false;\n                country = country[0][1];\n                mapTooltip.select('#map_tooltip_val tspan').text(parseFloat(country[0].vaccine_acceptance_percent).toFixed(1)+'% vaccine acceptance');\n            }\n    \n            var str = mapTooltip.select('#map_tooltip_val tspan').text();\n            if(str.includes('NaN')) mapTooltip.attr('display', 'none')\n\n            d3.select('#map_tooltip_bg').attr('width', 0)\n            var bbox = mapTooltip.node().getBBox();\n            d3.select('#map_tooltip_bg').attr('width', (parseFloat(bbox.width)+5))\n            var scale = window.innerWidth/1329;\n            mapTooltip\n            .attr('display', 'inline')\n            .attr('transform', 'translate('+(e.point.x+20)+','+e.point.y+')scale('+scale+')');\n            var heightOffset = mapTooltip.node().getBBox();\n            // mapTooltip.attr('transform', 'translate('+(project(([d.lng, d.lat])).x+3)+','+(project(([d.lng, d.lat])).y+2-heightOffset.height/2)+')scale('+scale+')');\n        } else {\n            mapTooltip.attr('display', 'none')\n        }\n    })\n\n\n    // function render() {\n    //     dots\n    //       .attr(\"cx\", function(d) {\n    //         return project(([d.lng, d.lat])).x;\n    //       })\n    //       .attr(\"cy\", function(d) {\n    //         return project(([d.lng, d.lat])).y;\n    //       });\n    //   }\n\n    // map.on(\"viewreset\", render);\n    // map.on(\"move\", render);\n    // map.on(\"moveend\", render);\n    // render(); // Call once to render\n\n    // tooltips\n\n    // var mapTooltip = d3.select('#map_tooltip').attr('opacity', 1).attr('transform', 'translate(0,0)').attr('display', 'none');\n\n    // d3.selectAll('.country-map').on('mousemove', function(event, d){\n\n    //     var id = d3.select(this).attr('id').substr(12,2);\n    //     var countryfiltered = data.equity_data.filter(d=>d.country_iso2 == id);\n    //     var countryName;\n    //     if(countryfiltered[0]) countryName = countryfiltered[0].country_name;\n\n    //     mapTooltip.select('#map_tooltip_name tspan').text(countryName);\n\n    //     if(options.map_toggle=='cases'){\n    //         var country = data.country.filter(d=>d[1].country_code == id)[0];\n    //         if((!country)||(country.length==0)) return false;\n    //         mapTooltip.select('#map_tooltip_val tspan').text(addCommas(country[1].cumulative_cases)+' cases');\n    //     }\n\n    //     if(options.map_toggle=='deaths'){\n    //         var country = data.country.filter(d=>d[1].country_code == id)[0];\n    //         if((!country)||(country.length==0)) return false;\n    //         mapTooltip.select('#map_tooltip_val tspan').text(addCommas(country[1].cumulative_deaths)+' deaths');\n    //     }\n\n    //     if(options.map_toggle=='bi-weekly-change'){\n    //         var country = data.country.filter(d=>d[1].country_code == id)[0];\n    //         if((!country)||(country.length==0)) return false;\n    //         var val = ((country[1].percent_change)*100).toFixed(1);\n    //         var str = '';\n    //         if(val>=0){\n    //             str = '% increase';\n    //         } else {\n    //             str = '% decrease';\n    //         }\n    //         mapTooltip.select('#map_tooltip_val tspan').text(Math.abs(val)+str);\n    //     }\n\n    //     if(options.map_toggle=='percent-fully-vaccinated'){\n    //         var country = data.vGroup.filter(d=>d[1][0].country_code == id)[0][1];\n    //         if((!country)||(country.length==0)) return false;\n    //         mapTooltip.select('#map_tooltip_val tspan').text(parseFloat(country[0].people_fully_vaccinated_per_hundred).toFixed(1)+'% fully vaccinated');\n    //     }\n\n    //     if(options.map_toggle=='percent-vaccine-acceptance'){\n    //         var country = data.vGroup.filter(d=>d[1][0].country_code == id)[0][1];\n    //         if((!country)||(country.length==0)) return false;\n    //         mapTooltip.select('#map_tooltip_val tspan').text(parseFloat(country[0].vaccine_acceptance_percent).toFixed(1)+'% vaccine acceptance');\n    //     }\n\n\n    //     d3.select('#map_tooltip_bg').attr('width', 0)\n\n    //     var bbox = mapTooltip.node().getBBox();\n    //     d3.select('#map_tooltip_bg').attr('width', (parseFloat(bbox.width)+2))\n    //     var scale = window.innerWidth/1329;\n    //     mapTooltip\n    //     .attr('display', 'inline')\n    //     .attr('transform', 'translate('+project(([d.lng, d.lat])).x+','+project(([d.lng, d.lat])).y+')scale('+scale+')');\n\n    //     var heightOffset = mapTooltip.node().getBBox();\n    //     mapTooltip.attr('transform', 'translate('+(project(([d.lng, d.lat])).x+3)+','+(project(([d.lng, d.lat])).y+2-heightOffset.height/2)+')scale('+scale+')');\n\n    // }).on('mouseout', function(event){\n    //     if(event.toElement=='tspan') return false;\n    //     mapTooltip.attr('display', 'none');\n    // })\n\n    map.setLayoutProperty(\n        'countries',\n        'visibility',\n        'visible'\n    );\n\n}\n\n// function project(d) {\n//     return map.project(new mapboxgl.LngLat(d[0], d[1]));\n// }\n\nexport default createMap;\n"]},"metadata":{},"sourceType":"module"}