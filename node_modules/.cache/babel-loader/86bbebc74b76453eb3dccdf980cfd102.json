{"ast":null,"code":"// import * as d3 from \"d3\";\nimport { min, max, group, flatGroup } from \"d3\";\nimport moment from 'moment';\nimport clone from 'just-clone';\nexport function ParseData(data, options) {\n  console.log('ParseData');\n  console.log(options); // max dates\n\n  let maxDate = moment(new Date(max(data.who_data, function (d) {\n    return d.Date_reported;\n  })));\n  let minDateVaccines = new Date(min(data.vaccines_data, function (d) {\n    return d.date;\n  }));\n  let maxDateVaccines = new Date(max(data.vaccines_data, function (d) {\n    return d.date;\n  }));\n\n  if (maxDateVaccines > maxDate) {\n    maxDate = maxDateVaccines;\n  }\n\n  options.maxDate = maxDate; // options.minDate = minDate;\n  // parse who data\n\n  let dayTotal = -1;\n  let dayCheck = 0;\n  let weekTotal = -1;\n  let weekCheck = -1;\n  let monthTotal = 0;\n  let monthCheck = 0;\n  data.who_data.sort(function (a, b) {\n    return new Date(a.Date_reported) - new Date(b.Date_reported);\n  });\n  var countryCodes = [];\n  data.who_data.forEach(function (d, i) {\n    d.date = new Date(d.Date_reported);\n    d.dayOfYear = moment(d.date).dayOfYear();\n    if (d.dayOfYear !== dayCheck) dayTotal++;\n    d.dayTotal = dayTotal;\n    d.week = moment(d.date).isoWeek();\n    if (d.week !== weekCheck) weekTotal++;\n    d.weekTotal = weekTotal;\n    d.month = d.date.getMonth();\n    if (d.month !== monthCheck) monthTotal++;\n    d.monthTotal = monthTotal;\n    d.year = d.date.getFullYear();\n    d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n    d.month_start = new Date(moment(d.date).startOf('month').toDate());\n    d.new_cases = parseInt(d.New_cases);\n    d.new_deaths = parseInt(d.New_deaths);\n    d.cumulative_deaths = parseInt(d.Cumulative_deaths);\n    d.cumulative_cases = parseInt(d.Cumulative_cases);\n    d.country_code = d.Country_code;\n    d.country_name = null;\n    data.equity_data.forEach(function (dd, ii) {\n      if (dd.country_iso2 === d.Country_code) {\n        d.ifrc_region = dd.ifrc_region;\n        d.country_name = dd.country_name;\n      }\n    });\n    if (d.ifrc_region == undefined) d.ifrc_region = 'OTH';\n    if (!countryCodes.includes(d.country_code)) countryCodes.push(d.country_code);\n    delete d.Date_reported;\n    delete d.Country;\n    delete d.New_cases;\n    delete d.New_deaths;\n    delete d.Country_code;\n    delete d.Cumulative_deaths;\n    delete d.Cumulative_cases; // delete d.Country_code;\n\n    delete d.WHO_region; // delete d.Country;\n\n    dayCheck = d.dayOfYear;\n    weekCheck = d.week;\n    monthCheck = d.month;\n  }); // parse vaccine cumulative data\n\n  dayTotal = -1;\n  dayCheck = 0;\n  weekTotal = -1;\n  weekCheck = -1;\n  monthTotal = 0;\n  monthCheck = 0; // filter out vaccine data on only include records with ISO3 country codes\n\n  data.vaccines_data_cumulative = data.vaccines_data.filter(function (d, i) {\n    return d.iso_code.length === 3 && d.total_vaccinations > 0;\n  }); // fill out missing vaccinations date records (extend cumulative)\n\n  var vGroup = flatGroup(data.vaccines_data_cumulative, d => d.iso_code);\n  var newDates = [];\n  var hasDays = [];\n  var initDate = 0;\n  var lastRecord = {};\n  var vDataFlat = [];\n  vGroup.forEach(function (d, i) {\n    var minDt = new Date(minDateVaccines);\n    var maxDt = new Date(maxDateVaccines);\n    var hasDays = [];\n    var newDays = [];\n    var newDays = [];\n    data.equity_data.forEach(function (dd, ii) {\n      if (dd.country_iso3 === vGroup[i][0]) {\n        d.ifrc_region = dd.ifrc_region;\n        d.country_name = dd.country_name;\n        d.country_code = dd.country_iso2;\n      }\n    });\n    vGroup[i][1].forEach(function (dd, ii) {\n      hasDays.push(new Date(dd.date).getTime());\n    }); // if((i<1)||(d[0] =='BFA')||(d[0] =='RWA')){\n\n    vGroup[i][1].forEach(function (dd, ii) {\n      dd.total_vaccinations = parseInt(dd.total_vaccinations);\n\n      for (var day = minDt; day <= maxDt; day.setDate(day.getDate() + 1)) {\n        var newDay = day.getTime();\n\n        if (!hasDays.includes(newDay)) {\n          newDays.push({\n            date: new Date(day),\n            total_vaccinations: null\n          });\n        }\n      }\n    });\n    vGroup[i][1].push(...newDays);\n    vGroup[i][1].sort(function (a, b) {\n      return new Date(a.date) - new Date(b.date);\n    });\n    var totalVac = 0;\n    vGroup[i][1].forEach(function (dd, ii) {\n      if (dd.total_vaccinations) {\n        totalVac = dd.total_vaccinations;\n      } else {\n        dd.total_vaccinations = totalVac;\n      }\n\n      vDataFlat.push({\n        date: new Date(dd.date),\n        iso_code: vGroup[i][0],\n        ifrc_region: vGroup[i].ifrc_region,\n        country_name: vGroup[i].country_name,\n        country_code: vGroup[i].country_code,\n        total_vaccinations: totalVac\n      });\n    });\n  });\n  data.vaccines_data_cumulative = vDataFlat;\n  data.vaccines_data_cumulative.sort(function (a, b) {\n    return new Date(a.date) - new Date(b.date);\n  });\n  data.vaccines_data_cumulative.forEach(function (d, i) {\n    if (d.ifrc_region == undefined) d.ifrc_region = 'OTH';\n    d.dayOfYear = moment(d.date).dayOfYear();\n    if (d.dayOfYear !== dayCheck) dayTotal++;\n    d.dayTotal = dayTotal;\n    d.week = moment(d.date).isoWeek();\n    if (d.week !== weekCheck) weekTotal++;\n    d.weekTotal = weekTotal;\n    d.month = d.date.getMonth();\n    if (d.month !== monthCheck) monthTotal++;\n    d.monthTotal = monthTotal;\n    d.year = d.date.getFullYear();\n    dayCheck = d.dayOfYear;\n    weekCheck = d.week;\n    monthCheck = d.month;\n    d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n    d.month_start = new Date(moment(d.date).startOf('month').toDate());\n  }); // parse vaccine daily data\n\n  dayTotal = -1;\n  dayCheck = 0;\n  weekTotal = -1;\n  weekCheck = -1;\n  monthTotal = 0;\n  monthCheck = 0; // filter out vaccine data on only include records with ISO3 country codes\n\n  data.vaccines_data_daily = data.vaccines_data.filter(function (d, i) {\n    return d.iso_code.length === 3 && d.daily_vaccinations > 0;\n  }); // fill out missing vaccinations date records (extend cumulative)\n\n  var vGroup = flatGroup(data.vaccines_data_daily, d => d.iso_code);\n  var newDates = [];\n  var hasDays = [];\n  var initDate = 0;\n  var lastRecord = {};\n  var vDataFlat = [];\n  vGroup.forEach(function (d, i) {\n    var minDt = new Date(minDateVaccines);\n    var maxDt = new Date(maxDateVaccines);\n    var hasDays = [];\n    var newDays = [];\n    var newDays = [];\n    data.equity_data.forEach(function (dd, ii) {\n      if (dd.country_iso3 === vGroup[i][0]) {\n        d.ifrc_region = dd.ifrc_region;\n        d.country_name = dd.country_name;\n        d.country_code = dd.country_iso2;\n      }\n    });\n    vGroup[i][1].forEach(function (dd, ii) {\n      hasDays.push(new Date(dd.date).getTime());\n    }); // if((i<1)||(d[0] =='BFA')||(d[0] =='RWA')){\n\n    vGroup[i][1].forEach(function (dd, ii) {\n      dd.daily_vaccinations = parseInt(dd.daily_vaccinations);\n\n      for (var day = minDt; day <= maxDt; day.setDate(day.getDate() + 1)) {\n        var newDay = day.getTime();\n\n        if (!hasDays.includes(newDay)) {\n          newDays.push({\n            date: new Date(day),\n            daily_vaccinations: null\n          });\n        }\n      }\n    });\n    vGroup[i][1].push(...newDays);\n    vGroup[i][1].sort(function (a, b) {\n      return new Date(a.date) - new Date(b.date);\n    });\n    var daily_vaccinations = 0;\n    vGroup[i][1].forEach(function (dd, ii) {\n      if (dd.daily_vaccinations) {\n        daily_vaccinations = dd.daily_vaccinations;\n      } else {\n        dd.daily_vaccinations = daily_vaccinations;\n      }\n\n      vDataFlat.push({\n        date: new Date(dd.date),\n        iso_code: vGroup[i][0],\n        ifrc_region: vGroup[i].ifrc_region,\n        country_name: vGroup[i].country_name,\n        country_code: vGroup[i].country_code,\n        daily_vaccinations: daily_vaccinations\n      });\n    });\n  });\n  data.vaccines_data_daily = vDataFlat;\n  data.vaccines_data_daily.sort(function (a, b) {\n    return new Date(a.date) - new Date(b.date);\n  });\n  data.vaccines_data_daily.forEach(function (d, i) {\n    if (d.ifrc_region == undefined) d.ifrc_region = 'OTH';\n    d.dayOfYear = moment(d.date).dayOfYear();\n    if (d.dayOfYear !== dayCheck) dayTotal++;\n    d.dayTotal = dayTotal;\n    d.week = moment(d.date).isoWeek();\n    if (d.week !== weekCheck) weekTotal++;\n    d.weekTotal = weekTotal;\n    d.month = d.date.getMonth();\n    if (d.month !== monthCheck) monthTotal++;\n    d.monthTotal = monthTotal;\n    d.year = d.date.getFullYear();\n    dayCheck = d.dayOfYear;\n    weekCheck = d.week;\n    monthCheck = d.month;\n    d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n    d.month_start = new Date(moment(d.date).startOf('month').toDate());\n  }); // parse equity data inform/hdi indexes\n\n  data.equity_data.forEach(function (d, i) {\n    if (d.hdi_category.match(/very high/i)) {\n      d.hdi_category = 'very-high';\n    } else if (d.hdi_category.match(/high/i)) {\n      d.hdi_category = 'high';\n    } else if (d.hdi_category.match(/medium/i)) {\n      d.hdi_category = 'medium';\n    } else if (d.hdi_category.match(/low/i)) {\n      d.hdi_category = 'low';\n    }\n\n    if (d.inform_severity.match(/very high/i)) {\n      d.inform_severity = 'very-high';\n    } else if (d.inform_severity.match(/high/i)) {\n      d.inform_severity = 'high';\n    } else if (d.inform_severity.match(/medium/i)) {\n      d.inform_severity = 'medium';\n    } else if (d.inform_severity.match(/low/i)) {\n      d.inform_severity = 'low';\n    } else if (d.inform_severity.match(/no/i)) {\n      d.inform_severity = 'no-score';\n    }\n  });\n  data.equity_data = data.equity_data.filter(function (d, i) {\n    return countryCodes.includes(d.country_iso2);\n  });\n  data.original = clone(data);\n  console.log(data);\n}\n_c = ParseData;\nexport default ParseData;\n\nvar _c;\n\n$RefreshReg$(_c, \"ParseData\");","map":{"version":3,"sources":["/Users/matthewsmawfield/www/ifrc-covid-dataviz/src/ParseData.js"],"names":["min","max","group","flatGroup","moment","clone","ParseData","data","options","console","log","maxDate","Date","who_data","d","Date_reported","minDateVaccines","vaccines_data","date","maxDateVaccines","dayTotal","dayCheck","weekTotal","weekCheck","monthTotal","monthCheck","sort","a","b","countryCodes","forEach","i","dayOfYear","week","isoWeek","month","getMonth","year","getFullYear","week_start","startOf","toDate","month_start","new_cases","parseInt","New_cases","new_deaths","New_deaths","cumulative_deaths","Cumulative_deaths","cumulative_cases","Cumulative_cases","country_code","Country_code","country_name","equity_data","dd","ii","country_iso2","ifrc_region","undefined","includes","push","Country","WHO_region","vaccines_data_cumulative","filter","iso_code","length","total_vaccinations","vGroup","newDates","hasDays","initDate","lastRecord","vDataFlat","minDt","maxDt","newDays","country_iso3","getTime","day","setDate","getDate","newDay","totalVac","vaccines_data_daily","daily_vaccinations","hdi_category","match","inform_severity","original"],"mappings":"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","sourcesContent":["// import * as d3 from \"d3\";\nimport {min,max,group,flatGroup} from \"d3\";\nimport moment from 'moment';\nimport clone from 'just-clone';\n\nexport function ParseData(data, options) {\n\n    console.log('ParseData');\n    console.log(options);\n        \n    // max dates\n    let maxDate = moment(new Date(max(data.who_data, function(d){\n        return d.Date_reported;\n    })));\n\n    let minDateVaccines = (new Date(min(data.vaccines_data, function(d){\n        return d.date;\n    })));\n\n\n    let maxDateVaccines = (new Date(max(data.vaccines_data, function(d){\n        return d.date;\n    })));\n\n    if(maxDateVaccines>maxDate) {\n        maxDate = maxDateVaccines;\n    }\n\n    options.maxDate = maxDate;\n    // options.minDate = minDate;\n\n    // parse who data\n\n    let dayTotal = -1;\n    let dayCheck = 0;\n\n    let weekTotal = -1;\n    let weekCheck = -1;\n\n    let monthTotal = 0;\n    let monthCheck = 0;\n\n    data.who_data.sort(function(a,b){\n        return new Date(a.Date_reported) - new Date(b.Date_reported);\n    });\n\n    var countryCodes = [];\n\n    data.who_data.forEach(function(d,i){\n        d.date = new Date(d.Date_reported);\n        d.dayOfYear =  moment(d.date).dayOfYear();\n        if(d.dayOfYear!==dayCheck) dayTotal++;\n        d.dayTotal = dayTotal;\n\n        d.week = moment(d.date).isoWeek();\n        if(d.week!==weekCheck) weekTotal++;\n        d.weekTotal = weekTotal;\n        d.month = d.date.getMonth();\n        if(d.month!==monthCheck) monthTotal++;\n        d.monthTotal = monthTotal;\n        d.year = d.date.getFullYear();\n\n        d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n        d.month_start = new Date(moment(d.date).startOf('month').toDate());\n\n        d.new_cases = parseInt(d.New_cases);\n        d.new_deaths = parseInt(d.New_deaths);\n        d.cumulative_deaths = parseInt(d.Cumulative_deaths);\n        d.cumulative_cases = parseInt(d.Cumulative_cases);\n        d.country_code = d.Country_code;\n        d.country_name = null;\n        data.equity_data.forEach(function(dd,ii){\n            if(dd.country_iso2===d.Country_code){\n                d.ifrc_region = dd.ifrc_region;\n                d.country_name = dd.country_name;\n            }\n        })\n        if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n        if(!countryCodes.includes(d.country_code)) countryCodes.push(d.country_code);\n\n        delete d.Date_reported;\n        delete d.Country;\n        delete d.New_cases;\n        delete d.New_deaths;\n        delete d.Country_code;\n        delete d.Cumulative_deaths;\n        delete d.Cumulative_cases;\n        // delete d.Country_code;\n        delete d.WHO_region;\n        // delete d.Country;\n        dayCheck = d.dayOfYear;\n        weekCheck = d.week;\n        monthCheck = d.month;\n    })\n\n    // parse vaccine cumulative data\n\n    dayTotal = -1;\n    dayCheck = 0;\n\n    weekTotal = -1;\n    weekCheck = -1;\n    monthTotal = 0;\n    monthCheck = 0;\n\n    // filter out vaccine data on only include records with ISO3 country codes\n    data.vaccines_data_cumulative = data.vaccines_data.filter(function(d,i){\n        return d.iso_code.length===3 && d.total_vaccinations > 0;\n    })\n\n    // fill out missing vaccinations date records (extend cumulative)\n    var vGroup = flatGroup(data.vaccines_data_cumulative, d => d.iso_code);\n\n    var newDates = [];\n    var hasDays = [];\n    var initDate = 0;\n    var lastRecord = {};\n    var vDataFlat = [];\n    vGroup.forEach(function(d,i){\n\n        var minDt = new Date(minDateVaccines);\n        var maxDt = new Date(maxDateVaccines);\n        var hasDays = [];\n        var newDays = [];\n        var newDays = [];\n\n        data.equity_data.forEach(function(dd,ii){\n            if(dd.country_iso3===vGroup[i][0]){\n                d.ifrc_region = dd.ifrc_region;\n                d.country_name = dd.country_name;\n                d.country_code = dd.country_iso2;\n                \n            }\n        })\n\n        vGroup[i][1].forEach(function(dd,ii){\n            hasDays.push(new Date(dd.date).getTime());\n        })\n\n        // if((i<1)||(d[0] =='BFA')||(d[0] =='RWA')){\n        vGroup[i][1].forEach(function(dd,ii){\n            dd.total_vaccinations = parseInt(dd.total_vaccinations);\n            for (var day = minDt;day <= maxDt; day.setDate(day.getDate() + 1)) {\n                var newDay = day.getTime();\n                if(!hasDays.includes(newDay)){\n                    newDays.push({date: new Date(day), total_vaccinations: null})\n                }\n            }\n        });\n\n        vGroup[i][1].push(...newDays);\n\n        vGroup[i][1].sort(function(a,b){\n            return new Date(a.date) - new Date(b.date);\n        });\n\n        var totalVac = 0;\n\n        vGroup[i][1].forEach(function(dd,ii){\n            if(dd.total_vaccinations){\n                totalVac = dd.total_vaccinations;\n            } else {\n                dd.total_vaccinations = totalVac;\n            }\n            vDataFlat.push({\n                date: new Date(dd.date),\n                iso_code: vGroup[i][0], \n                ifrc_region: vGroup[i].ifrc_region,\n                country_name: vGroup[i].country_name,\n                country_code: vGroup[i].country_code, \n                total_vaccinations: totalVac \n            })\n        })\n    });\n\n    data.vaccines_data_cumulative = vDataFlat;\n\n    data.vaccines_data_cumulative.sort(function(a,b){\n        return new Date(a.date) - new Date(b.date);\n    });\n\n    data.vaccines_data_cumulative.forEach(function(d,i){\n        if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n        d.dayOfYear =  moment(d.date).dayOfYear();\n        if(d.dayOfYear!==dayCheck) dayTotal++;\n        d.dayTotal = dayTotal;\n        d.week = moment(d.date).isoWeek();\n        if(d.week!==weekCheck) weekTotal++;\n        d.weekTotal = weekTotal;\n        d.month = d.date.getMonth();\n        if(d.month!==monthCheck) monthTotal++;\n        d.monthTotal = monthTotal;\n        d.year = d.date.getFullYear();\n        dayCheck = d.dayOfYear;\n        weekCheck = d.week;\n        monthCheck = d.month;\n        d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n        d.month_start = new Date(moment(d.date).startOf('month').toDate());\n    })\n\n    // parse vaccine daily data\n\n    dayTotal = -1;\n    dayCheck = 0;\n\n    weekTotal = -1;\n    weekCheck = -1;\n    monthTotal = 0;\n    monthCheck = 0;\n\n    // filter out vaccine data on only include records with ISO3 country codes\n    data.vaccines_data_daily = data.vaccines_data.filter(function(d,i){\n        return d.iso_code.length===3 && d.daily_vaccinations > 0;\n    })\n\n    // fill out missing vaccinations date records (extend cumulative)\n    var vGroup = flatGroup(data.vaccines_data_daily, d => d.iso_code);\n\n    var newDates = [];\n    var hasDays = [];\n    var initDate = 0;\n    var lastRecord = {};\n    var vDataFlat = [];\n    vGroup.forEach(function(d,i){\n\n        var minDt = new Date(minDateVaccines);\n        var maxDt = new Date(maxDateVaccines);\n        var hasDays = [];\n        var newDays = [];\n        var newDays = [];\n\n        data.equity_data.forEach(function(dd,ii){\n            if(dd.country_iso3===vGroup[i][0]){\n                d.ifrc_region = dd.ifrc_region;\n                d.country_name = dd.country_name;\n                d.country_code = dd.country_iso2;\n            }\n        })\n\n        vGroup[i][1].forEach(function(dd,ii){\n            hasDays.push(new Date(dd.date).getTime());\n        })\n\n        // if((i<1)||(d[0] =='BFA')||(d[0] =='RWA')){\n        vGroup[i][1].forEach(function(dd,ii){\n            dd.daily_vaccinations = parseInt(dd.daily_vaccinations);\n            for (var day = minDt;day <= maxDt; day.setDate(day.getDate() + 1)) {\n                var newDay = day.getTime();\n                if(!hasDays.includes(newDay)){\n                    newDays.push({date: new Date(day), daily_vaccinations: null})\n                }\n            }\n        });\n\n        vGroup[i][1].push(...newDays);\n\n        vGroup[i][1].sort(function(a,b){\n            return new Date(a.date) - new Date(b.date);\n        });\n\n        var daily_vaccinations = 0;\n\n        vGroup[i][1].forEach(function(dd,ii){\n            if(dd.daily_vaccinations){\n                daily_vaccinations = dd.daily_vaccinations;\n            } else {\n                dd.daily_vaccinations = daily_vaccinations;\n            }\n            vDataFlat.push({\n                date: new Date(dd.date),\n                iso_code: vGroup[i][0], \n                ifrc_region: vGroup[i].ifrc_region,\n                country_name: vGroup[i].country_name,\n                country_code: vGroup[i].country_code, \n                daily_vaccinations: daily_vaccinations \n            })\n        })\n    });\n\n    data.vaccines_data_daily = vDataFlat;\n\n    data.vaccines_data_daily.sort(function(a,b){\n        return new Date(a.date) - new Date(b.date);\n    });\n\n    data.vaccines_data_daily.forEach(function(d,i){\n        if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n        d.dayOfYear =  moment(d.date).dayOfYear();\n        if(d.dayOfYear!==dayCheck) dayTotal++;\n        d.dayTotal = dayTotal;\n        d.week = moment(d.date).isoWeek();\n        if(d.week!==weekCheck) weekTotal++;\n        d.weekTotal = weekTotal;\n        d.month = d.date.getMonth();\n        if(d.month!==monthCheck) monthTotal++;\n        d.monthTotal = monthTotal;\n        d.year = d.date.getFullYear();\n        dayCheck = d.dayOfYear;\n        weekCheck = d.week;\n        monthCheck = d.month;\n        d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n        d.month_start = new Date(moment(d.date).startOf('month').toDate());\n    });\n\n\n    // parse equity data inform/hdi indexes\n    data.equity_data.forEach(function(d,i){\n        if(d.hdi_category.match(/very high/i)){\n            d.hdi_category = 'very-high'\n        }\n        else if(d.hdi_category.match(/high/i)){\n            d.hdi_category = 'high'\n        }\n        else if(d.hdi_category.match(/medium/i)){\n            d.hdi_category = 'medium'\n        }\n        else if(d.hdi_category.match(/low/i)){\n            d.hdi_category = 'low'\n        }\n        if(d.inform_severity.match(/very high/i)){\n            d.inform_severity = 'very-high'\n        }\n        else if(d.inform_severity.match(/high/i)){\n            d.inform_severity = 'high'\n        }\n        else if(d.inform_severity.match(/medium/i)){\n            d.inform_severity = 'medium'\n        }\n        else if(d.inform_severity.match(/low/i)){\n            d.inform_severity = 'low'\n        }\n        else if(d.inform_severity.match(/no/i)){\n            d.inform_severity = 'no-score'\n        }\n    })\n\n    data.equity_data = data.equity_data.filter(function(d,i){\n       return countryCodes.includes(d.country_iso2)\n    })\n    data.original = clone(data);\n    console.log(data);\n}\n\nexport default ParseData;\n"]},"metadata":{},"sourceType":"module"}