{"ast":null,"code":"import * as d3 from \"d3\";\nimport moment from 'moment';\nexport function drawTimechart(data, options) {\n  const regions = ['AP', 'AM', 'AF', 'ME', 'EU', 'OTH']; // console.log('draw timechart');\n  // console.log(data);\n  // console.log(options);\n  // const groupedData = d3.group(data.who_data, d => d[options.timeline_frequency+'Total'], d => d.ifrc_region)\n\n  const groupedData = [];\n  data.who_data.forEach(function (d, i) {\n    groupedData[d[options.timeline_frequency + 'Total']] = groupedData[d[options.timeline_frequency + 'Total']] || {};\n    if (options.timeline_frequency == 'day') groupedData[d[options.timeline_frequency + 'Total']].date = d.date;\n    if (options.timeline_frequency == 'week') groupedData[d[options.timeline_frequency + 'Total']].date = moment(d.date).startOf('isoWeek').toDate();\n    if (options.timeline_frequency == 'month') groupedData[d[options.timeline_frequency + 'Total']].date = moment(d.date).startOf('month').toDate();\n    groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region] = groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region] || {\n      new_cases: 0,\n      new_deaths: 0,\n      cumulative_cases: 0,\n      cumulative_deaths: 0\n    };\n    groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].new_cases += d.new_cases;\n    groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].new_cases += d.new_cases;\n    groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].new_deaths += d.new_deaths;\n    groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].cumulative_cases += d.cumulative_cases;\n    groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].cumulative_deaths += d.cumulative_deaths;\n  }); // totals by date\n\n  groupedData.forEach(function (d, i) {\n    console.log(d);\n    d.total_new_cases = d.AF.new_cases + d.AP.new_cases + d.AM.new_cases + d.EU.new_cases + d.ME.new_cases + d.OTH.new_cases;\n    d.total_cumulative_cases = d.AF.cumulative_cases + d.AP.cumulative_cases + d.AM.cumulative_cases + d.EU.cumulative_cases + d.ME.cumulative_cases + d.OTH.cumulative_cases;\n    d.total_new_deaths = d.AF.new_deaths + d.AP.new_deaths + d.AM.new_deaths + d.EU.new_deaths + d.ME.new_deaths + d.OTH.new_deaths;\n    d.total_cumulative_deaths = d.AF.cumulative_deaths + d.AP.cumulative_deaths + d.AM.cumulative_deaths + d.EU.cumulative_deaths + d.ME.cumulative_deaths + d.OTH.cumulative_deaths;\n    d.region = [];\n    regions.forEach(function (dd, ii) {\n      d.region.push({\n        'region': dd,\n        'new_cases': d[dd].new_cases,\n        'new_deaths': d[dd].new_deaths,\n        'cumulative_cases': d[dd].cumulative_cases,\n        'cumulative_deaths': d[dd].cumulative_deaths\n      });\n      delete d[dd];\n    });\n  });\n  console.log(groupedData);\n  const numIntervals = d3.max(data.who_data, function (d, i) {\n    return d[options.timeline_frequency + 'Total'];\n  });\n  const maxCases = d3.max(groupedData, function (d, i) {\n    if (options.timeline_type == 'non-cumulative') return d.total_new_cases;\n    if (options.timeline_type == 'cumulative') return d.total_cumulative_cases;\n    if (options.timeline_type == 'stacked') return 100;\n  }); // define date range\n\n  const minDate = groupedData[0].date;\n  const maxDate = groupedData[numIntervals].date;\n  const svg = d3.select('#timechart_svg').attr('fill', 'blue');\n  const width = parseInt(svg.attr('width'));\n  const barWidth = width / numIntervals;\n  const barSpacing = 0.2;\n  const xScale = d3.scaleLinear().range([0, width]).domain([minDate, maxDate]);\n  const yScaleCases = d3.scaleLinear().range([140, 0]).domain([0, maxCases]);\n  console.log('minDate');\n  console.log(minDate);\n  console.log('maxDate');\n  console.log(maxDate); // CASES\n  // loop through groupedData and draw bars\n\n  const casesBarGroups = svg.selectAll('.cases_bar_group').data(groupedData).enter().append('g').attr('transform', function (d, i) {\n    return 'translate(' + xScale(d.date) + ')';\n  });\n  casesBarGroups.append('rect').attr('x', barWidth * barSpacing).attr('y', 0).attr('width', barWidth - barWidth * barSpacing * 2).attr('height', function (d, i) {\n    console.log(d);\n  }); // 10\n  // 0.1\n  // 1 - 8 - 1\n  // draw x-axis\n  // draw y-axis\n}\nexport function updateTimechart(data) {\n  console.log('update timechart');\n}\nexport default drawTimechart;","map":{"version":3,"sources":["/Users/matthewsmawfield/www/ifrc-covid-dataviz/src/Timechart.js"],"names":["d3","moment","drawTimechart","data","options","regions","groupedData","who_data","forEach","d","i","timeline_frequency","date","startOf","toDate","ifrc_region","new_cases","new_deaths","cumulative_cases","cumulative_deaths","console","log","total_new_cases","AF","AP","AM","EU","ME","OTH","total_cumulative_cases","total_new_deaths","total_cumulative_deaths","region","dd","ii","push","numIntervals","max","maxCases","timeline_type","minDate","maxDate","svg","select","attr","width","parseInt","barWidth","barSpacing","xScale","scaleLinear","range","domain","yScaleCases","casesBarGroups","selectAll","enter","append","updateTimechart"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\nimport moment from 'moment';\n\nexport function drawTimechart(data, options) {\n\n    const regions = ['AP', 'AM', 'AF', 'ME', 'EU', 'OTH'];\n    // console.log('draw timechart');\n    // console.log(data);\n    // console.log(options);\n    // const groupedData = d3.group(data.who_data, d => d[options.timeline_frequency+'Total'], d => d.ifrc_region)\n\n    const groupedData = [];\n\n    data.who_data.forEach(function(d,i){\n        groupedData[d[options.timeline_frequency+'Total']] = groupedData[d[options.timeline_frequency+'Total']] || {};\n        if(options.timeline_frequency=='day') groupedData[d[options.timeline_frequency+'Total']].date = d.date;\n        if(options.timeline_frequency=='week') groupedData[d[options.timeline_frequency+'Total']].date = moment(d.date).startOf('isoWeek').toDate();\n        if(options.timeline_frequency=='month') groupedData[d[options.timeline_frequency+'Total']].date = moment(d.date).startOf('month').toDate();\n        groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region] = groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region] || {new_cases: 0, new_deaths: 0, cumulative_cases: 0, cumulative_deaths: 0};\n        groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].new_cases += d.new_cases;\n        groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].new_cases += d.new_cases;\n        groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].new_deaths += d.new_deaths;\n        groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].cumulative_cases += d.cumulative_cases;\n        groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].cumulative_deaths += d.cumulative_deaths;\n    });\n\n\n    // totals by date\n    groupedData.forEach(function(d,i){\n        console.log(d);\n        d.total_new_cases = d.AF.new_cases + d.AP.new_cases + d.AM.new_cases + d.EU.new_cases + d.ME.new_cases + d.OTH.new_cases; \n        d.total_cumulative_cases = d.AF.cumulative_cases + d.AP.cumulative_cases + d.AM.cumulative_cases + d.EU.cumulative_cases + d.ME.cumulative_cases + d.OTH.cumulative_cases; \n        d.total_new_deaths = d.AF.new_deaths + d.AP.new_deaths + d.AM.new_deaths + d.EU.new_deaths + d.ME.new_deaths + d.OTH.new_deaths; \n        d.total_cumulative_deaths = d.AF.cumulative_deaths + d.AP.cumulative_deaths + d.AM.cumulative_deaths + d.EU.cumulative_deaths + d.ME.cumulative_deaths + d.OTH.cumulative_deaths; \n        d.region = [];\n        regions.forEach(function(dd,ii){\n            d.region.push({'region': dd, 'new_cases': d[dd].new_cases, 'new_deaths': d[dd].new_deaths, 'cumulative_cases': d[dd].cumulative_cases, 'cumulative_deaths': d[dd].cumulative_deaths});\n            delete d[dd];\n        })\n        \n\n    })\n\n    console.log(groupedData);\n\n    const numIntervals = d3.max(data.who_data, function(d,i){\n        return d[options.timeline_frequency+'Total'];\n    });\n\n    const maxCases = d3.max(groupedData, function(d,i){\n        if(options.timeline_type=='non-cumulative') return d.total_new_cases;\n        if(options.timeline_type=='cumulative') return d.total_cumulative_cases;\n        if(options.timeline_type=='stacked') return 100;\n    })\n\n    // define date range\n    const minDate = groupedData[0].date;\n    const maxDate = groupedData[numIntervals].date;\n\n    const svg = d3.select('#timechart_svg').attr('fill', 'blue');\n    const width = parseInt(svg.attr('width'));\n    const barWidth = width/numIntervals;\n    const barSpacing = 0.2;\n\n    const xScale = d3.scaleLinear()\n    .range([0,width])\n    .domain([minDate,maxDate]);\n\n    const yScaleCases = d3.scaleLinear()\n    .range([140,0])\n    .domain([0,maxCases]);\n\n    console.log('minDate');\n    console.log(minDate);\n    console.log('maxDate');\n    console.log(maxDate);\n\n    // CASES\n    // loop through groupedData and draw bars\n    const casesBarGroups = svg.selectAll('.cases_bar_group')\n    .data(groupedData)\n    .enter()\n    .append('g')\n    .attr('transform', function(d,i){ return 'translate('+xScale(d.date)+')'})\n\n    casesBarGroups.append('rect')\n    .attr('x', (barWidth*barSpacing))\n    .attr('y', 0)\n    .attr('width', barWidth-(barWidth*barSpacing*2))\n    .attr('height', function(d,i){\n        console.log(d);\n    });\n\n    // 10\n\n    // 0.1\n\n    // 1 - 8 - 1\n    \n    // draw x-axis\n\n\n    // draw y-axis\n\n}\n\nexport function updateTimechart(data) {\n\n    console.log('update timechart');\n\n}\n\nexport default drawTimechart;\n"]},"metadata":{},"sourceType":"module"}