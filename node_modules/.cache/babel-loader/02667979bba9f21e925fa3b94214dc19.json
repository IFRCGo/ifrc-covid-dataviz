{"ast":null,"code":"import * as d3 from \"d3\";\nimport moment from 'moment';\nexport function drawTimechart(data, options) {\n  console.log('draw timechart');\n  console.log(data);\n  console.log(options); // define date range\n\n  const minDate = moment(new Date(2020, 0, 1));\n  const maxDate = moment(new Date(d3.max(data.who_data, function (d) {\n    return d.date;\n  })));\n  const numIntervals = d3.max(data.who_data, function (d, i) {\n    return d[options.timeline_frequency + 'Total'];\n  });\n  const svg = d3.select('#timechart_svg').attr('fill', 'blue');\n  const width = parseInt(svg.attr('width'));\n  const barWidth = width / numIntervals;\n  const xScale = d3.scaleLinear().range([0, width]).domain([0, numIntervals]);\n  console.log({\n    'x0': xScale(0)\n  });\n  console.log({\n    'x70': xScale(73)\n  });\n  console.log({\n    'width': width\n  });\n  console.log({\n    'barWidth': barWidth\n  });\n  console.log(minDate);\n  console.log(maxDate);\n  console.log({\n    numIntervals\n  }); // var nestedData = d3.nest()\n\n  const groupedData = d3.group(data.who_data, d => d[options.timeline_frequency + 'Total'], d => d.ifrc_region);\n  const rollup = {};\n  data.who_data.forEach(function (d, i) {\n    // console.log([d[options.timeline_frequency+'Total']]);\n    rollup[d[options.timeline_frequency + 'Total']] = rollup[d[options.timeline_frequency + 'Total']] || {};\n    if (options.timeline_frequency == 'day') rollup[d[options.timeline_frequency + 'Total']].date = d.date;\n    rollup[d[options.timeline_frequency + 'Total']][d.ifrc_region] = rollup[d[options.timeline_frequency + 'Total']][d.ifrc_region] || {\n      new_cases: 0,\n      new_deaths: 0,\n      cumulative_cases: 0,\n      cumulative_deaths: 0\n    };\n    rollup[d[options.timeline_frequency + 'Total']][d.ifrc_region].new_cases += d.new_cases;\n    rollup[d[options.timeline_frequency + 'Total']][d.ifrc_region].new_deaths += d.new_deaths;\n    rollup[d[options.timeline_frequency + 'Total']][d.ifrc_region].cumulative_cases += d.cumulative_cases;\n    rollup[d[options.timeline_frequency + 'Total']][d.ifrc_region].cumulative_deaths += d.cumulative_deaths;\n  }); // const cases = d3.rollup(\n  //     data.who_data,\n  //     v => d3.sum(v, d => d.new_cases),\n  //     d => d[options.timeline_frequency+'Total'],\n  //     d => d.ifrc_region,\n  //   )\n  // d3.rollup(athletes, v => v.length, d => d.sport)\n  // const rollup = d3.rollup(data.who_data, \n  //     v => d3.sum(v, d => d.cases),//this is the reduce \n  //     d => d[options.timeline_frequency+'Total'], d => d => d.ifrc_region);//2 keys here\n  // const rollup = d3.rollup(data.who_data, \n  //     v => {return {cases:d3.sum(v, d => d.cases)}; },\n  //     d => {return {key: d[options.timeline_frequency+'Total']}},\n  //     d => {return {key: d.ifrc_region}}\n  //    )\n  // console.log(groupedData);\n\n  console.log(rollup);\n}\nexport function updateTimechart(data) {\n  console.log('update timechart');\n}\nexport default drawTimechart;","map":{"version":3,"sources":["/Users/matthewsmawfield/www/ifrc-covid-dataviz/src/Timechart.js"],"names":["d3","moment","drawTimechart","data","options","console","log","minDate","Date","maxDate","max","who_data","d","date","numIntervals","i","timeline_frequency","svg","select","attr","width","parseInt","barWidth","xScale","scaleLinear","range","domain","groupedData","group","ifrc_region","rollup","forEach","new_cases","new_deaths","cumulative_cases","cumulative_deaths","updateTimechart"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\nimport moment from 'moment';\n\nexport function drawTimechart(data, options) {\n\n    console.log('draw timechart');\n    console.log(data);\n    console.log(options);\n\n    // define date range\n    const minDate = moment(new Date(2020, 0, 1));\n    const maxDate = moment(new Date(d3.max(data.who_data, function(d){\n        return d.date;\n    })));\n\n    const numIntervals = d3.max(data.who_data, function(d,i){\n        return d[options.timeline_frequency+'Total'];\n    });\n\n    const svg = d3.select('#timechart_svg').attr('fill', 'blue');\n    const width = parseInt(svg.attr('width'));\n    const barWidth = width/numIntervals;\n\n    const xScale = d3.scaleLinear()\n    .range([0,width])\n    .domain([0,numIntervals]);\n\n    console.log({'x0': xScale(0)})\n    console.log({'x70': xScale(73)})\n    console.log({'width': width});\n    console.log({'barWidth': barWidth});\n    console.log(minDate);\n    console.log(maxDate);\n    console.log({numIntervals});\n\n    // var nestedData = d3.nest()\n    const groupedData = d3.group(data.who_data, d => d[options.timeline_frequency+'Total'], d => d.ifrc_region)\n\n    const rollup = {};\n\n    data.who_data.forEach(function(d,i){\n        // console.log([d[options.timeline_frequency+'Total']]);\n        rollup[d[options.timeline_frequency+'Total']] = rollup[d[options.timeline_frequency+'Total']] || {};\n        if(options.timeline_frequency=='day') rollup[d[options.timeline_frequency+'Total']].date = d.date;\n\n        rollup[d[options.timeline_frequency+'Total']][d.ifrc_region] = rollup[d[options.timeline_frequency+'Total']][d.ifrc_region] || {new_cases: 0, new_deaths: 0, cumulative_cases: 0, cumulative_deaths: 0};\n        rollup[d[options.timeline_frequency+'Total']][d.ifrc_region].new_cases += d.new_cases;\n        rollup[d[options.timeline_frequency+'Total']][d.ifrc_region].new_deaths += d.new_deaths;\n        rollup[d[options.timeline_frequency+'Total']][d.ifrc_region].cumulative_cases += d.cumulative_cases;\n        rollup[d[options.timeline_frequency+'Total']][d.ifrc_region].cumulative_deaths += d.cumulative_deaths;\n    })\n    // const cases = d3.rollup(\n    //     data.who_data,\n    //     v => d3.sum(v, d => d.new_cases),\n    //     d => d[options.timeline_frequency+'Total'],\n    //     d => d.ifrc_region,\n    //   )\n\n    // d3.rollup(athletes, v => v.length, d => d.sport)\n\n    // const rollup = d3.rollup(data.who_data, \n    //     v => d3.sum(v, d => d.cases),//this is the reduce \n    //     d => d[options.timeline_frequency+'Total'], d => d => d.ifrc_region);//2 keys here\n\n\n    // const rollup = d3.rollup(data.who_data, \n    //     v => {return {cases:d3.sum(v, d => d.cases)}; },\n    //     d => {return {key: d[options.timeline_frequency+'Total']}},\n    //     d => {return {key: d.ifrc_region}}\n    //    )\n\n    // console.log(groupedData);\n    console.log(rollup);\n\n\n}\n\nexport function updateTimechart(data) {\n\n    console.log('update timechart');\n\n}\n\nexport default drawTimechart;\n"]},"metadata":{},"sourceType":"module"}