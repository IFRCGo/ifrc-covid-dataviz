{"ast":null,"code":"import * as d3 from \"d3\";\nimport moment from 'moment';\nexport function drawTimechart(data, options) {\n  console.log('draw timechart');\n  console.log(data);\n  console.log(options); // define date range\n\n  const minDate = moment(new Date(2020, 0, 1));\n  const maxDate = moment(new Date(d3.max(data.who_data, function (d) {\n    return d.date;\n  })));\n  const numIntervals = d3.max(data.who_data, function (d, i) {\n    return d[options.timeline_frequency + 'Total'];\n  });\n  const svg = d3.select('#timechart_svg').attr('fill', 'blue');\n  const width = parseInt(svg.attr('width'));\n  const barWidth = width / numIntervals;\n  const xScale = d3.scaleLinear().range([0, width]).domain([0, numIntervals]);\n  console.log({\n    'x0': xScale(0)\n  });\n  console.log({\n    'x70': xScale(73)\n  });\n  console.log({\n    'width': width\n  });\n  console.log({\n    'barWidth': barWidth\n  });\n  console.log(minDate);\n  console.log(maxDate);\n  console.log({\n    numIntervals\n  }); // var nestedData = d3.nest()\n\n  const groupedData = d3.group(data.who_data, d => d[options.timeline_frequency + 'Total'], d => d.ifrc_region); // const rollup = d3.rollup(\n  //     data.who_data,\n  //     d => d[options.timeline_frequency+'Total'],\n  //     d => d.ifrc_region,\n  //     v => d3.sum(v, d => d.cases)\n  //   )\n\n  const rollup = d3.rollup(data.who_data, v => d3.sum(v, d => d.cases), //this is the reduce \n  d => d[options.timeline_frequency + 'Total'], d => d => d.ifrc_region); //2 keys here\n  // const rollup = d3.rollup(data.who_data, \n  //     v => {return {cases:d3.sum(v, d => d.cases)}; },\n  //     d => {return {key: d[options.timeline_frequency+'Total']}},\n  //     d => {return {key: d.ifrc_region}}\n  //    )\n\n  console.log(groupedData);\n  console.log(rollup);\n}\nexport function updateTimechart(data) {\n  console.log('update timechart');\n}\nexport default drawTimechart;","map":{"version":3,"sources":["/Users/matthewsmawfield/www/ifrc-covid-dataviz/src/Timechart.js"],"names":["d3","moment","drawTimechart","data","options","console","log","minDate","Date","maxDate","max","who_data","d","date","numIntervals","i","timeline_frequency","svg","select","attr","width","parseInt","barWidth","xScale","scaleLinear","range","domain","groupedData","group","ifrc_region","rollup","v","sum","cases","updateTimechart"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\nimport moment from 'moment';\n\nexport function drawTimechart(data, options) {\n\n    console.log('draw timechart');\n    console.log(data);\n    console.log(options);\n\n    // define date range\n    const minDate = moment(new Date(2020, 0, 1));\n    const maxDate = moment(new Date(d3.max(data.who_data, function(d){\n        return d.date;\n    })));\n\n    const numIntervals = d3.max(data.who_data, function(d,i){\n        return d[options.timeline_frequency+'Total'];\n    });\n\n    const svg = d3.select('#timechart_svg').attr('fill', 'blue');\n    const width = parseInt(svg.attr('width'));\n    const barWidth = width/numIntervals;\n\n    const xScale = d3.scaleLinear()\n    .range([0,width])\n    .domain([0,numIntervals]);\n\n    console.log({'x0': xScale(0)})\n    console.log({'x70': xScale(73)})\n    console.log({'width': width});\n    console.log({'barWidth': barWidth});\n    console.log(minDate);\n    console.log(maxDate);\n    console.log({numIntervals});\n\n    // var nestedData = d3.nest()\n    const groupedData = d3.group(data.who_data, d => d[options.timeline_frequency+'Total'], d => d.ifrc_region)\n\n    // const rollup = d3.rollup(\n    //     data.who_data,\n    //     d => d[options.timeline_frequency+'Total'],\n    //     d => d.ifrc_region,\n    //     v => d3.sum(v, d => d.cases)\n    //   )\n\n    const rollup = d3.rollup(data.who_data, \n        v => d3.sum(v, d => d.cases),//this is the reduce \n        d => d[options.timeline_frequency+'Total'], d => d => d.ifrc_region);//2 keys here\n\n\n    // const rollup = d3.rollup(data.who_data, \n    //     v => {return {cases:d3.sum(v, d => d.cases)}; },\n    //     d => {return {key: d[options.timeline_frequency+'Total']}},\n    //     d => {return {key: d.ifrc_region}}\n    //    )\n\n    console.log(groupedData);\n    console.log(rollup);\n\n\n}\n\nexport function updateTimechart(data) {\n\n    console.log('update timechart');\n\n}\n\nexport default drawTimechart;\n"]},"metadata":{},"sourceType":"module"}