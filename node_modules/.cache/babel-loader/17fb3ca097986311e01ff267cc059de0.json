{"ast":null,"code":"import * as d3 from \"d3\";\nimport moment from 'moment';\nexport function drawTimechart(data, options) {\n  console.log('draw timechart');\n  console.log(data);\n  console.log(options); // const groupedData = d3.group(data.who_data, d => d[options.timeline_frequency+'Total'], d => d.ifrc_region)\n\n  const groupedData = {};\n  data.who_data.forEach(function (d, i) {\n    groupedData[d[options.timeline_frequency + 'Total']] = groupedData[d[options.timeline_frequency + 'Total']] || {};\n    if (options.timeline_frequency == 'day') groupedData[d[options.timeline_frequency + 'Total']].date = d.date;\n    if (options.timeline_frequency == 'week') groupedData[d[options.timeline_frequency + 'Total']].date = moment(d.date).startOf('isoWeek').toDate();\n    if (options.timeline_frequency == 'month') groupedData[d[options.timeline_frequency + 'Total']].date = moment(d.date).startOf('month').toDate();\n    groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region] = groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region] || {\n      new_cases: 0,\n      new_deaths: 0,\n      cumulative_cases: 0,\n      cumulative_deaths: 0\n    };\n    groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].new_cases += d.new_cases;\n    groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].new_deaths += d.new_deaths;\n    groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].cumulative_cases += d.cumulative_cases;\n    groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].cumulative_deaths += d.cumulative_deaths;\n  });\n  console.log(groupedData);\n  const numIntervals = d3.max(data.who_data, function (d, i) {\n    return d[options.timeline_frequency + 'Total'];\n  }); // define date range\n\n  const minDate = groupedData[1].date;\n  const maxDate = groupedData[numIntervals].date;\n  const svg = d3.select('#timechart_svg').attr('fill', 'blue');\n  const width = parseInt(svg.attr('width'));\n  const barWidth = width / numIntervals;\n  const xScale = d3.scaleLinear().range([0, width]).domain([0, numIntervals]);\n  console.log('minDate');\n  console.log(minDate);\n  console.log('maxDate');\n  console.log(maxDate); // CASES\n  // loop through groupedData and draw bars\n  // draw x-axis\n  // draw y-axis\n}\nexport function updateTimechart(data) {\n  console.log('update timechart');\n}\nexport default drawTimechart;","map":{"version":3,"sources":["/Users/matthewsmawfield/www/ifrc-covid-dataviz/src/Timechart.js"],"names":["d3","moment","drawTimechart","data","options","console","log","groupedData","who_data","forEach","d","i","timeline_frequency","date","startOf","toDate","ifrc_region","new_cases","new_deaths","cumulative_cases","cumulative_deaths","numIntervals","max","minDate","maxDate","svg","select","attr","width","parseInt","barWidth","xScale","scaleLinear","range","domain","updateTimechart"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\nimport moment from 'moment';\n\nexport function drawTimechart(data, options) {\n\n    console.log('draw timechart');\n    console.log(data);\n    console.log(options);\n\n    // const groupedData = d3.group(data.who_data, d => d[options.timeline_frequency+'Total'], d => d.ifrc_region)\n\n    const groupedData = {};\n\n    data.who_data.forEach(function(d,i){\n        groupedData[d[options.timeline_frequency+'Total']] = groupedData[d[options.timeline_frequency+'Total']] || {};\n        if(options.timeline_frequency=='day') groupedData[d[options.timeline_frequency+'Total']].date = d.date;\n        if(options.timeline_frequency=='week') groupedData[d[options.timeline_frequency+'Total']].date = moment(d.date).startOf('isoWeek').toDate();\n        if(options.timeline_frequency=='month') groupedData[d[options.timeline_frequency+'Total']].date = moment(d.date).startOf('month').toDate();\n        groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region] = groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region] || {new_cases: 0, new_deaths: 0, cumulative_cases: 0, cumulative_deaths: 0};\n        groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].new_cases += d.new_cases;\n        groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].new_deaths += d.new_deaths;\n        groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].cumulative_cases += d.cumulative_cases;\n        groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].cumulative_deaths += d.cumulative_deaths;\n    })\n\n    console.log(groupedData);\n\n    const numIntervals = d3.max(data.who_data, function(d,i){\n        return d[options.timeline_frequency+'Total'];\n    });\n\n    // define date range\n    const minDate = groupedData[1].date;\n    const maxDate = groupedData[numIntervals].date;\n\n    const svg = d3.select('#timechart_svg').attr('fill', 'blue');\n    const width = parseInt(svg.attr('width'));\n    const barWidth = width/numIntervals;\n\n    const xScale = d3.scaleLinear()\n    .range([0,width])\n    .domain([0,numIntervals]);\n\n    console.log('minDate');\n    console.log(minDate);\n    console.log('maxDate');\n    console.log(maxDate);\n\n    // CASES\n    // loop through groupedData and draw bars\n\n    \n    // draw x-axis\n\n\n    // draw y-axis\n\n}\n\nexport function updateTimechart(data) {\n\n    console.log('update timechart');\n\n}\n\nexport default drawTimechart;\n"]},"metadata":{},"sourceType":"module"}