{"ast":null,"code":"module.exports = clone;\n/*\n  Deep clones all properties except functions\n\n  var arr = [1, 2, 3];\n  var subObj = {aa: 1};\n  var obj = {a: 3, b: 5, c: arr, d: subObj};\n  var objClone = clone(obj);\n  arr.push(4);\n  subObj.bb = 2;\n  obj; // {a: 3, b: 5, c: [1, 2, 3, 4], d: {aa: 1}}\n  objClone; // {a: 3, b: 5, c: [1, 2, 3], d: {aa: 1, bb: 2}}\n*/\n\nfunction clone(obj) {\n  if (typeof obj == 'function') {\n    return obj;\n  }\n\n  var result = Array.isArray(obj) ? [] : {};\n\n  for (var key in obj) {\n    // include prototype properties\n    var value = obj[key];\n    var type = {}.toString.call(value).slice(8, -1);\n\n    if (type == 'Array' || type == 'Object') {\n      result[key] = clone(value);\n    } else if (type == 'Date') {\n      result[key] = new Date(value.getTime());\n    } else if (type == 'RegExp') {\n      result[key] = RegExp(value.source, getRegExpFlags(value));\n    } else {\n      result[key] = value;\n    }\n  }\n\n  return result;\n}\n\nfunction getRegExpFlags(regExp) {\n  if (typeof regExp.source.flags == 'string') {\n    return regExp.source.flags;\n  } else {\n    var flags = [];\n    regExp.global && flags.push('g');\n    regExp.ignoreCase && flags.push('i');\n    regExp.multiline && flags.push('m');\n    regExp.sticky && flags.push('y');\n    regExp.unicode && flags.push('u');\n    return flags.join('');\n  }\n}","map":{"version":3,"sources":["/Users/matthewsmawfield/www/ifrc-covid-dataviz/node_modules/just-clone/index.js"],"names":["module","exports","clone","obj","result","Array","isArray","key","value","type","toString","call","slice","Date","getTime","RegExp","source","getRegExpFlags","regExp","flags","global","push","ignoreCase","multiline","sticky","unicode","join"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,KAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,KAAT,CAAeC,GAAf,EAAoB;AAClB,MAAI,OAAOA,GAAP,IAAc,UAAlB,EAA8B;AAC5B,WAAOA,GAAP;AACD;;AACD,MAAIC,MAAM,GAAGC,KAAK,CAACC,OAAN,CAAcH,GAAd,IAAqB,EAArB,GAA0B,EAAvC;;AACA,OAAK,IAAII,GAAT,IAAgBJ,GAAhB,EAAqB;AACnB;AACA,QAAIK,KAAK,GAAGL,GAAG,CAACI,GAAD,CAAf;AACA,QAAIE,IAAI,GAAG,GAAGC,QAAH,CAAYC,IAAZ,CAAiBH,KAAjB,EAAwBI,KAAxB,CAA8B,CAA9B,EAAiC,CAAC,CAAlC,CAAX;;AACA,QAAIH,IAAI,IAAI,OAAR,IAAmBA,IAAI,IAAI,QAA/B,EAAyC;AACvCL,MAAAA,MAAM,CAACG,GAAD,CAAN,GAAcL,KAAK,CAACM,KAAD,CAAnB;AACD,KAFD,MAEO,IAAIC,IAAI,IAAI,MAAZ,EAAoB;AACzBL,MAAAA,MAAM,CAACG,GAAD,CAAN,GAAc,IAAIM,IAAJ,CAASL,KAAK,CAACM,OAAN,EAAT,CAAd;AACD,KAFM,MAEA,IAAIL,IAAI,IAAI,QAAZ,EAAsB;AAC3BL,MAAAA,MAAM,CAACG,GAAD,CAAN,GAAcQ,MAAM,CAACP,KAAK,CAACQ,MAAP,EAAeC,cAAc,CAACT,KAAD,CAA7B,CAApB;AACD,KAFM,MAEA;AACLJ,MAAAA,MAAM,CAACG,GAAD,CAAN,GAAcC,KAAd;AACD;AACF;;AACD,SAAOJ,MAAP;AACD;;AAED,SAASa,cAAT,CAAwBC,MAAxB,EAAgC;AAC9B,MAAI,OAAOA,MAAM,CAACF,MAAP,CAAcG,KAArB,IAA8B,QAAlC,EAA4C;AAC1C,WAAOD,MAAM,CAACF,MAAP,CAAcG,KAArB;AACD,GAFD,MAEO;AACL,QAAIA,KAAK,GAAG,EAAZ;AACAD,IAAAA,MAAM,CAACE,MAAP,IAAiBD,KAAK,CAACE,IAAN,CAAW,GAAX,CAAjB;AACAH,IAAAA,MAAM,CAACI,UAAP,IAAqBH,KAAK,CAACE,IAAN,CAAW,GAAX,CAArB;AACAH,IAAAA,MAAM,CAACK,SAAP,IAAoBJ,KAAK,CAACE,IAAN,CAAW,GAAX,CAApB;AACAH,IAAAA,MAAM,CAACM,MAAP,IAAiBL,KAAK,CAACE,IAAN,CAAW,GAAX,CAAjB;AACAH,IAAAA,MAAM,CAACO,OAAP,IAAkBN,KAAK,CAACE,IAAN,CAAW,GAAX,CAAlB;AACA,WAAOF,KAAK,CAACO,IAAN,CAAW,EAAX,CAAP;AACD;AACF","sourcesContent":["module.exports = clone;\n\n/*\n  Deep clones all properties except functions\n\n  var arr = [1, 2, 3];\n  var subObj = {aa: 1};\n  var obj = {a: 3, b: 5, c: arr, d: subObj};\n  var objClone = clone(obj);\n  arr.push(4);\n  subObj.bb = 2;\n  obj; // {a: 3, b: 5, c: [1, 2, 3, 4], d: {aa: 1}}\n  objClone; // {a: 3, b: 5, c: [1, 2, 3], d: {aa: 1, bb: 2}}\n*/\n\nfunction clone(obj) {\n  if (typeof obj == 'function') {\n    return obj;\n  }\n  var result = Array.isArray(obj) ? [] : {};\n  for (var key in obj) {\n    // include prototype properties\n    var value = obj[key];\n    var type = {}.toString.call(value).slice(8, -1);\n    if (type == 'Array' || type == 'Object') {\n      result[key] = clone(value);\n    } else if (type == 'Date') {\n      result[key] = new Date(value.getTime());\n    } else if (type == 'RegExp') {\n      result[key] = RegExp(value.source, getRegExpFlags(value));\n    } else {\n      result[key] = value;\n    }\n  }\n  return result;\n}\n\nfunction getRegExpFlags(regExp) {\n  if (typeof regExp.source.flags == 'string') {\n    return regExp.source.flags;\n  } else {\n    var flags = [];\n    regExp.global && flags.push('g');\n    regExp.ignoreCase && flags.push('i');\n    regExp.multiline && flags.push('m');\n    regExp.sticky && flags.push('y');\n    regExp.unicode && flags.push('u');\n    return flags.join('');\n  }\n}\n"]},"metadata":{},"sourceType":"script"}