{"ast":null,"code":"export function addCommas(nStr){nStr+='';var x=nStr.split('.');var x1=x[0];var x2=x.length>1?'.'+x[1]:'';var rgx=/(\\d+)(\\d{3})/;while(rgx.test(x1)){x1=x1.replace(rgx,'$1'+','+'$2');}return x1+x2;}export function nFormatter(num,digits){digits=1;var lookup=[{value:1,symbol:\"\"},{value:1e3,symbol:\"k\"},{value:1e6,symbol:\"M\"},{value:1e9,symbol:\"B\"},{value:1e12,symbol:\"T\"},{value:1e15,symbol:\"P\"},{value:1e18,symbol:\"E\"}];var rx=/\\.0+$|(\\.[0-9]*[1-9])0+$/;var item=lookup.slice().reverse().find(function(item){return num>=item.value;});return item?(num/item.value).toFixed(digits).replace(rx,\"$1\")+item.symbol:\"0\";}","map":{"version":3,"sources":["/Users/matthewsmawfield/www/ifrc-covid-dataviz/src/HelperFunctions.js"],"names":["addCommas","nStr","x","split","x1","x2","length","rgx","test","replace","nFormatter","num","digits","lookup","value","symbol","rx","item","slice","reverse","find","toFixed"],"mappings":"AAAA,MAAO,SAASA,CAAAA,SAAT,CAAmBC,IAAnB,CAAwB,CAC3BA,IAAI,EAAI,EAAR,CACA,GAAIC,CAAAA,CAAC,CAAGD,IAAI,CAACE,KAAL,CAAW,GAAX,CAAR,CACA,GAAIC,CAAAA,EAAE,CAAGF,CAAC,CAAC,CAAD,CAAV,CACA,GAAIG,CAAAA,EAAE,CAAGH,CAAC,CAACI,MAAF,CAAW,CAAX,CAAe,IAAMJ,CAAC,CAAC,CAAD,CAAtB,CAA4B,EAArC,CACA,GAAIK,CAAAA,GAAG,CAAG,cAAV,CACA,MAAOA,GAAG,CAACC,IAAJ,CAASJ,EAAT,CAAP,CAAqB,CACjBA,EAAE,CAAGA,EAAE,CAACK,OAAH,CAAWF,GAAX,CAAgB,KAAO,GAAP,CAAa,IAA7B,CAAL,CACH,CACD,MAAOH,CAAAA,EAAE,CAAGC,EAAZ,CACH,CAED,MAAO,SAASK,CAAAA,UAAT,CAAoBC,GAApB,CAAyBC,MAAzB,CAAiC,CACtCA,MAAM,CAAG,CAAT,CACE,GAAMC,CAAAA,MAAM,CAAG,CACb,CAAEC,KAAK,CAAE,CAAT,CAAYC,MAAM,CAAE,EAApB,CADa,CAEb,CAAED,KAAK,CAAE,GAAT,CAAcC,MAAM,CAAE,GAAtB,CAFa,CAGb,CAAED,KAAK,CAAE,GAAT,CAAcC,MAAM,CAAE,GAAtB,CAHa,CAIb,CAAED,KAAK,CAAE,GAAT,CAAcC,MAAM,CAAE,GAAtB,CAJa,CAKb,CAAED,KAAK,CAAE,IAAT,CAAeC,MAAM,CAAE,GAAvB,CALa,CAMb,CAAED,KAAK,CAAE,IAAT,CAAeC,MAAM,CAAE,GAAvB,CANa,CAOb,CAAED,KAAK,CAAE,IAAT,CAAeC,MAAM,CAAE,GAAvB,CAPa,CAAf,CASA,GAAMC,CAAAA,EAAE,CAAG,0BAAX,CACA,GAAIC,CAAAA,IAAI,CAAGJ,MAAM,CAACK,KAAP,GAAeC,OAAf,GAAyBC,IAAzB,CAA8B,SAASH,IAAT,CAAe,CACtD,MAAON,CAAAA,GAAG,EAAIM,IAAI,CAACH,KAAnB,CACD,CAFU,CAAX,CAGA,MAAOG,CAAAA,IAAI,CAAG,CAACN,GAAG,CAAGM,IAAI,CAACH,KAAZ,EAAmBO,OAAnB,CAA2BT,MAA3B,EAAmCH,OAAnC,CAA2CO,EAA3C,CAA+C,IAA/C,EAAuDC,IAAI,CAACF,MAA/D,CAAwE,GAAnF,CAGD","sourcesContent":["export function addCommas(nStr){\n    nStr += '';\n    let x = nStr.split('.');\n    let x1 = x[0];\n    let x2 = x.length > 1 ? '.' + x[1] : '';\n    var rgx = /(\\d+)(\\d{3})/;\n    while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + ',' + '$2');\n    }\n    return x1 + x2;\n}\n\nexport function nFormatter(num, digits) {\n  digits = 1;\n    const lookup = [\n      { value: 1, symbol: \"\" },\n      { value: 1e3, symbol: \"k\" },\n      { value: 1e6, symbol: \"M\" },\n      { value: 1e9, symbol: \"B\" },\n      { value: 1e12, symbol: \"T\" },\n      { value: 1e15, symbol: \"P\" },\n      { value: 1e18, symbol: \"E\" }\n    ];\n    const rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n    var item = lookup.slice().reverse().find(function(item) {\n      return num >= item.value;\n    });\n    return item ? (num / item.value).toFixed(digits).replace(rx, \"$1\") + item.symbol : \"0\";\n\n\n  }\n  \n"]},"metadata":{},"sourceType":"module"}