{"ast":null,"code":"// import * as d3 from \"d3\";\nimport { max } from \"d3\";\nimport moment from 'moment';\nexport function ParseData(data, options) {\n  console.log('ParseData');\n  console.log(data);\n  const maxDate = moment(new Date(max(data.who_data, function (d) {\n    return d.Date_reported;\n  })));\n  let dayTotal = 0;\n  let dayCheck = 0;\n  let weekTotal = 0;\n  let weekCheck = 0;\n  let monthTotal = 0;\n  let monthCheck = 0;\n  data.who_data.sort(function (a, b) {\n    return new Date(a.Date_reported) - new Date(b.Date_reported);\n  }); // data.who_data.\n\n  data.who_data.forEach(function (d, i) {\n    d.date = new Date(d.Date_reported);\n    d.dayOfYear = moment(d.date).dayOfYear();\n    if (d.dayOfYear != dayCheck) dayTotal++;\n    d.dayTotal = dayTotal;\n    d.week = moment(d.date).week();\n    if (d.week != weekCheck) weekTotal++;\n    d.weekTotal = weekTotal;\n    d.month = d.date.getMonth();\n    if (d.month != monthCheck) monthTotal++;\n    d.monthTotal = monthTotal;\n    d.year = d.date.getFullYear();\n    d.new_cases = parseInt(d.New_cases);\n    d.new_deaths = parseInt(d.New_deaths);\n    d.cumulative_deaths = parseInt(d.Cumulative_deaths);\n    d.cumulative_cases = parseInt(d.Cumulative_cases);\n    data.equity_data.forEach(function (dd, ii) {\n      if (dd.country_iso2 === d.Country_code) {\n        d.ifrc_region = dd.ifrc_region;\n        d.country_name = dd.country_name;\n      }\n    });\n    delete d.Date_reported;\n    delete d.New_cases;\n    delete d.New_deaths;\n    delete d.Cumulative_deaths;\n    delete d.Cumulative_cases; // delete d.Country_code;\n\n    delete d.WHO_region; // delete d.Country;\n\n    dayCheck = d.dayOfYear;\n    weekCheck = d.week;\n    monthCheck = d.month;\n  });\n  console.log(data.who_data[1000]);\n}\n_c = ParseData;\nexport default ParseData;\n\nvar _c;\n\n$RefreshReg$(_c, \"ParseData\");","map":{"version":3,"sources":["/Users/matthewsmawfield/www/ifrc-covid-dataviz/src/ParseData.js"],"names":["max","moment","ParseData","data","options","console","log","maxDate","Date","who_data","d","Date_reported","dayTotal","dayCheck","weekTotal","weekCheck","monthTotal","monthCheck","sort","a","b","forEach","i","date","dayOfYear","week","month","getMonth","year","getFullYear","new_cases","parseInt","New_cases","new_deaths","New_deaths","cumulative_deaths","Cumulative_deaths","cumulative_cases","Cumulative_cases","equity_data","dd","ii","country_iso2","Country_code","ifrc_region","country_name","WHO_region"],"mappings":"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","sourcesContent":["// import * as d3 from \"d3\";\nimport {max} from \"d3\";\n\nimport moment from 'moment';\n\nexport function ParseData(data, options) {\n\n    console.log('ParseData');\n    console.log(data);\n\n    const maxDate = moment(new Date(max(data.who_data, function(d){\n        return d.Date_reported;\n    })));\n\n    let dayTotal = 0;\n    let dayCheck = 0;\n\n    let weekTotal = 0;\n    let weekCheck = 0;\n\n    let monthTotal = 0;\n    let monthCheck = 0;\n\n    data.who_data.sort(function(a,b){\n        return new Date(a.Date_reported) - new Date(b.Date_reported);\n    });\n\n    // data.who_data.\n\n    data.who_data.forEach(function(d,i){\n\n        d.date = new Date(d.Date_reported);\n        d.dayOfYear =  moment(d.date).dayOfYear();\n        if(d.dayOfYear!=dayCheck) dayTotal++;\n        d.dayTotal = dayTotal;\n\n        d.week = moment(d.date).week();\n        if(d.week!=weekCheck) weekTotal++;\n        d.weekTotal = weekTotal;\n        d.month = d.date.getMonth();\n        if(d.month!=monthCheck) monthTotal++;\n        d.monthTotal = monthTotal;\n        d.year = d.date.getFullYear();\n        d.new_cases = parseInt(d.New_cases);\n        d.new_deaths = parseInt(d.New_deaths);\n        d.cumulative_deaths = parseInt(d.Cumulative_deaths);\n        d.cumulative_cases = parseInt(d.Cumulative_cases);\n        data.equity_data.forEach(function(dd,ii){\n            if(dd.country_iso2===d.Country_code){\n                d.ifrc_region = dd.ifrc_region;\n                d.country_name = dd.country_name;\n            }\n        })\n        delete d.Date_reported;\n        delete d.New_cases;\n        delete d.New_deaths;\n        delete d.Cumulative_deaths;\n        delete d.Cumulative_cases;\n        // delete d.Country_code;\n        delete d.WHO_region;\n        // delete d.Country;\n        dayCheck = d.dayOfYear;\n        weekCheck = d.week;\n        monthCheck = d.month;\n    })\n\n    console.log(data.who_data[1000]);\n}\n\nexport default ParseData;\n"]},"metadata":{},"sourceType":"module"}