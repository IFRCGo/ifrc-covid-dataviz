{"ast":null,"code":"// import * as d3 from \"d3\";\nimport { min, max, group, flatGroup } from \"d3\";\nimport moment from 'moment';\nimport clone from 'just-clone'; // const regions = ['AF', 'ME', 'AP', 'EU', 'AM', 'OTH'];\n\nconst regions = [{\n  'code': 'AF',\n  'population': 0\n}, {\n  'code': 'ME',\n  'population': 0\n}, {\n  'code': 'AP',\n  'population': 0\n}, {\n  'code': 'EU',\n  'population': 0\n}, {\n  'code': 'AM',\n  'population': 0\n}, {\n  'code': 'OTH',\n  'population': 0\n}];\nexport function ParseData(data, options) {\n  data.equity_data.forEach(function (d, i) {\n    d.vaccines_used = [];\n    d.population = parseInt(d.population);\n    d.number_vaccine_types_used = 0;\n    d.vaccines_per_100 = 0;\n    data.vaccines_who_data.forEach(function (dd, ii) {\n      if (d.country_iso3 == dd.ISO3) {\n        d.data_updated = moment(dd.DATE_UPDATED).startOf('day').toDate();\n        d.number_vaccine_types_used = dd.NUMBER_VACCINES_TYPES_USED;\n        d.vaccines_per_100 = parseFloat(dd.TOTAL_VACCINATIONS_PER100);\n        if (isNaN(d.vaccines_per_100)) d.vaccines_per_100 = 0;\n        d.vaccines_used = dd.VACCINES_USED.split(',').map(function (item) {\n          return item.trim();\n        });\n      }\n    });\n\n    if (d.ifrc_region != 'AF' && d.ifrc_region != 'ME' && d.ifrc_region != 'AP' && d.ifrc_region != 'EU' && d.ifrc_region != 'AM') {\n      d.ifrc_region = 'OTH';\n    }\n\n    var pop = 0;\n    if (d.population > 0) pop = d.population;\n    regions.forEach(function (dd, ii) {\n      if (dd.code == d.ifrc_region) {\n        dd.population += pop;\n      }\n    });\n    d.ns_involvement = 0;\n    data.self_assessment.forEach(function (dd, ii) {\n      if (d.country_iso3 == dd.ISO3) {\n        if (dd['Final involvement'] == 'Yes') d.ns_involvement = 1;\n      }\n    });\n    data.vaccine_acceptance.forEach(function (dd, ii) {\n      if (d.country_iso3 == dd.iso3) {\n        // if(dd['Final involvement']=='Yes') d.ns_involvement = 1;\n        d.country_code = d.country_iso2;\n        d.vaccine_acceptance_percent = parseFloat(dd.indicator_value) * 100;\n        d.vaccine_acceptance_population = parseInt(dd.population_size);\n      }\n    });\n\n    if (d.contract_tracing.toLowerCase() == 'all' || d.contract_tracing.toLowerCase() == 'some') {\n      d.contract_tracing = 1;\n    } else {\n      d.contract_tracing = 0;\n    }\n\n    d.avg_tests_per_1000 = parseFloat(d.avg_tests_per_1000) || 0;\n  });\n  data.regions = regions;\n  console.log(data); // max dates\n\n  let maxDate = moment(new Date(max(data.who_data, function (d) {\n    return d.Date_reported;\n  })));\n  let minDate = moment(new Date(min(data.who_data, function (d) {\n    return d.Date_reported;\n  }))); // override\n\n  minDate = moment('2019-12-31');\n  let minDateVaccines = new Date(min(data.vaccines_data, function (d) {\n    return d.date;\n  }));\n  let maxDateVaccines = new Date(max(data.vaccines_data, function (d) {\n    return d.date;\n  }));\n  options.maxDataDate = maxDate.toDate();\n  options.maxVDataDate = maxDateVaccines;\n\n  if (maxDateVaccines > maxDate) {\n    maxDate = maxDateVaccines;\n  } // if(maxDate<moment()){\n  //     maxDate = moment();\n  // }\n  // if(maxDateVaccines<moment()){\n  //     maxDateVaccines = moment();\n  // }\n\n\n  options.maxDate = moment(maxDate).toDate();\n  options.maxVDate = moment(maxDateVaccines).toDate();\n  options.minDate = moment(minDate).toDate(); // parse who data\n\n  let dayTotal = -1;\n  let dayCheck = 0;\n  let weekTotal = -1;\n  let weekCheck = -1;\n  let monthTotal = 0;\n  let monthCheck = 0; // filter out negative new deaths\n  // data.who_data = data.who_data.filter(d=>d.New_deaths>0);\n  // data.who_data = data.who_data.filter(d=>d.New_cases>0);\n\n  data.who_data.sort(function (a, b) {\n    return new Date(a.Date_reported) - new Date(b.Date_reported);\n  });\n  var countryCodes = [];\n  var ccArray = [];\n  data.who_data.forEach(function (d, i) {\n    d.date = new Date(d.Date_reported);\n    d.dayOfYear = moment(d.date).dayOfYear();\n    if (d.dayOfYear !== dayCheck) dayTotal++;\n    d.dayTotal = dayTotal;\n    d.week = moment(d.date).isoWeek();\n    if (d.week !== weekCheck) weekTotal++;\n    d.weekTotal = weekTotal;\n    d.month = d.date.getMonth();\n    if (d.month !== monthCheck) monthTotal++;\n    d.monthTotal = monthTotal;\n    d.year = d.date.getFullYear();\n    d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n    d.month_start = new Date(moment(d.date).startOf('month').toDate());\n    d.new_cases = parseInt(d.New_cases);\n    d.new_deaths = parseInt(d.New_deaths); // negative values\n\n    if (d.new_deaths < 0) d.new_deaths = 0;\n    if (d.new_cases < 0) d.new_cases = 0;\n    d.cumulative_deaths = parseInt(d.Cumulative_deaths);\n    d.cumulative_cases = parseInt(d.Cumulative_cases);\n    d.country_code = d.Country_code;\n    d.country_name = null;\n    data.equity_data.forEach(function (dd, ii) {\n      if (dd.country_iso2 === d.Country_code) {\n        d.ifrc_region = dd.ifrc_region;\n        d.country_name = dd.country_name;\n      }\n    });\n    if (d.ifrc_region == undefined) d.ifrc_region = 'OTH';\n\n    if (!countryCodes.includes(d.country_code)) {\n      if (d.ifrc_region == 'OTH') {\n        ccArray.push([d.Country, d.country_code]);\n      }\n\n      countryCodes.push(d.country_code);\n    }\n\n    delete d.Date_reported;\n    delete d.Country;\n    delete d.New_cases;\n    delete d.New_deaths;\n    delete d.Country_code;\n    delete d.Cumulative_deaths;\n    delete d.Cumulative_cases; // delete d.Country_code;\n\n    delete d.WHO_region; // delete d.Country;\n\n    dayCheck = d.dayOfYear;\n    weekCheck = d.week;\n    monthCheck = d.month;\n  }); // check for missing coutries\n  // ccArray.forEach(function(d,i){\n  //     console.log(d[1])\n  // })\n  // console.log(ccArray);\n  // parse vaccine cumulative data\n\n  dayTotal = -1;\n  dayCheck = 0;\n  weekTotal = -1;\n  weekCheck = -1;\n  monthTotal = 0;\n  monthCheck = 0; // filter out vaccine data on only include records with ISO3 country codes\n\n  data.vaccines_data_cumulative = data.vaccines_data.filter(function (d, i) {\n    return d.iso_code.length === 3 && d.total_vaccinations > 0;\n  }); // fill out missing vaccinations date records (extend cumulative)\n\n  var vGroup = flatGroup(data.vaccines_data_cumulative, d => d.iso_code);\n  var newDates = [];\n  var hasDays = [];\n  var initDate = 0;\n  var lastRecord = {};\n  var vDataFlat = [];\n  vGroup.forEach(function (d, i) {\n    var minDt = new Date(minDateVaccines);\n    var maxDt = new Date(maxDateVaccines);\n    var hasDays = [];\n    var newDays = [];\n    var newDays = [];\n    data.equity_data.forEach(function (dd, ii) {\n      if (dd.country_iso3 === vGroup[i][0]) {\n        d.ifrc_region = dd.ifrc_region;\n        d.country_name = dd.country_name;\n        d.country_code = dd.country_iso2;\n      }\n    });\n    vGroup[i].lastDate = new Date(max(vGroup[i][1], function (d, i) {\n      return d.date;\n    }));\n    vGroup[i][1].forEach(function (dd, ii) {\n      hasDays.push(new Date(dd.date).getTime());\n    }); // if((i<1)||(d[0] =='BFA')||(d[0] =='RWA')){\n\n    vGroup[i][1].forEach(function (dd, ii) {\n      dd.total_vaccinations = parseInt(dd.total_vaccinations);\n\n      for (var day = minDt; day <= maxDt; day.setDate(day.getDate() + 1)) {\n        var newDay = day.getTime();\n\n        if (!hasDays.includes(newDay)) {\n          newDays.push({\n            date: new Date(day),\n            total_vaccinations: null\n          });\n        }\n      } // dd.lastDate = dd.date;\n\n    });\n    vGroup[i][1].push(...newDays);\n    vGroup[i][1].sort(function (a, b) {\n      return new Date(a.date) - new Date(b.date);\n    });\n    var totalVac = 0;\n    var totalVac100 = 0;\n    var people_vaccinated_per_hundred = 0;\n    var people_fully_vaccinated_per_hundred = 0;\n    vGroup[i][1].forEach(function (dd, ii) {\n      if (dd.total_vaccinations) {\n        totalVac = dd.total_vaccinations;\n      } else {\n        dd.total_vaccinations = totalVac;\n      }\n\n      if (dd.total_vaccinations_per_hundred) {\n        totalVac100 = dd.total_vaccinations_per_hundred;\n      } else {\n        dd.total_vaccinations_per_hundred = totalVac100;\n      }\n\n      if (dd.people_vaccinated_per_hundred) {\n        people_vaccinated_per_hundred = dd.people_vaccinated_per_hundred;\n      } else {\n        dd.people_vaccinated_per_hundred = people_vaccinated_per_hundred;\n      }\n\n      if (dd.people_fully_vaccinated_per_hundred) {\n        people_fully_vaccinated_per_hundred = dd.people_fully_vaccinated_per_hundred;\n      } else {\n        dd.people_fully_vaccinated_per_hundred = people_fully_vaccinated_per_hundred;\n      }\n\n      var countryName;\n\n      if (vGroup[i].country_name == null) {\n        countryName = vGroup[i][0];\n      } else {\n        countryName = vGroup[i].country_name;\n      }\n\n      vDataFlat.push({\n        date: new Date(dd.date),\n        lastDate: vGroup[i].lastDate,\n        total_vaccinations_per_hundred: parseFloat(totalVac100),\n        people_vaccinated_per_hundred: people_vaccinated_per_hundred,\n        people_fully_vaccinated_per_hundred: people_fully_vaccinated_per_hundred,\n        iso_code: vGroup[i][0],\n        ifrc_region: vGroup[i].ifrc_region,\n        country_name: countryName,\n        country_code: vGroup[i].country_code,\n        total_vaccinations: totalVac\n      });\n    });\n  });\n  data.vaccines_data_cumulative = vDataFlat;\n  data.vaccines_data_cumulative.sort(function (a, b) {\n    return new Date(a.date) - new Date(b.date);\n  });\n  data.vaccines_data_cumulative.forEach(function (d, i) {\n    if (d.ifrc_region == undefined) d.ifrc_region = 'OTH';\n    d.dayOfYear = moment(d.date).dayOfYear();\n    if (d.dayOfYear !== dayCheck) dayTotal++;\n    d.dayTotal = dayTotal;\n    d.week = moment(d.date).isoWeek();\n    if (d.week !== weekCheck) weekTotal++;\n    d.weekTotal = weekTotal;\n    d.month = d.date.getMonth();\n    if (d.month !== monthCheck) monthTotal++;\n    d.monthTotal = monthTotal;\n    d.year = d.date.getFullYear();\n    dayCheck = d.dayOfYear;\n    weekCheck = d.week;\n    monthCheck = d.month;\n    d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n    d.month_start = new Date(moment(d.date).startOf('month').toDate());\n  }); // parse vaccine daily data\n\n  dayTotal = -1;\n  dayCheck = 0;\n  weekTotal = -1;\n  weekCheck = -1;\n  monthTotal = 0;\n  monthCheck = 0; // filter out vaccine data on only include records with ISO3 country codes\n\n  data.vaccines_data_daily = data.vaccines_data.filter(function (d, i) {\n    return d.iso_code.length === 3 && d.daily_vaccinations > 0;\n  }); // fill out missing vaccinations date records (extend cumulative)\n\n  var vGroup = flatGroup(data.vaccines_data_daily, d => d.iso_code);\n  var newDates = [];\n  var hasDays = [];\n  var initDate = 0;\n  var lastRecord = {};\n  var vDataFlat = [];\n  vGroup.forEach(function (d, i) {\n    var minDt = new Date(minDateVaccines);\n    var maxDt = new Date(maxDateVaccines);\n    var hasDays = [];\n    var newDays = [];\n    var newDays = [];\n    data.equity_data.forEach(function (dd, ii) {\n      if (dd.country_iso3 === vGroup[i][0]) {\n        d.ifrc_region = dd.ifrc_region;\n        d.country_name = dd.country_name;\n        d.country_code = dd.country_iso2;\n      }\n    });\n    vGroup[i][1].forEach(function (dd, ii) {\n      hasDays.push(new Date(dd.date).getTime());\n    }); // if((i<1)||(d[0] =='BFA')||(d[0] =='RWA')){\n\n    vGroup[i][1].forEach(function (dd, ii) {\n      dd.daily_vaccinations = parseInt(dd.daily_vaccinations);\n\n      for (var day = minDt; day <= maxDt; day.setDate(day.getDate() + 1)) {\n        var newDay = day.getTime();\n\n        if (!hasDays.includes(newDay)) {\n          newDays.push({\n            date: new Date(day),\n            daily_vaccinations: null\n          });\n        }\n      }\n    });\n    vGroup[i][1].push(...newDays);\n    vGroup[i][1].sort(function (a, b) {\n      return new Date(a.date) - new Date(b.date);\n    });\n    var daily_vaccinations = 0;\n    vGroup[i][1].forEach(function (dd, ii) {\n      if (dd.daily_vaccinations) {\n        daily_vaccinations = dd.daily_vaccinations;\n      } else {\n        dd.daily_vaccinations = daily_vaccinations;\n      }\n\n      var countryName;\n\n      if (vGroup[i].country_name == null) {\n        countryName = vGroup[i][0];\n      } else {\n        countryName = vGroup[i].country_name;\n      }\n\n      vDataFlat.push({\n        date: new Date(dd.date),\n        iso_code: vGroup[i][0],\n        ifrc_region: vGroup[i].ifrc_region,\n        country_name: countryName,\n        country_code: vGroup[i].country_code,\n        daily_vaccinations: daily_vaccinations\n      });\n    });\n  });\n  data.vaccines_data_daily = vDataFlat;\n  data.vaccines_data_daily.sort(function (a, b) {\n    return new Date(a.date) - new Date(b.date);\n  });\n  data.vaccines_data_daily.forEach(function (d, i) {\n    if (d.ifrc_region == undefined) d.ifrc_region = 'OTH';\n    d.dayOfYear = moment(d.date).dayOfYear();\n    if (d.dayOfYear !== dayCheck) dayTotal++;\n    d.dayTotal = dayTotal;\n    d.week = moment(d.date).isoWeek();\n    if (d.week !== weekCheck) weekTotal++;\n    d.weekTotal = weekTotal;\n    d.month = d.date.getMonth();\n    if (d.month !== monthCheck) monthTotal++;\n    d.monthTotal = monthTotal;\n    d.year = d.date.getFullYear();\n    dayCheck = d.dayOfYear;\n    weekCheck = d.week;\n    monthCheck = d.month;\n    d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n    d.month_start = new Date(moment(d.date).startOf('month').toDate());\n  }); // parse equity data inform/hdi indexes\n\n  data.equity_data.forEach(function (d, i) {\n    if (d.hdi_category.match(/very high/i)) {\n      d.hdi_category = 'very-high';\n    } else if (d.hdi_category.match(/high/i)) {\n      d.hdi_category = 'high';\n    } else if (d.hdi_category.match(/medium/i)) {\n      d.hdi_category = 'medium';\n    } else if (d.hdi_category.match(/low/i)) {\n      d.hdi_category = 'low';\n    }\n\n    if (d.inform_severity.match(/very high/i)) {\n      d.inform_severity = 'very-high';\n    } else if (d.inform_severity.match(/high/i)) {\n      d.inform_severity = 'high';\n    } else if (d.inform_severity.match(/medium/i)) {\n      d.inform_severity = 'medium';\n    } else if (d.inform_severity.match(/low/i)) {\n      d.inform_severity = 'low';\n    } else if (d.inform_severity.match(/no/i)) {\n      d.inform_severity = 'no-score';\n    }\n  });\n  data.equity_data = data.equity_data.filter(function (d, i) {\n    return countryCodes.includes(d.country_iso2);\n  });\n  data.original = clone(data); // console.log(data);\n}\n_c = ParseData;\nexport default ParseData;\n\nvar _c;\n\n$RefreshReg$(_c, \"ParseData\");","map":{"version":3,"sources":["/Users/matthewsmawfield/www/ifrc-covid-dataviz/src/ParseData.js"],"names":["min","max","group","flatGroup","moment","clone","regions","ParseData","data","options","equity_data","forEach","d","i","vaccines_used","population","parseInt","number_vaccine_types_used","vaccines_per_100","vaccines_who_data","dd","ii","country_iso3","ISO3","data_updated","DATE_UPDATED","startOf","toDate","NUMBER_VACCINES_TYPES_USED","parseFloat","TOTAL_VACCINATIONS_PER100","isNaN","VACCINES_USED","split","map","item","trim","ifrc_region","pop","code","ns_involvement","self_assessment","vaccine_acceptance","iso3","country_code","country_iso2","vaccine_acceptance_percent","indicator_value","vaccine_acceptance_population","population_size","contract_tracing","toLowerCase","avg_tests_per_1000","console","log","maxDate","Date","who_data","Date_reported","minDate","minDateVaccines","vaccines_data","date","maxDateVaccines","maxDataDate","maxVDataDate","maxVDate","dayTotal","dayCheck","weekTotal","weekCheck","monthTotal","monthCheck","sort","a","b","countryCodes","ccArray","dayOfYear","week","isoWeek","month","getMonth","year","getFullYear","week_start","month_start","new_cases","New_cases","new_deaths","New_deaths","cumulative_deaths","Cumulative_deaths","cumulative_cases","Cumulative_cases","Country_code","country_name","undefined","includes","push","Country","WHO_region","vaccines_data_cumulative","filter","iso_code","length","total_vaccinations","vGroup","newDates","hasDays","initDate","lastRecord","vDataFlat","minDt","maxDt","newDays","lastDate","getTime","day","setDate","getDate","newDay","totalVac","totalVac100","people_vaccinated_per_hundred","people_fully_vaccinated_per_hundred","total_vaccinations_per_hundred","countryName","vaccines_data_daily","daily_vaccinations","hdi_category","match","inform_severity","original"],"mappings":"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","sourcesContent":["// import * as d3 from \"d3\";\nimport {min,max,group,flatGroup} from \"d3\";\nimport moment from 'moment';\nimport clone from 'just-clone';\n// const regions = ['AF', 'ME', 'AP', 'EU', 'AM', 'OTH'];\nconst regions = [\n    {'code': 'AF', 'population': 0},\n    {'code': 'ME', 'population': 0},\n    {'code': 'AP', 'population': 0},\n    {'code': 'EU', 'population': 0},\n    {'code': 'AM', 'population': 0},\n    {'code': 'OTH', 'population': 0}\n]\nexport function ParseData(data, options) {\n\n    data.equity_data.forEach(function(d,i){\n        d.vaccines_used = [];\n        d.population = parseInt(d.population);\n        d.number_vaccine_types_used = 0;\n        d.vaccines_per_100 = 0;\n        data.vaccines_who_data.forEach(function(dd,ii){\n            if(d.country_iso3==dd.ISO3){\n                d.data_updated = moment(dd.DATE_UPDATED).startOf('day').toDate();\n                d.number_vaccine_types_used = dd.NUMBER_VACCINES_TYPES_USED;\n                d.vaccines_per_100 = parseFloat(dd.TOTAL_VACCINATIONS_PER100);\n                if(isNaN(d.vaccines_per_100))d.vaccines_per_100 = 0;\n                d.vaccines_used = dd.VACCINES_USED.split(',').map(function(item) {\n                    return item.trim();\n                  });\n            }\n        })\n        if((d.ifrc_region!='AF')&&(d.ifrc_region!='ME')&&(d.ifrc_region!='AP')&&(d.ifrc_region!='EU')&&(d.ifrc_region!='AM')){\n            d.ifrc_region = 'OTH';\n        }\n\n        var pop = 0;\n        if(d.population>0) pop = d.population;\n\n        regions.forEach(function(dd,ii){\n            if(dd.code==d.ifrc_region){\n                dd.population += pop\n            }\n        });\n\n\n\n        d.ns_involvement = 0;\n        data.self_assessment.forEach(function(dd,ii){\n            if(d.country_iso3==dd.ISO3){\n                if(dd['Final involvement']=='Yes') d.ns_involvement = 1;\n            }\n        })\n\n        data.vaccine_acceptance.forEach(function(dd,ii){\n            if(d.country_iso3==dd.iso3){\n                // if(dd['Final involvement']=='Yes') d.ns_involvement = 1;\n                d.country_code = d.country_iso2;\n                d.vaccine_acceptance_percent = parseFloat(dd.indicator_value)*100;\n                d.vaccine_acceptance_population = parseInt(dd.population_size);\n            }\n        })\n\n        if((d.contract_tracing.toLowerCase()=='all')||(d.contract_tracing.toLowerCase()=='some')){\n            d.contract_tracing = 1;\n        } else {\n            d.contract_tracing = 0\n        }\n\n        d.avg_tests_per_1000 = parseFloat(d.avg_tests_per_1000)||0;\n\n    })\n\n    data.regions = regions;\n\n    console.log(data);\n    \n    // max dates\n    let maxDate = moment(new Date(max(data.who_data, function(d){\n        return d.Date_reported;\n    })));\n\n    let minDate = moment(new Date(min(data.who_data, function(d){\n        return d.Date_reported;\n    })));\n\n    // override\n    minDate = moment('2019-12-31');\n\n    let minDateVaccines = (new Date(min(data.vaccines_data, function(d){\n        return d.date;\n    })));\n\n\n    let maxDateVaccines = (new Date(max(data.vaccines_data, function(d){\n        return d.date;\n    })));\n\n    options.maxDataDate = (maxDate).toDate();\n    options.maxVDataDate = maxDateVaccines;\n\n    if(maxDateVaccines>maxDate) {\n        maxDate = maxDateVaccines;\n    }\n\n    // if(maxDate<moment()){\n    //     maxDate = moment();\n    // }\n    // if(maxDateVaccines<moment()){\n    //     maxDateVaccines = moment();\n    // }\n\n    options.maxDate = moment(maxDate).toDate();\n    options.maxVDate = moment(maxDateVaccines).toDate();\n    options.minDate = moment(minDate).toDate();\n\n    // parse who data\n\n    let dayTotal = -1;\n    let dayCheck = 0;\n\n    let weekTotal = -1;\n    let weekCheck = -1;\n\n    let monthTotal = 0;\n    let monthCheck = 0;\n\n    // filter out negative new deaths\n    // data.who_data = data.who_data.filter(d=>d.New_deaths>0);\n    // data.who_data = data.who_data.filter(d=>d.New_cases>0);\n\n    data.who_data.sort(function(a,b){\n        return new Date(a.Date_reported) - new Date(b.Date_reported);\n    });\n\n    var countryCodes = [];\n    var ccArray = [];\n\n    data.who_data.forEach(function(d,i){\n        d.date = new Date(d.Date_reported);\n        d.dayOfYear =  moment(d.date).dayOfYear();\n        if(d.dayOfYear!==dayCheck) dayTotal++;\n        d.dayTotal = dayTotal;\n\n        d.week = moment(d.date).isoWeek();\n        if(d.week!==weekCheck) weekTotal++;\n        d.weekTotal = weekTotal;\n        d.month = d.date.getMonth();\n        if(d.month!==monthCheck) monthTotal++;\n        d.monthTotal = monthTotal;\n        d.year = d.date.getFullYear();\n\n        d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n        d.month_start = new Date(moment(d.date).startOf('month').toDate());\n\n        d.new_cases = parseInt(d.New_cases);\n        d.new_deaths = parseInt(d.New_deaths);\n\n        // negative values\n        if(d.new_deaths<0)d.new_deaths = 0;\n        if(d.new_cases<0)d.new_cases = 0;\n\n        d.cumulative_deaths = parseInt(d.Cumulative_deaths);\n        d.cumulative_cases = parseInt(d.Cumulative_cases);\n        d.country_code = d.Country_code;\n        d.country_name = null;\n        data.equity_data.forEach(function(dd,ii){\n            if(dd.country_iso2===d.Country_code){\n                d.ifrc_region = dd.ifrc_region;\n                d.country_name = dd.country_name;\n            }\n        })\n        if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n        if(!countryCodes.includes(d.country_code)) {\n            if(d.ifrc_region=='OTH'){\n                ccArray.push([d.Country, d.country_code]);\n            }\n            countryCodes.push(d.country_code);\n        }\n\n        delete d.Date_reported;\n        delete d.Country;\n        delete d.New_cases;\n        delete d.New_deaths;\n        delete d.Country_code;\n        delete d.Cumulative_deaths;\n        delete d.Cumulative_cases;\n        // delete d.Country_code;\n        delete d.WHO_region;\n        // delete d.Country;\n        dayCheck = d.dayOfYear;\n        weekCheck = d.week;\n        monthCheck = d.month;\n    })\n\n    // check for missing coutries\n    // ccArray.forEach(function(d,i){\n    //     console.log(d[1])\n    // })\n    // console.log(ccArray);\n\n    \n    // parse vaccine cumulative data\n    dayTotal = -1;\n    dayCheck = 0;\n\n    weekTotal = -1;\n    weekCheck = -1;\n    monthTotal = 0;\n    monthCheck = 0;\n\n    // filter out vaccine data on only include records with ISO3 country codes\n    data.vaccines_data_cumulative = data.vaccines_data.filter(function(d,i){\n        return d.iso_code.length===3 && d.total_vaccinations > 0;\n    })\n\n    // fill out missing vaccinations date records (extend cumulative)\n    var vGroup = flatGroup(data.vaccines_data_cumulative, d => d.iso_code);\n\n    var newDates = [];\n    var hasDays = [];\n    var initDate = 0;\n    var lastRecord = {};\n    var vDataFlat = [];\n    vGroup.forEach(function(d,i){\n\n        var minDt = new Date(minDateVaccines);\n        var maxDt = new Date(maxDateVaccines);\n        var hasDays = [];\n        var newDays = [];\n        var newDays = [];        \n        data.equity_data.forEach(function(dd,ii){\n            if(dd.country_iso3===vGroup[i][0]){\n                d.ifrc_region = dd.ifrc_region;\n                d.country_name = dd.country_name;\n                d.country_code = dd.country_iso2;\n                \n            }\n        })\n\n        vGroup[i].lastDate = new Date(max(vGroup[i][1], function(d,i){ return d.date }));\n\n        vGroup[i][1].forEach(function(dd,ii){\n            hasDays.push(new Date(dd.date).getTime());\n        })\n\n        // if((i<1)||(d[0] =='BFA')||(d[0] =='RWA')){\n        vGroup[i][1].forEach(function(dd,ii){\n            dd.total_vaccinations = parseInt(dd.total_vaccinations);\n            for (var day = minDt;day <= maxDt; day.setDate(day.getDate() + 1)) {\n                var newDay = day.getTime();\n                if(!hasDays.includes(newDay)){\n                    newDays.push({date: new Date(day), total_vaccinations: null})\n                }\n            }\n            // dd.lastDate = dd.date;\n        });\n\n        vGroup[i][1].push(...newDays);\n\n        vGroup[i][1].sort(function(a,b){\n            return new Date(a.date) - new Date(b.date);\n        });\n\n        var totalVac = 0;\n        var totalVac100 = 0;\n        var people_vaccinated_per_hundred = 0;\n        var people_fully_vaccinated_per_hundred = 0;\n\n        vGroup[i][1].forEach(function(dd,ii){\n\n            if(dd.total_vaccinations){\n                totalVac = dd.total_vaccinations;\n            } else {\n                dd.total_vaccinations = totalVac;\n            }\n            if(dd.total_vaccinations_per_hundred){\n                totalVac100 = dd.total_vaccinations_per_hundred\n            } else {\n                dd.total_vaccinations_per_hundred = totalVac100;\n            }\n            if(dd.people_vaccinated_per_hundred){\n                people_vaccinated_per_hundred = dd.people_vaccinated_per_hundred;\n            } else {\n                dd.people_vaccinated_per_hundred = people_vaccinated_per_hundred;\n            }\n            if(dd.people_fully_vaccinated_per_hundred){\n                people_fully_vaccinated_per_hundred = dd.people_fully_vaccinated_per_hundred;\n            } else {\n                dd.people_fully_vaccinated_per_hundred = people_fully_vaccinated_per_hundred;\n            }\n\n            var countryName;\n            if(vGroup[i].country_name==null) { countryName = vGroup[i][0];\n            } else {\n                countryName = vGroup[i].country_name\n            }\n\n            vDataFlat.push({\n                date: new Date(dd.date),\n                lastDate: (vGroup[i].lastDate),\n                total_vaccinations_per_hundred: parseFloat(totalVac100),\n                people_vaccinated_per_hundred: people_vaccinated_per_hundred,\n                people_fully_vaccinated_per_hundred: people_fully_vaccinated_per_hundred,\n                iso_code: vGroup[i][0], \n                ifrc_region: vGroup[i].ifrc_region,\n                country_name: countryName,\n                country_code: vGroup[i].country_code, \n                total_vaccinations: totalVac \n            })\n        })\n    });\n\n    data.vaccines_data_cumulative = vDataFlat;\n\n    data.vaccines_data_cumulative.sort(function(a,b){\n        return new Date(a.date) - new Date(b.date);\n    });\n\n    data.vaccines_data_cumulative.forEach(function(d,i){\n        if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n        d.dayOfYear =  moment(d.date).dayOfYear();\n        if(d.dayOfYear!==dayCheck) dayTotal++;\n        d.dayTotal = dayTotal;\n        d.week = moment(d.date).isoWeek();\n        if(d.week!==weekCheck) weekTotal++;\n        d.weekTotal = weekTotal;\n        d.month = d.date.getMonth();\n        if(d.month!==monthCheck) monthTotal++;\n        d.monthTotal = monthTotal;\n        d.year = d.date.getFullYear();\n        dayCheck = d.dayOfYear;\n        weekCheck = d.week;\n        monthCheck = d.month;\n        d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n        d.month_start = new Date(moment(d.date).startOf('month').toDate());\n    })\n\n    // parse vaccine daily data\n\n    dayTotal = -1;\n    dayCheck = 0;\n\n    weekTotal = -1;\n    weekCheck = -1;\n    monthTotal = 0;\n    monthCheck = 0;\n\n    // filter out vaccine data on only include records with ISO3 country codes\n    data.vaccines_data_daily = data.vaccines_data.filter(function(d,i){\n        return d.iso_code.length===3 && d.daily_vaccinations > 0;\n    })\n\n    // fill out missing vaccinations date records (extend cumulative)\n    var vGroup = flatGroup(data.vaccines_data_daily, d => d.iso_code);\n\n    var newDates = [];\n    var hasDays = [];\n    var initDate = 0;\n    var lastRecord = {};\n    var vDataFlat = [];\n    vGroup.forEach(function(d,i){\n\n        var minDt = new Date(minDateVaccines);\n        var maxDt = new Date(maxDateVaccines);\n        var hasDays = [];\n        var newDays = [];\n        var newDays = [];\n\n        data.equity_data.forEach(function(dd,ii){\n            if(dd.country_iso3===vGroup[i][0]){\n                d.ifrc_region = dd.ifrc_region;\n                d.country_name = dd.country_name;\n                d.country_code = dd.country_iso2;\n            }\n        })\n\n        vGroup[i][1].forEach(function(dd,ii){\n            hasDays.push(new Date(dd.date).getTime());\n        })\n\n        // if((i<1)||(d[0] =='BFA')||(d[0] =='RWA')){\n        vGroup[i][1].forEach(function(dd,ii){\n            dd.daily_vaccinations = parseInt(dd.daily_vaccinations);\n            for (var day = minDt;day <= maxDt; day.setDate(day.getDate() + 1)) {\n                var newDay = day.getTime();\n                if(!hasDays.includes(newDay)){\n                    newDays.push({date: new Date(day), daily_vaccinations: null})\n                }\n            }\n        });\n\n        vGroup[i][1].push(...newDays);\n\n        vGroup[i][1].sort(function(a,b){\n            return new Date(a.date) - new Date(b.date);\n        });\n\n        var daily_vaccinations = 0;\n\n        vGroup[i][1].forEach(function(dd,ii){\n            if(dd.daily_vaccinations){\n                daily_vaccinations = dd.daily_vaccinations;\n            } else {\n                dd.daily_vaccinations = daily_vaccinations;\n            }\n            var countryName;\n            if(vGroup[i].country_name==null) { countryName = vGroup[i][0];\n            } else {\n                countryName = vGroup[i].country_name\n            }\n            vDataFlat.push({\n                date: new Date(dd.date),\n                iso_code: vGroup[i][0], \n                ifrc_region: vGroup[i].ifrc_region,\n                country_name: countryName,\n                country_code: vGroup[i].country_code, \n                daily_vaccinations: daily_vaccinations \n            })\n        })\n    });\n\n    data.vaccines_data_daily = vDataFlat;\n\n    data.vaccines_data_daily.sort(function(a,b){\n        return new Date(a.date) - new Date(b.date);\n    });\n\n    data.vaccines_data_daily.forEach(function(d,i){\n        if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n        d.dayOfYear =  moment(d.date).dayOfYear();\n        if(d.dayOfYear!==dayCheck) dayTotal++;\n        d.dayTotal = dayTotal;\n        d.week = moment(d.date).isoWeek();\n        if(d.week!==weekCheck) weekTotal++;\n        d.weekTotal = weekTotal;\n        d.month = d.date.getMonth();\n        if(d.month!==monthCheck) monthTotal++;\n        d.monthTotal = monthTotal;\n        d.year = d.date.getFullYear();\n        dayCheck = d.dayOfYear;\n        weekCheck = d.week;\n        monthCheck = d.month;\n        d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n        d.month_start = new Date(moment(d.date).startOf('month').toDate());\n    });\n\n\n    // parse equity data inform/hdi indexes\n    data.equity_data.forEach(function(d,i){\n        if(d.hdi_category.match(/very high/i)){\n            d.hdi_category = 'very-high'\n        }\n        else if(d.hdi_category.match(/high/i)){\n            d.hdi_category = 'high'\n        }\n        else if(d.hdi_category.match(/medium/i)){\n            d.hdi_category = 'medium'\n        }\n        else if(d.hdi_category.match(/low/i)){\n            d.hdi_category = 'low'\n        }\n        if(d.inform_severity.match(/very high/i)){\n            d.inform_severity = 'very-high'\n        }\n        else if(d.inform_severity.match(/high/i)){\n            d.inform_severity = 'high'\n        }\n        else if(d.inform_severity.match(/medium/i)){\n            d.inform_severity = 'medium'\n        }\n        else if(d.inform_severity.match(/low/i)){\n            d.inform_severity = 'low'\n        }\n        else if(d.inform_severity.match(/no/i)){\n            d.inform_severity = 'no-score'\n        }\n    })\n\n    data.equity_data = data.equity_data.filter(function(d,i){\n       return countryCodes.includes(d.country_iso2)\n    })\n    data.original = clone(data);\n    // console.log(data);\n}\n\nexport default ParseData;\n"]},"metadata":{},"sourceType":"module"}