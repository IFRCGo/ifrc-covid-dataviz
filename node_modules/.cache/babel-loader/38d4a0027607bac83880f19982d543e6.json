{"ast":null,"code":"import * as d3 from \"d3\";\nimport moment from 'moment';\nimport colors from './colors';\nimport { nFormatter } from './HelperFunctions';\nlet yScaleCases;\nlet yScaleDeaths;\nlet yScaleVaccines;\nlet yAxisCases;\nlet yAxisDeaths;\nlet yAxisVaccines;\nlet yScaleCasesAxis;\nlet yScaleDeathsAxis;\nlet yScaleVaccinesAxis;\nexport function drawTimechart(data, options) {\n  const regions = ['AF', 'ME', 'AP', 'EU', 'AM', 'OTH'];\n  const groupedData = [];\n  data.who_data.forEach(function (d, i) {\n    if (!groupedData[d[options.timeline_frequency + 'Total']]) groupedData[d[options.timeline_frequency + 'Total']] = {};\n    if (options.timeline_frequency === 'day') groupedData[d[options.timeline_frequency + 'Total']].date = d.date;\n    if (options.timeline_frequency === 'week') groupedData[d[options.timeline_frequency + 'Total']].date = moment(d.date).startOf('isoWeek').toDate();\n    if (options.timeline_frequency === 'month') groupedData[d[options.timeline_frequency + 'Total']].date = moment(d.date).startOf('month').toDate();\n    if (!groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region]) groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region] = {\n      new_cases: 0,\n      new_deaths: 0,\n      cumulative_cases: 0,\n      cumulative_deaths: 0\n    };\n    groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].new_cases += d.new_cases;\n    groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].new_deaths += d.new_deaths;\n    groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].cumulative_cases = 0;\n  });\n  console.log(groupedData); // // totals by date\n  // groupedData.forEach(function(d,i){\n  //     regions.forEach(function(dd,ii){\n  //         // if(dd!=='OTH') d.region.push({'region': dd, 'new_cases': d[dd].new_cases, 'new_deaths': d[dd].new_deaths, 'cumulative_cases': d[dd].cumulative_cases, 'cumulative_deaths': d[dd].cumulative_deaths});\n  //         if(i>0){\n  //             d[dd].cumulative_cases = groupedData[i][dd].new_cases + groupedData[i-1][dd].cumulative_cases;\n  //             d[dd].cumulative_deaths = groupedData[i][dd].new_deaths + groupedData[i-1][dd].cumulative_deaths;\n  //         } else {\n  //             d[dd].cumulative_cases = groupedData[i][dd].new_cases;\n  //             d[dd].cumulative_deaths = groupedData[i][dd].new_deaths;\n  //         }\n  //     })\n  //     d.total_new_cases = d.AF.new_cases + d.AP.new_cases + d.AM.new_cases + d.EU.new_cases + d.ME.new_cases + d.OTH.new_cases; \n  //     d.total_cumulative_cases = d.AF.cumulative_cases + d.AP.cumulative_cases + d.AM.cumulative_cases + d.EU.cumulative_cases + d.ME.cumulative_cases + d.OTH.cumulative_cases; \n  //     d.total_new_deaths = d.AF.new_deaths + d.AP.new_deaths + d.AM.new_deaths + d.EU.new_deaths + d.ME.new_deaths + d.OTH.new_deaths; \n  //     d.total_cumulative_deaths = d.AF.cumulative_deaths + d.AP.cumulative_deaths + d.AM.cumulative_deaths + d.EU.cumulative_deaths + d.ME.cumulative_deaths + d.OTH.cumulative_deaths; \n  //     d.region = [];\n  //     regions.forEach(function(dd,ii){\n  //         d.region.push({'region': dd, 'new_cases': d[dd].new_cases, 'new_deaths': d[dd].new_deaths, 'cumulative_cases': d[dd].cumulative_cases, 'cumulative_deaths': d[dd].cumulative_deaths});\n  //     })\n  // });\n\n  const vgroupedData = [];\n  data.vaccines_data.forEach(function (d, i) {\n    if (!vgroupedData[d[options.timeline_frequency + 'Total']]) vgroupedData[d[options.timeline_frequency + 'Total']] = {};\n    if (options.timeline_frequency === 'day') vgroupedData[d[options.timeline_frequency + 'Total']].date = d.date;\n    if (options.timeline_frequency === 'week') vgroupedData[d[options.timeline_frequency + 'Total']].date = moment(d.date).startOf('isoWeek').toDate();\n    if (options.timeline_frequency === 'month') vgroupedData[d[options.timeline_frequency + 'Total']].date = moment(d.date).startOf('month').toDate();\n    if (!vgroupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region]) vgroupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region] = {\n      new_vaccines: 0,\n      cumulative_vaccines: 0\n    };\n    vgroupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].new_vaccines += d.new_vaccines;\n    vgroupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].cumulative_vaccines += d.cumulative_vaccines;\n  });\n  console.log(vgroupedData); // totals by date\n  // vgroupedData.forEach(function(d,i){\n  //     regions.forEach(function(dd,ii){\n  //         // if(dd!=='OTH') d.region.push({'region': dd, 'new_cases': d[dd].new_cases, 'new_deaths': d[dd].new_deaths, 'cumulative_cases': d[dd].cumulative_cases, 'cumulative_deaths': d[dd].cumulative_deaths});\n  //         if(i>0){\n  //             d[dd].cumulative_vaccines = groupedData[i][dd].new_cases + groupedData[i-1][dd].cumulative_vaccines;\n  //             d[dd].cumulative_deaths = groupedData[i][dd].new_deaths + groupedData[i-1][dd].cumulative_deaths;\n  //         } else {\n  //             d[dd].cumulative_cases = groupedData[i][dd].new_cases;\n  //             d[dd].cumulative_deaths = groupedData[i][dd].new_deaths;\n  //         }\n  //     })\n  //     d.total_new_cases = d.AF.new_cases + d.AP.new_cases + d.AM.new_cases + d.EU.new_cases + d.ME.new_cases + d.OTH.new_cases; \n  //     d.total_cumulative_cases = d.AF.cumulative_cases + d.AP.cumulative_cases + d.AM.cumulative_cases + d.EU.cumulative_cases + d.ME.cumulative_cases + d.OTH.cumulative_cases; \n  //     d.total_new_deaths = d.AF.new_deaths + d.AP.new_deaths + d.AM.new_deaths + d.EU.new_deaths + d.ME.new_deaths + d.OTH.new_deaths; \n  //     d.total_cumulative_deaths = d.AF.cumulative_deaths + d.AP.cumulative_deaths + d.AM.cumulative_deaths + d.EU.cumulative_deaths + d.ME.cumulative_deaths + d.OTH.cumulative_deaths; \n  //     d.region = [];\n  //     regions.forEach(function(dd,ii){\n  //         d.region.push({'region': dd, 'new_cases': d[dd].new_cases, 'new_deaths': d[dd].new_deaths, 'cumulative_cases': d[dd].cumulative_cases, 'cumulative_deaths': d[dd].cumulative_deaths});\n  //     })\n  // });\n\n  const numIntervals = d3.max(data.who_data, function (d, i) {\n    return d[options.timeline_frequency + 'Total'];\n  });\n  const maxCases = d3.max(groupedData, function (d, i) {\n    if (options.timeline_type === 'non-cumulative') return d.total_new_cases;\n    if (options.timeline_type === 'cumulative') return d.total_cumulative_cases;\n    if (options.timeline_type === 'stacked') return 100;\n  });\n  const maxDeaths = d3.max(groupedData, function (d, i) {\n    if (options.timeline_type === 'non-cumulative') return d.total_new_deaths;\n    if (options.timeline_type === 'cumulative') return d.total_cumulative_deaths;\n    if (options.timeline_type === 'stacked') return 100;\n  }); // const maxVaccines = d3.max(vgroupedData, function(d,i){\n  //     if(options.timeline_type==='non-cumulative') return d.total_new_vaccines;\n  //     if(options.timeline_type==='cumulative') return d.total_cumulative_vaccines;\n  //     if(options.timeline_type==='stacked') return 100;\n  // })\n  // define date range\n  // const minDate = groupedData[0].date;\n  // const maxDate = groupedData[numIntervals].date;\n\n  const minDate = groupedData[0].date;\n  const maxDate = options.maxDate;\n  const svg = d3.select('#timechart_svg');\n  svg.selectAll('g').remove();\n  d3.selectAll('#layout .yAxis').remove();\n  const width = 2000;\n  const barWidth = width / numIntervals;\n  let barSpacing = 0.04;\n  if (options.timeline_frequency === 'month') barSpacing = 0.03;\n  if (options.timeline_frequency === 'day') barSpacing = 0; // define scales\n\n  const xScale = d3.scaleTime().range([0, width]).domain([minDate, maxDate]);\n  yScaleCases = d3.scaleLinear().range([0, 140]).domain([0, maxCases]);\n  yScaleCasesAxis = d3.scaleLinear().range([140, 0]).domain([0, maxCases]);\n  yScaleDeaths = d3.scaleLinear().range([0, 140]).domain([0, maxDeaths]);\n  yScaleDeathsAxis = d3.scaleLinear().range([140, 0]).domain([0, maxDeaths]); // yScaleVaccines = d3.scaleLinear()\n  // .range([0,140])\n  // .domain([0,maxVaccines]);\n  // yScaleVaccinesAxis = d3.scaleLinear()\n  // .range([140,0])\n  // .domain([0,maxVaccines]);\n  // define axi\n\n  yAxisCases = d3.axisRight().scale(yScaleCasesAxis).ticks(3).tickSize(3).tickPadding(3).tickFormat(function (d) {\n    if (options.timeline_type == 'stacked') return nFormatter(d) + '%';\n    return nFormatter(d);\n  });\n  yAxisDeaths = d3.axisRight().scale(yScaleDeathsAxis).ticks(3).tickSize(3).tickPadding(3).tickFormat(function (d) {\n    if (options.timeline_type == 'stacked') return nFormatter(d) + '%';\n    return nFormatter(d);\n  }); // yAxisVaccines = d3.axisRight()\n  // .scale(yScaleVaccinesAxis)\n  // .ticks(3)\n  // .tickSize(3)\n  // .tickPadding(3);\n  // .tickFormat(function(d){\n  //     if(options.timeline_type=='stacked') return nFormatter(d)+'%';\n  //     return nFormatter(d);\n  // })\n  // y-axis cases\n\n  var yAxisCasesText = d3.select('#layout').append(\"g\").attr(\"class\", \"yAxis axis\").attr(\"id\", \"casesAxis\").attr('transform', 'translate(620,363)').call(yAxisCases); // y-axis deaths\n\n  var yAxisDeathsText = d3.select('#layout').append(\"g\").attr(\"class\", \"yAxis axis\").attr(\"id\", \"deathsAxis\").attr('transform', 'translate(620,534)').call(yAxisDeaths); // CASES\n  // loop through groupedData and draw bars\n\n  const barGroups = svg.selectAll('.bar_group').data(groupedData).enter().append('g').attr('transform', function (d, i) {\n    return 'translate(' + xScale(d.date) + ')';\n  }); // CASES\n\n  barGroups.selectAll('.cases_bar').data(function (d, i) {\n    return d.region.filter(function (dd, ii) {\n      return dd.region !== 'OTH';\n    });\n  }).enter().append('rect').attr('class', 'timeBar cases_bar').attr('x', barWidth * barSpacing).attr('y', function (d, i) {\n    const totalNewCases = d3.select(this.parentNode).datum().total_new_cases - d3.select(this.parentNode).datum().OTH.new_cases;\n    let dp = 0;\n\n    if (i > 0) {\n      for (let ii = 1; ii <= i; ii++) {\n        if (options.timeline_type === 'cumulative') dp += d3.select(this.parentNode).datum().region[ii - 1].cumulative_cases;\n        if (options.timeline_type === 'non-cumulative') dp += d3.select(this.parentNode).datum().region[ii - 1].new_cases;\n        if (options.timeline_type === 'stacked') dp += d3.select(this.parentNode).datum().region[ii - 1].new_cases;\n      }\n    }\n\n    let y = 0;\n    if (options.timeline_type === 'cumulative') y = 140 - yScaleCases(d.cumulative_cases) - yScaleCases(dp);\n    if (options.timeline_type === 'non-cumulative') y = 140 - yScaleCases(d.new_cases) - yScaleCases(dp);\n    if (options.timeline_type === 'stacked') y = 140 - 140 * (d.new_cases / totalNewCases) - 140 * (dp / totalNewCases);\n\n    if (y) {\n      return y;\n    } else {\n      return 0;\n    }\n\n    ;\n  }).attr('width', barWidth - barWidth * barSpacing * 2).attr('height', function (d, i) {\n    const totalNewCases = d3.select(this.parentNode).datum().total_new_cases - d3.select(this.parentNode).datum().OTH.new_cases;\n    let y = 0;\n    if (options.timeline_type === 'cumulative') y = yScaleCases(d.cumulative_cases);\n    if (options.timeline_type === 'non-cumulative') y = yScaleCases(d.new_cases);\n    if (options.timeline_type === 'stacked') y = 140 * (d.new_cases / totalNewCases);\n\n    if (y) {\n      return y;\n    } else {\n      return 0;\n    }\n\n    ;\n  }).attr('fill', function (d, i) {\n    return colors.regions[d.region];\n  }); // DEATHS\n\n  barGroups.selectAll('.deaths_bar').data(function (d, i) {\n    return d.region.filter(function (dd, ii) {\n      return dd.region !== 'OTH';\n    });\n  }).enter().append('rect').attr('class', 'timeBar deaths_bar').attr('x', barWidth * barSpacing).attr('y', function (d, i) {\n    const totalNewDeaths = d3.select(this.parentNode).datum().total_new_deaths - d3.select(this.parentNode).datum().OTH.new_deaths;\n    let dp = 0;\n\n    if (i > 0) {\n      for (let ii = 1; ii <= i; ii++) {\n        if (options.timeline_type === 'cumulative') dp += d3.select(this.parentNode).datum().region[ii - 1].cumulative_deaths;\n        if (options.timeline_type === 'non-cumulative') dp += d3.select(this.parentNode).datum().region[ii - 1].new_deaths;\n        if (options.timeline_type === 'stacked') dp += d3.select(this.parentNode).datum().region[ii - 1].new_deaths;\n      }\n    }\n\n    let y = 0;\n    if (options.timeline_type === 'cumulative') y = 140 - yScaleDeaths(d.cumulative_deaths) - yScaleDeaths(dp) + 170;\n    if (options.timeline_type === 'non-cumulative') y = 140 - yScaleDeaths(d.new_deaths) - yScaleDeaths(dp) + 170;\n    if (options.timeline_type === 'stacked') y = 140 - 140 * (d.new_deaths / totalNewDeaths) - 140 * (dp / totalNewDeaths) + 170;\n\n    if (y) {\n      return y;\n    } else {\n      return 0;\n    }\n\n    ;\n  }).attr('width', barWidth - barWidth * barSpacing * 2).attr('height', function (d, i) {\n    const totalNewDeaths = d3.select(this.parentNode).datum().total_new_deaths - d3.select(this.parentNode).datum().OTH.new_deaths;\n    let y = 0;\n    if (options.timeline_type === 'cumulative') y = yScaleDeaths(d.cumulative_deaths);\n    if (options.timeline_type === 'non-cumulative') y = yScaleDeaths(d.new_deaths);\n    if (options.timeline_type === 'stacked') y = 140 * (d.new_deaths / totalNewDeaths);\n\n    if (y) {\n      return y;\n    } else {\n      return 0;\n    }\n\n    ;\n  }).attr('fill', function (d, i) {\n    return colors.regions[d.region];\n  });\n\n  if (options.timeline_frequency === 'month') {\n    barGroups.selectAll(\".timeBar\").attr(\"width\", function (d) {\n      var date = d3.select(this.parentNode).datum().date;\n      var next = d3.timeMonth.offset(date, 1);\n      return (xScale(next) - xScale(date)) * (1 - barSpacing);\n    }).attr(\"x\", function (d) {\n      var date = d3.select(this.parentNode).datum().date;\n      var next = d3.timeMonth.offset(date, 1);\n      return (xScale(next) - xScale(date)) * (barSpacing / 2);\n    });\n  } // 10\n  // 0.1\n  // 1 - 8 - 1\n  // draw x-axis\n  // draw y-axis\n\n}\nexport function updateTimechart(data) {\n  console.log('update timechart');\n}\nexport default drawTimechart;","map":{"version":3,"sources":["/Users/matthewsmawfield/www/ifrc-covid-dataviz/src/Timechart.js"],"names":["d3","moment","colors","nFormatter","yScaleCases","yScaleDeaths","yScaleVaccines","yAxisCases","yAxisDeaths","yAxisVaccines","yScaleCasesAxis","yScaleDeathsAxis","yScaleVaccinesAxis","drawTimechart","data","options","regions","groupedData","who_data","forEach","d","i","timeline_frequency","date","startOf","toDate","ifrc_region","new_cases","new_deaths","cumulative_cases","cumulative_deaths","console","log","vgroupedData","vaccines_data","new_vaccines","cumulative_vaccines","numIntervals","max","maxCases","timeline_type","total_new_cases","total_cumulative_cases","maxDeaths","total_new_deaths","total_cumulative_deaths","minDate","maxDate","svg","select","selectAll","remove","width","barWidth","barSpacing","xScale","scaleTime","range","domain","scaleLinear","axisRight","scale","ticks","tickSize","tickPadding","tickFormat","yAxisCasesText","append","attr","call","yAxisDeathsText","barGroups","enter","region","filter","dd","ii","totalNewCases","parentNode","datum","OTH","dp","y","totalNewDeaths","next","timeMonth","offset","updateTimechart"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAAQC,UAAR,QAAyB,mBAAzB;AAEA,IAAIC,WAAJ;AACA,IAAIC,YAAJ;AACA,IAAIC,cAAJ;AACA,IAAIC,UAAJ;AACA,IAAIC,WAAJ;AACA,IAAIC,aAAJ;AACA,IAAIC,eAAJ;AACA,IAAIC,gBAAJ;AACA,IAAIC,kBAAJ;AAEA,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,OAA7B,EAAsC;AAEzC,QAAMC,OAAO,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,KAA/B,CAAhB;AAEA,QAAMC,WAAW,GAAG,EAApB;AAEAH,EAAAA,IAAI,CAACI,QAAL,CAAcC,OAAd,CAAsB,UAASC,CAAT,EAAWC,CAAX,EAAa;AAC/B,QAAG,CAACJ,WAAW,CAACG,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAf,EAAuDL,WAAW,CAACG,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAX,GAAqD,EAArD;AACvD,QAAGP,OAAO,CAACO,kBAAR,KAA6B,KAAhC,EAAuCL,WAAW,CAACG,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAX,CAAmDC,IAAnD,GAA0DH,CAAC,CAACG,IAA5D;AACvC,QAAGR,OAAO,CAACO,kBAAR,KAA6B,MAAhC,EAAwCL,WAAW,CAACG,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAX,CAAmDC,IAAnD,GAA0DtB,MAAM,CAACmB,CAAC,CAACG,IAAH,CAAN,CAAeC,OAAf,CAAuB,SAAvB,EAAkCC,MAAlC,EAA1D;AACxC,QAAGV,OAAO,CAACO,kBAAR,KAA6B,OAAhC,EAAyCL,WAAW,CAACG,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAX,CAAmDC,IAAnD,GAA0DtB,MAAM,CAACmB,CAAC,CAACG,IAAH,CAAN,CAAeC,OAAf,CAAuB,OAAvB,EAAgCC,MAAhC,EAA1D;AACzC,QAAG,CAACR,WAAW,CAACG,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAX,CAAmDF,CAAC,CAACM,WAArD,CAAJ,EAAuET,WAAW,CAACG,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAX,CAAmDF,CAAC,CAACM,WAArD,IAAoE;AAACC,MAAAA,SAAS,EAAE,CAAZ;AAAeC,MAAAA,UAAU,EAAE,CAA3B;AAA8BC,MAAAA,gBAAgB,EAAE,CAAhD;AAAmDC,MAAAA,iBAAiB,EAAE;AAAtE,KAApE;AACvEb,IAAAA,WAAW,CAACG,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAX,CAAmDF,CAAC,CAACM,WAArD,EAAkEC,SAAlE,IAA+EP,CAAC,CAACO,SAAjF;AACAV,IAAAA,WAAW,CAACG,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAX,CAAmDF,CAAC,CAACM,WAArD,EAAkEE,UAAlE,IAAgFR,CAAC,CAACQ,UAAlF;AACAX,IAAAA,WAAW,CAACG,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAX,CAAmDF,CAAC,CAACM,WAArD,EAAkEG,gBAAlE,GAAqF,CAArF;AACH,GATD;AAWAE,EAAAA,OAAO,CAACC,GAAR,CAAYf,WAAZ,EAjByC,CAmBzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAEA,QAAMgB,YAAY,GAAG,EAArB;AAEAnB,EAAAA,IAAI,CAACoB,aAAL,CAAmBf,OAAnB,CAA2B,UAASC,CAAT,EAAWC,CAAX,EAAa;AACpC,QAAG,CAACY,YAAY,CAACb,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAhB,EAAwDW,YAAY,CAACb,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAZ,GAAsD,EAAtD;AACxD,QAAGP,OAAO,CAACO,kBAAR,KAA6B,KAAhC,EAAuCW,YAAY,CAACb,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAZ,CAAoDC,IAApD,GAA2DH,CAAC,CAACG,IAA7D;AACvC,QAAGR,OAAO,CAACO,kBAAR,KAA6B,MAAhC,EAAwCW,YAAY,CAACb,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAZ,CAAoDC,IAApD,GAA2DtB,MAAM,CAACmB,CAAC,CAACG,IAAH,CAAN,CAAeC,OAAf,CAAuB,SAAvB,EAAkCC,MAAlC,EAA3D;AACxC,QAAGV,OAAO,CAACO,kBAAR,KAA6B,OAAhC,EAAyCW,YAAY,CAACb,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAZ,CAAoDC,IAApD,GAA2DtB,MAAM,CAACmB,CAAC,CAACG,IAAH,CAAN,CAAeC,OAAf,CAAuB,OAAvB,EAAgCC,MAAhC,EAA3D;AACzC,QAAG,CAACQ,YAAY,CAACb,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAZ,CAAoDF,CAAC,CAACM,WAAtD,CAAJ,EAAwEO,YAAY,CAACb,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAZ,CAAoDF,CAAC,CAACM,WAAtD,IAAqE;AAACS,MAAAA,YAAY,EAAE,CAAf;AAAkBC,MAAAA,mBAAmB,EAAE;AAAvC,KAArE;AACxEH,IAAAA,YAAY,CAACb,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAZ,CAAoDF,CAAC,CAACM,WAAtD,EAAmES,YAAnE,IAAmFf,CAAC,CAACe,YAArF;AACAF,IAAAA,YAAY,CAACb,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAZ,CAAoDF,CAAC,CAACM,WAAtD,EAAmEU,mBAAnE,IAA0FhB,CAAC,CAACgB,mBAA5F;AACH,GARD;AAUAL,EAAAA,OAAO,CAACC,GAAR,CAAYC,YAAZ,EAxDyC,CA0DzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAEA,QAAMI,YAAY,GAAGrC,EAAE,CAACsC,GAAH,CAAOxB,IAAI,CAACI,QAAZ,EAAsB,UAASE,CAAT,EAAWC,CAAX,EAAa;AACpD,WAAOD,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAR;AACH,GAFoB,CAArB;AAIA,QAAMiB,QAAQ,GAAGvC,EAAE,CAACsC,GAAH,CAAOrB,WAAP,EAAoB,UAASG,CAAT,EAAWC,CAAX,EAAa;AAC9C,QAAGN,OAAO,CAACyB,aAAR,KAAwB,gBAA3B,EAA6C,OAAOpB,CAAC,CAACqB,eAAT;AAC7C,QAAG1B,OAAO,CAACyB,aAAR,KAAwB,YAA3B,EAAyC,OAAOpB,CAAC,CAACsB,sBAAT;AACzC,QAAG3B,OAAO,CAACyB,aAAR,KAAwB,SAA3B,EAAsC,OAAO,GAAP;AACzC,GAJgB,CAAjB;AAMA,QAAMG,SAAS,GAAG3C,EAAE,CAACsC,GAAH,CAAOrB,WAAP,EAAoB,UAASG,CAAT,EAAWC,CAAX,EAAa;AAC/C,QAAGN,OAAO,CAACyB,aAAR,KAAwB,gBAA3B,EAA6C,OAAOpB,CAAC,CAACwB,gBAAT;AAC7C,QAAG7B,OAAO,CAACyB,aAAR,KAAwB,YAA3B,EAAyC,OAAOpB,CAAC,CAACyB,uBAAT;AACzC,QAAG9B,OAAO,CAACyB,aAAR,KAAwB,SAA3B,EAAsC,OAAO,GAAP;AACzC,GAJiB,CAAlB,CA7FyC,CAmGzC;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA,QAAMM,OAAO,GAAG7B,WAAW,CAAC,CAAD,CAAX,CAAeM,IAA/B;AACA,QAAMwB,OAAO,GAAGhC,OAAO,CAACgC,OAAxB;AAEA,QAAMC,GAAG,GAAGhD,EAAE,CAACiD,MAAH,CAAU,gBAAV,CAAZ;AACAD,EAAAA,GAAG,CAACE,SAAJ,CAAc,GAAd,EAAmBC,MAAnB;AACAnD,EAAAA,EAAE,CAACkD,SAAH,CAAa,gBAAb,EAA+BC,MAA/B;AAEA,QAAMC,KAAK,GAAG,IAAd;AACA,QAAMC,QAAQ,GAAGD,KAAK,GAACf,YAAvB;AAEA,MAAIiB,UAAU,GAAG,IAAjB;AACA,MAAGvC,OAAO,CAACO,kBAAR,KAA6B,OAAhC,EAAyCgC,UAAU,GAAG,IAAb;AACzC,MAAGvC,OAAO,CAACO,kBAAR,KAA6B,KAAhC,EAAuCgC,UAAU,GAAG,CAAb,CAxHE,CA0HzC;;AAEA,QAAMC,MAAM,GAAGvD,EAAE,CAACwD,SAAH,GACdC,KADc,CACR,CAAC,CAAD,EAAGL,KAAH,CADQ,EAEdM,MAFc,CAEP,CAACZ,OAAD,EAASC,OAAT,CAFO,CAAf;AAIA3C,EAAAA,WAAW,GAAGJ,EAAE,CAAC2D,WAAH,GACbF,KADa,CACP,CAAC,CAAD,EAAG,GAAH,CADO,EAEbC,MAFa,CAEN,CAAC,CAAD,EAAGnB,QAAH,CAFM,CAAd;AAIA7B,EAAAA,eAAe,GAAGV,EAAE,CAAC2D,WAAH,GACjBF,KADiB,CACX,CAAC,GAAD,EAAK,CAAL,CADW,EAEjBC,MAFiB,CAEV,CAAC,CAAD,EAAGnB,QAAH,CAFU,CAAlB;AAIAlC,EAAAA,YAAY,GAAGL,EAAE,CAAC2D,WAAH,GACdF,KADc,CACR,CAAC,CAAD,EAAG,GAAH,CADQ,EAEdC,MAFc,CAEP,CAAC,CAAD,EAAGf,SAAH,CAFO,CAAf;AAIAhC,EAAAA,gBAAgB,GAAGX,EAAE,CAAC2D,WAAH,GAClBF,KADkB,CACZ,CAAC,GAAD,EAAK,CAAL,CADY,EAElBC,MAFkB,CAEX,CAAC,CAAD,EAAGf,SAAH,CAFW,CAAnB,CA5IyC,CAgJzC;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAEApC,EAAAA,UAAU,GAAGP,EAAE,CAAC4D,SAAH,GACZC,KADY,CACNnD,eADM,EAEZoD,KAFY,CAEN,CAFM,EAGZC,QAHY,CAGH,CAHG,EAIZC,WAJY,CAIA,CAJA,EAKZC,UALY,CAKD,UAAS7C,CAAT,EAAW;AACnB,QAAGL,OAAO,CAACyB,aAAR,IAAuB,SAA1B,EAAqC,OAAOrC,UAAU,CAACiB,CAAD,CAAV,GAAc,GAArB;AACrC,WAAOjB,UAAU,CAACiB,CAAD,CAAjB;AACH,GARY,CAAb;AAUAZ,EAAAA,WAAW,GAAGR,EAAE,CAAC4D,SAAH,GACbC,KADa,CACPlD,gBADO,EAEbmD,KAFa,CAEP,CAFO,EAGbC,QAHa,CAGJ,CAHI,EAIbC,WAJa,CAID,CAJC,EAKbC,UALa,CAKF,UAAS7C,CAAT,EAAW;AACnB,QAAGL,OAAO,CAACyB,aAAR,IAAuB,SAA1B,EAAqC,OAAOrC,UAAU,CAACiB,CAAD,CAAV,GAAc,GAArB;AACrC,WAAOjB,UAAU,CAACiB,CAAD,CAAjB;AACH,GARa,CAAd,CApKyC,CA8KzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,MAAI8C,cAAc,GAAGlE,EAAE,CAACiD,MAAH,CAAU,SAAV,EAAqBkB,MAArB,CAA4B,GAA5B,EACpBC,IADoB,CACf,OADe,EACN,YADM,EAEpBA,IAFoB,CAEf,IAFe,EAET,WAFS,EAGpBA,IAHoB,CAGf,WAHe,EAGF,oBAHE,EAIpBC,IAJoB,CAIf9D,UAJe,CAArB,CAzLyC,CA+LzC;;AACA,MAAI+D,eAAe,GAAGtE,EAAE,CAACiD,MAAH,CAAU,SAAV,EAAqBkB,MAArB,CAA4B,GAA5B,EACrBC,IADqB,CAChB,OADgB,EACP,YADO,EAErBA,IAFqB,CAEhB,IAFgB,EAEV,YAFU,EAGrBA,IAHqB,CAGhB,WAHgB,EAGH,oBAHG,EAIrBC,IAJqB,CAIhB7D,WAJgB,CAAtB,CAhMyC,CAsMzC;AACA;;AACA,QAAM+D,SAAS,GAAGvB,GAAG,CAACE,SAAJ,CAAc,YAAd,EACjBpC,IADiB,CACZG,WADY,EAEjBuD,KAFiB,GAGjBL,MAHiB,CAGV,GAHU,EAIjBC,IAJiB,CAIZ,WAJY,EAIC,UAAShD,CAAT,EAAWC,CAAX,EAAa;AAC5B,WAAO,eAAakC,MAAM,CAACnC,CAAC,CAACG,IAAH,CAAnB,GAA4B,GAAnC;AACH,GANiB,CAAlB,CAxMyC,CAgNzC;;AACAgD,EAAAA,SAAS,CAACrB,SAAV,CAAoB,YAApB,EACCpC,IADD,CACM,UAASM,CAAT,EAAWC,CAAX,EAAa;AAAE,WAAOD,CAAC,CAACqD,MAAF,CAASC,MAAT,CAAgB,UAASC,EAAT,EAAYC,EAAZ,EAAe;AACvD,aAAOD,EAAE,CAACF,MAAH,KAAY,KAAnB;AACH,KAF2B,CAAP;AAElB,GAHH,EAICD,KAJD,GAKCL,MALD,CAKQ,MALR,EAMCC,IAND,CAMM,OANN,EAMe,mBANf,EAOCA,IAPD,CAOM,GAPN,EAOYf,QAAQ,GAACC,UAPrB,EAQCc,IARD,CAQM,GARN,EAQW,UAAShD,CAAT,EAAWC,CAAX,EAAa;AACpB,UAAMwD,aAAa,GAAG7E,EAAE,CAACiD,MAAH,CAAU,KAAK6B,UAAf,EAA2BC,KAA3B,GAAmCtC,eAAnC,GAAqDzC,EAAE,CAACiD,MAAH,CAAU,KAAK6B,UAAf,EAA2BC,KAA3B,GAAmCC,GAAnC,CAAuCrD,SAAlH;AACA,QAAIsD,EAAE,GAAG,CAAT;;AACA,QAAG5D,CAAC,GAAC,CAAL,EAAO;AACH,WAAI,IAAIuD,EAAE,GAAC,CAAX,EAAaA,EAAE,IAAEvD,CAAjB,EAAmBuD,EAAE,EAArB,EAAwB;AACpB,YAAG7D,OAAO,CAACyB,aAAR,KAAwB,YAA3B,EAAyCyC,EAAE,IAAIjF,EAAE,CAACiD,MAAH,CAAU,KAAK6B,UAAf,EAA2BC,KAA3B,GAAmCN,MAAnC,CAA0CG,EAAE,GAAC,CAA7C,EAAgD/C,gBAAtD;AACzC,YAAGd,OAAO,CAACyB,aAAR,KAAwB,gBAA3B,EAA6CyC,EAAE,IAAIjF,EAAE,CAACiD,MAAH,CAAU,KAAK6B,UAAf,EAA2BC,KAA3B,GAAmCN,MAAnC,CAA0CG,EAAE,GAAC,CAA7C,EAAgDjD,SAAtD;AAC7C,YAAGZ,OAAO,CAACyB,aAAR,KAAwB,SAA3B,EAAsCyC,EAAE,IAAIjF,EAAE,CAACiD,MAAH,CAAU,KAAK6B,UAAf,EAA2BC,KAA3B,GAAmCN,MAAnC,CAA0CG,EAAE,GAAC,CAA7C,EAAgDjD,SAAtD;AACzC;AACJ;;AACD,QAAIuD,CAAC,GAAG,CAAR;AACA,QAAGnE,OAAO,CAACyB,aAAR,KAAwB,YAA3B,EAAyC0C,CAAC,GAAI,MAAI9E,WAAW,CAACgB,CAAC,CAACS,gBAAH,CAAf,GAAqCzB,WAAW,CAAC6E,EAAD,CAArD;AACzC,QAAGlE,OAAO,CAACyB,aAAR,KAAwB,gBAA3B,EAA6C0C,CAAC,GAAI,MAAI9E,WAAW,CAACgB,CAAC,CAACO,SAAH,CAAf,GAA8BvB,WAAW,CAAC6E,EAAD,CAA9C;AAC7C,QAAGlE,OAAO,CAACyB,aAAR,KAAwB,SAA3B,EAAsC0C,CAAC,GAAI,MAAK,OAAK9D,CAAC,CAACO,SAAF,GAAYkD,aAAjB,CAAL,GAAwC,OAAKI,EAAE,GAACJ,aAAR,CAA7C;;AACtC,QAAGK,CAAH,EAAK;AAAE,aAAOA,CAAP;AAAW,KAAlB,MAAwB;AAAE,aAAO,CAAP;AAAS;;AAAA;AACtC,GAvBD,EAwBCd,IAxBD,CAwBM,OAxBN,EAwBef,QAAQ,GAAEA,QAAQ,GAACC,UAAT,GAAoB,CAxB7C,EAyBCc,IAzBD,CAyBM,QAzBN,EAyBgB,UAAShD,CAAT,EAAWC,CAAX,EAAa;AACzB,UAAMwD,aAAa,GAAG7E,EAAE,CAACiD,MAAH,CAAU,KAAK6B,UAAf,EAA2BC,KAA3B,GAAmCtC,eAAnC,GAAqDzC,EAAE,CAACiD,MAAH,CAAU,KAAK6B,UAAf,EAA2BC,KAA3B,GAAmCC,GAAnC,CAAuCrD,SAAlH;AACA,QAAIuD,CAAC,GAAG,CAAR;AACA,QAAGnE,OAAO,CAACyB,aAAR,KAAwB,YAA3B,EAAyC0C,CAAC,GAAG9E,WAAW,CAACgB,CAAC,CAACS,gBAAH,CAAf;AACzC,QAAGd,OAAO,CAACyB,aAAR,KAAwB,gBAA3B,EAA6C0C,CAAC,GAAG9E,WAAW,CAACgB,CAAC,CAACO,SAAH,CAAf;AAC7C,QAAGZ,OAAO,CAACyB,aAAR,KAAwB,SAA3B,EAAsC0C,CAAC,GAAI,OAAK9D,CAAC,CAACO,SAAF,GAAYkD,aAAjB,CAAL;;AACtC,QAAGK,CAAH,EAAK;AAAE,aAAOA,CAAP;AAAW,KAAlB,MAAwB;AAAE,aAAO,CAAP;AAAS;;AAAA;AACtC,GAhCD,EAiCCd,IAjCD,CAiCM,MAjCN,EAiCc,UAAShD,CAAT,EAAWC,CAAX,EAAa;AACvB,WAAOnB,MAAM,CAACc,OAAP,CAAeI,CAAC,CAACqD,MAAjB,CAAP;AACH,GAnCD,EAjNyC,CAsPzC;;AACAF,EAAAA,SAAS,CAACrB,SAAV,CAAoB,aAApB,EACCpC,IADD,CACM,UAASM,CAAT,EAAWC,CAAX,EAAa;AAAE,WAAOD,CAAC,CAACqD,MAAF,CAASC,MAAT,CAAgB,UAASC,EAAT,EAAYC,EAAZ,EAAe;AACvD,aAAOD,EAAE,CAACF,MAAH,KAAY,KAAnB;AACH,KAF2B,CAAP;AAElB,GAHH,EAICD,KAJD,GAKCL,MALD,CAKQ,MALR,EAMCC,IAND,CAMM,OANN,EAMe,oBANf,EAOCA,IAPD,CAOM,GAPN,EAOYf,QAAQ,GAACC,UAPrB,EAQCc,IARD,CAQM,GARN,EAQW,UAAShD,CAAT,EAAWC,CAAX,EAAa;AACpB,UAAM8D,cAAc,GAAGnF,EAAE,CAACiD,MAAH,CAAU,KAAK6B,UAAf,EAA2BC,KAA3B,GAAmCnC,gBAAnC,GAAsD5C,EAAE,CAACiD,MAAH,CAAU,KAAK6B,UAAf,EAA2BC,KAA3B,GAAmCC,GAAnC,CAAuCpD,UAApH;AACA,QAAIqD,EAAE,GAAG,CAAT;;AACA,QAAG5D,CAAC,GAAC,CAAL,EAAO;AACH,WAAI,IAAIuD,EAAE,GAAC,CAAX,EAAaA,EAAE,IAAEvD,CAAjB,EAAmBuD,EAAE,EAArB,EAAwB;AACpB,YAAG7D,OAAO,CAACyB,aAAR,KAAwB,YAA3B,EAAyCyC,EAAE,IAAIjF,EAAE,CAACiD,MAAH,CAAU,KAAK6B,UAAf,EAA2BC,KAA3B,GAAmCN,MAAnC,CAA0CG,EAAE,GAAC,CAA7C,EAAgD9C,iBAAtD;AACzC,YAAGf,OAAO,CAACyB,aAAR,KAAwB,gBAA3B,EAA6CyC,EAAE,IAAIjF,EAAE,CAACiD,MAAH,CAAU,KAAK6B,UAAf,EAA2BC,KAA3B,GAAmCN,MAAnC,CAA0CG,EAAE,GAAC,CAA7C,EAAgDhD,UAAtD;AAC7C,YAAGb,OAAO,CAACyB,aAAR,KAAwB,SAA3B,EAAsCyC,EAAE,IAAIjF,EAAE,CAACiD,MAAH,CAAU,KAAK6B,UAAf,EAA2BC,KAA3B,GAAmCN,MAAnC,CAA0CG,EAAE,GAAC,CAA7C,EAAgDhD,UAAtD;AACzC;AACJ;;AACD,QAAIsD,CAAC,GAAG,CAAR;AACA,QAAGnE,OAAO,CAACyB,aAAR,KAAwB,YAA3B,EAAyC0C,CAAC,GAAI,MAAI7E,YAAY,CAACe,CAAC,CAACU,iBAAH,CAAhB,GAAuCzB,YAAY,CAAC4E,EAAD,CAAnD,GAAyD,GAA9D;AACzC,QAAGlE,OAAO,CAACyB,aAAR,KAAwB,gBAA3B,EAA6C0C,CAAC,GAAI,MAAI7E,YAAY,CAACe,CAAC,CAACQ,UAAH,CAAhB,GAAgCvB,YAAY,CAAC4E,EAAD,CAA5C,GAAkD,GAAvD;AAC7C,QAAGlE,OAAO,CAACyB,aAAR,KAAwB,SAA3B,EAAsC0C,CAAC,GAAI,MAAK,OAAK9D,CAAC,CAACQ,UAAF,GAAauD,cAAlB,CAAL,GAA0C,OAAKF,EAAE,GAACE,cAAR,CAA1C,GAAoE,GAAzE;;AACtC,QAAGD,CAAH,EAAK;AAAE,aAAOA,CAAP;AAAW,KAAlB,MAAwB;AAAE,aAAO,CAAP;AAAS;;AAAA;AACtC,GAvBD,EAwBCd,IAxBD,CAwBM,OAxBN,EAwBef,QAAQ,GAAEA,QAAQ,GAACC,UAAT,GAAoB,CAxB7C,EAyBCc,IAzBD,CAyBM,QAzBN,EAyBgB,UAAShD,CAAT,EAAWC,CAAX,EAAa;AACzB,UAAM8D,cAAc,GAAGnF,EAAE,CAACiD,MAAH,CAAU,KAAK6B,UAAf,EAA2BC,KAA3B,GAAmCnC,gBAAnC,GAAsD5C,EAAE,CAACiD,MAAH,CAAU,KAAK6B,UAAf,EAA2BC,KAA3B,GAAmCC,GAAnC,CAAuCpD,UAApH;AACA,QAAIsD,CAAC,GAAG,CAAR;AACA,QAAGnE,OAAO,CAACyB,aAAR,KAAwB,YAA3B,EAAyC0C,CAAC,GAAG7E,YAAY,CAACe,CAAC,CAACU,iBAAH,CAAhB;AACzC,QAAGf,OAAO,CAACyB,aAAR,KAAwB,gBAA3B,EAA6C0C,CAAC,GAAG7E,YAAY,CAACe,CAAC,CAACQ,UAAH,CAAhB;AAC7C,QAAGb,OAAO,CAACyB,aAAR,KAAwB,SAA3B,EAAsC0C,CAAC,GAAI,OAAK9D,CAAC,CAACQ,UAAF,GAAauD,cAAlB,CAAL;;AACtC,QAAGD,CAAH,EAAK;AAAE,aAAOA,CAAP;AAAW,KAAlB,MAAwB;AAAE,aAAO,CAAP;AAAS;;AAAA;AACtC,GAhCD,EAiCCd,IAjCD,CAiCM,MAjCN,EAiCc,UAAShD,CAAT,EAAWC,CAAX,EAAa;AACvB,WAAOnB,MAAM,CAACc,OAAP,CAAeI,CAAC,CAACqD,MAAjB,CAAP;AACH,GAnCD;;AAqCA,MAAG1D,OAAO,CAACO,kBAAR,KAA6B,OAAhC,EAAwC;AACxCiD,IAAAA,SAAS,CAACrB,SAAV,CAAoB,UAApB,EACCkB,IADD,CACM,OADN,EACe,UAAShD,CAAT,EAAY;AACvB,UAAIG,IAAI,GAAGvB,EAAE,CAACiD,MAAH,CAAU,KAAK6B,UAAf,EAA2BC,KAA3B,GAAmCxD,IAA9C;AACA,UAAI6D,IAAI,GAAGpF,EAAE,CAACqF,SAAH,CAAaC,MAAb,CAAoB/D,IAApB,EAA0B,CAA1B,CAAX;AACA,aAAO,CAACgC,MAAM,CAAC6B,IAAD,CAAN,GAAc7B,MAAM,CAAChC,IAAD,CAArB,KAA8B,IAAE+B,UAAhC,CAAP;AACD,KALH,EAMCc,IAND,CAMM,GANN,EAMW,UAAShD,CAAT,EAAY;AACnB,UAAIG,IAAI,GAAGvB,EAAE,CAACiD,MAAH,CAAU,KAAK6B,UAAf,EAA2BC,KAA3B,GAAmCxD,IAA9C;AACA,UAAI6D,IAAI,GAAGpF,EAAE,CAACqF,SAAH,CAAaC,MAAb,CAAoB/D,IAApB,EAA0B,CAA1B,CAAX;AACA,aAAO,CAACgC,MAAM,CAAC6B,IAAD,CAAN,GAAc7B,MAAM,CAAChC,IAAD,CAArB,KAA8B+B,UAAU,GAAC,CAAzC,CAAP;AACD,KAVH;AAWC,GAxSwC,CA0SzC;AAEA;AAEA;AAEA;AAGA;;AAEH;AAED,OAAO,SAASiC,eAAT,CAAyBzE,IAAzB,EAA+B;AAElCiB,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AAEH;AAED,eAAenB,aAAf","sourcesContent":["import * as d3 from \"d3\";\nimport moment from 'moment';\nimport colors from './colors';\nimport {nFormatter} from './HelperFunctions';\n\nlet yScaleCases;\nlet yScaleDeaths;\nlet yScaleVaccines;\nlet yAxisCases;\nlet yAxisDeaths;\nlet yAxisVaccines;\nlet yScaleCasesAxis;\nlet yScaleDeathsAxis;\nlet yScaleVaccinesAxis;\n\nexport function drawTimechart(data, options) {\n\n    const regions = ['AF', 'ME', 'AP', 'EU', 'AM', 'OTH'];\n\n    const groupedData = [];\n\n    data.who_data.forEach(function(d,i){\n        if(!groupedData[d[options.timeline_frequency+'Total']])groupedData[d[options.timeline_frequency+'Total']] = {};\n        if(options.timeline_frequency==='day') groupedData[d[options.timeline_frequency+'Total']].date = d.date;\n        if(options.timeline_frequency==='week') groupedData[d[options.timeline_frequency+'Total']].date = moment(d.date).startOf('isoWeek').toDate();\n        if(options.timeline_frequency==='month') groupedData[d[options.timeline_frequency+'Total']].date = moment(d.date).startOf('month').toDate();\n        if(!groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region]) groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region] = {new_cases: 0, new_deaths: 0, cumulative_cases: 0, cumulative_deaths: 0};\n        groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].new_cases += d.new_cases;\n        groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].new_deaths += d.new_deaths;\n        groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].cumulative_cases = 0;\n    });\n\n    console.log(groupedData);\n\n    // // totals by date\n    // groupedData.forEach(function(d,i){\n    //     regions.forEach(function(dd,ii){\n    //         // if(dd!=='OTH') d.region.push({'region': dd, 'new_cases': d[dd].new_cases, 'new_deaths': d[dd].new_deaths, 'cumulative_cases': d[dd].cumulative_cases, 'cumulative_deaths': d[dd].cumulative_deaths});\n    //         if(i>0){\n    //             d[dd].cumulative_cases = groupedData[i][dd].new_cases + groupedData[i-1][dd].cumulative_cases;\n    //             d[dd].cumulative_deaths = groupedData[i][dd].new_deaths + groupedData[i-1][dd].cumulative_deaths;\n    //         } else {\n    //             d[dd].cumulative_cases = groupedData[i][dd].new_cases;\n    //             d[dd].cumulative_deaths = groupedData[i][dd].new_deaths;\n    //         }\n    //     })\n\n    //     d.total_new_cases = d.AF.new_cases + d.AP.new_cases + d.AM.new_cases + d.EU.new_cases + d.ME.new_cases + d.OTH.new_cases; \n    //     d.total_cumulative_cases = d.AF.cumulative_cases + d.AP.cumulative_cases + d.AM.cumulative_cases + d.EU.cumulative_cases + d.ME.cumulative_cases + d.OTH.cumulative_cases; \n    //     d.total_new_deaths = d.AF.new_deaths + d.AP.new_deaths + d.AM.new_deaths + d.EU.new_deaths + d.ME.new_deaths + d.OTH.new_deaths; \n    //     d.total_cumulative_deaths = d.AF.cumulative_deaths + d.AP.cumulative_deaths + d.AM.cumulative_deaths + d.EU.cumulative_deaths + d.ME.cumulative_deaths + d.OTH.cumulative_deaths; \n    //     d.region = [];\n\n    //     regions.forEach(function(dd,ii){\n    //         d.region.push({'region': dd, 'new_cases': d[dd].new_cases, 'new_deaths': d[dd].new_deaths, 'cumulative_cases': d[dd].cumulative_cases, 'cumulative_deaths': d[dd].cumulative_deaths});\n    //     })\n\n    // });\n\n    const vgroupedData = [];\n\n    data.vaccines_data.forEach(function(d,i){\n        if(!vgroupedData[d[options.timeline_frequency+'Total']])vgroupedData[d[options.timeline_frequency+'Total']] = {};\n        if(options.timeline_frequency==='day') vgroupedData[d[options.timeline_frequency+'Total']].date = d.date;\n        if(options.timeline_frequency==='week') vgroupedData[d[options.timeline_frequency+'Total']].date = moment(d.date).startOf('isoWeek').toDate();\n        if(options.timeline_frequency==='month') vgroupedData[d[options.timeline_frequency+'Total']].date = moment(d.date).startOf('month').toDate();\n        if(!vgroupedData[d[options.timeline_frequency+'Total']][d.ifrc_region]) vgroupedData[d[options.timeline_frequency+'Total']][d.ifrc_region] = {new_vaccines: 0, cumulative_vaccines: 0};\n        vgroupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].new_vaccines += d.new_vaccines;\n        vgroupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].cumulative_vaccines += d.cumulative_vaccines;\n    });\n\n    console.log(vgroupedData);\n\n    // totals by date\n    // vgroupedData.forEach(function(d,i){\n    //     regions.forEach(function(dd,ii){\n    //         // if(dd!=='OTH') d.region.push({'region': dd, 'new_cases': d[dd].new_cases, 'new_deaths': d[dd].new_deaths, 'cumulative_cases': d[dd].cumulative_cases, 'cumulative_deaths': d[dd].cumulative_deaths});\n    //         if(i>0){\n    //             d[dd].cumulative_vaccines = groupedData[i][dd].new_cases + groupedData[i-1][dd].cumulative_vaccines;\n    //             d[dd].cumulative_deaths = groupedData[i][dd].new_deaths + groupedData[i-1][dd].cumulative_deaths;\n    //         } else {\n    //             d[dd].cumulative_cases = groupedData[i][dd].new_cases;\n    //             d[dd].cumulative_deaths = groupedData[i][dd].new_deaths;\n    //         }\n    //     })\n\n    //     d.total_new_cases = d.AF.new_cases + d.AP.new_cases + d.AM.new_cases + d.EU.new_cases + d.ME.new_cases + d.OTH.new_cases; \n    //     d.total_cumulative_cases = d.AF.cumulative_cases + d.AP.cumulative_cases + d.AM.cumulative_cases + d.EU.cumulative_cases + d.ME.cumulative_cases + d.OTH.cumulative_cases; \n    //     d.total_new_deaths = d.AF.new_deaths + d.AP.new_deaths + d.AM.new_deaths + d.EU.new_deaths + d.ME.new_deaths + d.OTH.new_deaths; \n    //     d.total_cumulative_deaths = d.AF.cumulative_deaths + d.AP.cumulative_deaths + d.AM.cumulative_deaths + d.EU.cumulative_deaths + d.ME.cumulative_deaths + d.OTH.cumulative_deaths; \n    //     d.region = [];\n\n    //     regions.forEach(function(dd,ii){\n    //         d.region.push({'region': dd, 'new_cases': d[dd].new_cases, 'new_deaths': d[dd].new_deaths, 'cumulative_cases': d[dd].cumulative_cases, 'cumulative_deaths': d[dd].cumulative_deaths});\n    //     })\n\n    // });\n\n    const numIntervals = d3.max(data.who_data, function(d,i){\n        return d[options.timeline_frequency+'Total'];\n    });\n\n    const maxCases = d3.max(groupedData, function(d,i){\n        if(options.timeline_type==='non-cumulative') return d.total_new_cases;\n        if(options.timeline_type==='cumulative') return d.total_cumulative_cases;\n        if(options.timeline_type==='stacked') return 100;\n    })\n\n    const maxDeaths = d3.max(groupedData, function(d,i){\n        if(options.timeline_type==='non-cumulative') return d.total_new_deaths;\n        if(options.timeline_type==='cumulative') return d.total_cumulative_deaths;\n        if(options.timeline_type==='stacked') return 100;\n    })\n\n    // const maxVaccines = d3.max(vgroupedData, function(d,i){\n    //     if(options.timeline_type==='non-cumulative') return d.total_new_vaccines;\n    //     if(options.timeline_type==='cumulative') return d.total_cumulative_vaccines;\n    //     if(options.timeline_type==='stacked') return 100;\n    // })\n\n    // define date range\n    // const minDate = groupedData[0].date;\n    // const maxDate = groupedData[numIntervals].date;\n    const minDate = groupedData[0].date;\n    const maxDate = options.maxDate;\n\n    const svg = d3.select('#timechart_svg');\n    svg.selectAll('g').remove();\n    d3.selectAll('#layout .yAxis').remove();\n\n    const width = 2000;\n    const barWidth = width/numIntervals;\n\n    let barSpacing = 0.04; \n    if(options.timeline_frequency==='month') barSpacing = 0.03;\n    if(options.timeline_frequency==='day') barSpacing = 0;\n\n    // define scales\n\n    const xScale = d3.scaleTime()\n    .range([0,width])\n    .domain([minDate,maxDate]);\n\n    yScaleCases = d3.scaleLinear()\n    .range([0,140])\n    .domain([0,maxCases]);\n\n    yScaleCasesAxis = d3.scaleLinear()\n    .range([140,0])\n    .domain([0,maxCases]);\n\n    yScaleDeaths = d3.scaleLinear()\n    .range([0,140])\n    .domain([0,maxDeaths]);\n\n    yScaleDeathsAxis = d3.scaleLinear()\n    .range([140,0])\n    .domain([0,maxDeaths]);\n\n    // yScaleVaccines = d3.scaleLinear()\n    // .range([0,140])\n    // .domain([0,maxVaccines]);\n\n    // yScaleVaccinesAxis = d3.scaleLinear()\n    // .range([140,0])\n    // .domain([0,maxVaccines]);\n\n    // define axi\n    \n    yAxisCases = d3.axisRight()\n    .scale(yScaleCasesAxis)\n    .ticks(3)\n    .tickSize(3)\n    .tickPadding(3)\n    .tickFormat(function(d){\n        if(options.timeline_type=='stacked') return nFormatter(d)+'%';\n        return nFormatter(d);\n    })\n\n    yAxisDeaths = d3.axisRight()\n    .scale(yScaleDeathsAxis)\n    .ticks(3)\n    .tickSize(3)\n    .tickPadding(3)\n    .tickFormat(function(d){\n        if(options.timeline_type=='stacked') return nFormatter(d)+'%';\n        return nFormatter(d);\n    })\n\n    // yAxisVaccines = d3.axisRight()\n    // .scale(yScaleVaccinesAxis)\n    // .ticks(3)\n    // .tickSize(3)\n    // .tickPadding(3);\n    // .tickFormat(function(d){\n    //     if(options.timeline_type=='stacked') return nFormatter(d)+'%';\n    //     return nFormatter(d);\n    // })\n\n    // y-axis cases\n    var yAxisCasesText = d3.select('#layout').append(\"g\")\n    .attr(\"class\", \"yAxis axis\")\n    .attr(\"id\", \"casesAxis\")\n    .attr('transform', 'translate(620,363)')\n    .call(yAxisCases);\n\n    // y-axis deaths\n    var yAxisDeathsText = d3.select('#layout').append(\"g\")\n    .attr(\"class\", \"yAxis axis\")\n    .attr(\"id\", \"deathsAxis\")\n    .attr('transform', 'translate(620,534)')\n    .call(yAxisDeaths);\n\n    // CASES\n    // loop through groupedData and draw bars\n    const barGroups = svg.selectAll('.bar_group')\n    .data(groupedData)\n    .enter()\n    .append('g')\n    .attr('transform', function(d,i){ \n        return 'translate('+xScale(d.date)+')'\n    })\n\n    // CASES\n    barGroups.selectAll('.cases_bar')\n    .data(function(d,i){ return d.region.filter(function(dd,ii){\n        return dd.region!=='OTH';\n    })})\n    .enter()\n    .append('rect')\n    .attr('class', 'timeBar cases_bar')\n    .attr('x', (barWidth*barSpacing))\n    .attr('y', function(d,i){\n        const totalNewCases = d3.select(this.parentNode).datum().total_new_cases - d3.select(this.parentNode).datum().OTH.new_cases;\n        let dp = 0;\n        if(i>0){\n            for(let ii=1;ii<=i;ii++){\n                if(options.timeline_type==='cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].cumulative_cases;\n                if(options.timeline_type==='non-cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].new_cases;\n                if(options.timeline_type==='stacked') dp += d3.select(this.parentNode).datum().region[ii-1].new_cases;\n            }\n        }\n        let y = 0;\n        if(options.timeline_type==='cumulative') y = (140-yScaleCases(d.cumulative_cases)-(yScaleCases(dp)))\n        if(options.timeline_type==='non-cumulative') y = (140-yScaleCases(d.new_cases)-(yScaleCases(dp)))\n        if(options.timeline_type==='stacked') y = (140-(140*(d.new_cases/totalNewCases))-((140*(dp/totalNewCases))))\n        if(y){ return y; } else { return 0};\n    })\n    .attr('width', barWidth-(barWidth*barSpacing*2))\n    .attr('height', function(d,i){\n        const totalNewCases = d3.select(this.parentNode).datum().total_new_cases - d3.select(this.parentNode).datum().OTH.new_cases;\n        let y = 0;\n        if(options.timeline_type==='cumulative') y = yScaleCases(d.cumulative_cases);\n        if(options.timeline_type==='non-cumulative') y = yScaleCases(d.new_cases);\n        if(options.timeline_type==='stacked') y = (140*(d.new_cases/totalNewCases));\n        if(y){ return y; } else { return 0};\n    })\n    .attr('fill', function(d,i){\n        return colors.regions[d.region];\n    })\n\n    // DEATHS\n    barGroups.selectAll('.deaths_bar')\n    .data(function(d,i){ return d.region.filter(function(dd,ii){\n        return dd.region!=='OTH';\n    })})\n    .enter()\n    .append('rect')\n    .attr('class', 'timeBar deaths_bar')\n    .attr('x', (barWidth*barSpacing))\n    .attr('y', function(d,i){\n        const totalNewDeaths = d3.select(this.parentNode).datum().total_new_deaths - d3.select(this.parentNode).datum().OTH.new_deaths;\n        let dp = 0;\n        if(i>0){\n            for(let ii=1;ii<=i;ii++){\n                if(options.timeline_type==='cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].cumulative_deaths;\n                if(options.timeline_type==='non-cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].new_deaths;\n                if(options.timeline_type==='stacked') dp += d3.select(this.parentNode).datum().region[ii-1].new_deaths;\n            }\n        }\n        let y = 0;\n        if(options.timeline_type==='cumulative') y = (140-yScaleDeaths(d.cumulative_deaths)-(yScaleDeaths(dp))+170)\n        if(options.timeline_type==='non-cumulative') y = (140-yScaleDeaths(d.new_deaths)-(yScaleDeaths(dp))+170)\n        if(options.timeline_type==='stacked') y = (140-(140*(d.new_deaths/totalNewDeaths))-((140*(dp/totalNewDeaths)))+170)\n        if(y){ return y; } else { return 0};\n    })\n    .attr('width', barWidth-(barWidth*barSpacing*2))\n    .attr('height', function(d,i){\n        const totalNewDeaths = d3.select(this.parentNode).datum().total_new_deaths - d3.select(this.parentNode).datum().OTH.new_deaths;\n        let y = 0;\n        if(options.timeline_type==='cumulative') y = yScaleDeaths(d.cumulative_deaths);\n        if(options.timeline_type==='non-cumulative') y = yScaleDeaths(d.new_deaths);\n        if(options.timeline_type==='stacked') y = (140*(d.new_deaths/totalNewDeaths));\n        if(y){ return y; } else { return 0};\n    })\n    .attr('fill', function(d,i){\n        return colors.regions[d.region];\n    });\n\n    if(options.timeline_frequency==='month'){\n    barGroups.selectAll(\".timeBar\")\n    .attr(\"width\", function(d) {\n        var date = d3.select(this.parentNode).datum().date;\n        var next = d3.timeMonth.offset(date, 1);\n        return (xScale(next)- xScale(date))*(1-barSpacing);\n      })\n    .attr(\"x\", function(d) {\n        var date = d3.select(this.parentNode).datum().date;\n        var next = d3.timeMonth.offset(date, 1);\n        return (xScale(next)- xScale(date))*(barSpacing/2);\n      })\n    }\n\n    // 10\n\n    // 0.1\n\n    // 1 - 8 - 1\n    \n    // draw x-axis\n\n\n    // draw y-axis\n\n}\n\nexport function updateTimechart(data) {\n\n    console.log('update timechart');\n\n}\n\nexport default drawTimechart;\n"]},"metadata":{},"sourceType":"module"}