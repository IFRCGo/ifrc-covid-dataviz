{"ast":null,"code":"// import * as d3 from \"d3\";\nimport { max } from \"d3\";\nimport moment from 'moment';\nexport function ParseData(data, options) {\n  console.log('ParseData');\n  console.log(data);\n  const maxDate = moment(new Date(max(data.who_data, function (d) {\n    return d.Date_reported;\n  })));\n  let weekTotal = 0;\n  let weekCheck = 0;\n  let monthTotal = 0;\n  let monthCheck = 0; // data.who_data.sort(function(a,b){\n  //     return new Date(a.Date_reported) - new Date(b.Date_reported);\n  // });\n\n  data.who_data.forEach(function (d, i) {\n    d.date = new Date(d.Date_reported);\n    d.week = moment(d.date).week();\n    if (d.week != weekCheck) weekTotal++;\n    d.weekTotal = weekTotal;\n    d.month = d.date.getMonth();\n    if (d.month != monthCheck) monthTotal++;\n    d.monthTotal = monthTotal;\n    d.year = d.date.getFullYear();\n    d.new_cases = parseInt(d.New_cases);\n    d.new_deaths = parseInt(d.New_deaths);\n    d.cumulative_deaths = parseInt(d.Cumulative_deaths);\n    d.cumulative_cases = parseInt(d.Cumulative_cases);\n    data.equity_data.forEach(function (dd, ii) {\n      if (dd.country_iso2 === d.Country_code) {\n        d.ifrc_region = dd.ifrc_region;\n        d.country_name = dd.country_name;\n      }\n    });\n    delete d.Date_reported;\n    delete d.New_cases;\n    delete d.New_deaths;\n    delete d.Cumulative_deaths;\n    delete d.Cumulative_cases;\n    delete d.Country_code;\n    delete d.WHO_region;\n    delete d.Country;\n    weekCheck = d.week;\n    monthCheck = d.month;\n  });\n  console.log(data.who_data[1000]);\n}\n_c = ParseData;\nexport default ParseData;\n\nvar _c;\n\n$RefreshReg$(_c, \"ParseData\");","map":{"version":3,"sources":["/Users/matthewsmawfield/www/ifrc-covid-dataviz/src/ParseData.js"],"names":["max","moment","ParseData","data","options","console","log","maxDate","Date","who_data","d","Date_reported","weekTotal","weekCheck","monthTotal","monthCheck","forEach","i","date","week","month","getMonth","year","getFullYear","new_cases","parseInt","New_cases","new_deaths","New_deaths","cumulative_deaths","Cumulative_deaths","cumulative_cases","Cumulative_cases","equity_data","dd","ii","country_iso2","Country_code","ifrc_region","country_name","WHO_region","Country"],"mappings":"AAAA;AACA,SAAQA,GAAR,QAAkB,IAAlB;AAEA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,OAAO,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,OAAzB,EAAkC;AAErCC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AAEA,QAAMI,OAAO,GAAGN,MAAM,CAAC,IAAIO,IAAJ,CAASR,GAAG,CAACG,IAAI,CAACM,QAAN,EAAgB,UAASC,CAAT,EAAW;AAC1D,WAAOA,CAAC,CAACC,aAAT;AACH,GAFkC,CAAZ,CAAD,CAAtB;AAIA,MAAIC,SAAS,GAAG,CAAhB;AACA,MAAIC,SAAS,GAAG,CAAhB;AAEA,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAIC,UAAU,GAAG,CAAjB,CAbqC,CAerC;AACA;AACA;;AAEAZ,EAAAA,IAAI,CAACM,QAAL,CAAcO,OAAd,CAAsB,UAASN,CAAT,EAAWO,CAAX,EAAa;AAE/BP,IAAAA,CAAC,CAACQ,IAAF,GAAS,IAAIV,IAAJ,CAASE,CAAC,CAACC,aAAX,CAAT;AACAD,IAAAA,CAAC,CAACS,IAAF,GAASlB,MAAM,CAACS,CAAC,CAACQ,IAAH,CAAN,CAAeC,IAAf,EAAT;AACA,QAAGT,CAAC,CAACS,IAAF,IAAQN,SAAX,EAAsBD,SAAS;AAC/BF,IAAAA,CAAC,CAACE,SAAF,GAAcA,SAAd;AACAF,IAAAA,CAAC,CAACU,KAAF,GAAUV,CAAC,CAACQ,IAAF,CAAOG,QAAP,EAAV;AACA,QAAGX,CAAC,CAACU,KAAF,IAASL,UAAZ,EAAwBD,UAAU;AAClCJ,IAAAA,CAAC,CAACI,UAAF,GAAeA,UAAf;AACAJ,IAAAA,CAAC,CAACY,IAAF,GAASZ,CAAC,CAACQ,IAAF,CAAOK,WAAP,EAAT;AACAb,IAAAA,CAAC,CAACc,SAAF,GAAcC,QAAQ,CAACf,CAAC,CAACgB,SAAH,CAAtB;AACAhB,IAAAA,CAAC,CAACiB,UAAF,GAAeF,QAAQ,CAACf,CAAC,CAACkB,UAAH,CAAvB;AACAlB,IAAAA,CAAC,CAACmB,iBAAF,GAAsBJ,QAAQ,CAACf,CAAC,CAACoB,iBAAH,CAA9B;AACApB,IAAAA,CAAC,CAACqB,gBAAF,GAAqBN,QAAQ,CAACf,CAAC,CAACsB,gBAAH,CAA7B;AACA7B,IAAAA,IAAI,CAAC8B,WAAL,CAAiBjB,OAAjB,CAAyB,UAASkB,EAAT,EAAYC,EAAZ,EAAe;AACpC,UAAGD,EAAE,CAACE,YAAH,KAAkB1B,CAAC,CAAC2B,YAAvB,EAAoC;AAChC3B,QAAAA,CAAC,CAAC4B,WAAF,GAAgBJ,EAAE,CAACI,WAAnB;AACA5B,QAAAA,CAAC,CAAC6B,YAAF,GAAiBL,EAAE,CAACK,YAApB;AACH;AACJ,KALD;AAMA,WAAO7B,CAAC,CAACC,aAAT;AACA,WAAOD,CAAC,CAACgB,SAAT;AACA,WAAOhB,CAAC,CAACkB,UAAT;AACA,WAAOlB,CAAC,CAACoB,iBAAT;AACA,WAAOpB,CAAC,CAACsB,gBAAT;AACA,WAAOtB,CAAC,CAAC2B,YAAT;AACA,WAAO3B,CAAC,CAAC8B,UAAT;AACA,WAAO9B,CAAC,CAAC+B,OAAT;AACA5B,IAAAA,SAAS,GAAGH,CAAC,CAACS,IAAd;AACAJ,IAAAA,UAAU,GAAGL,CAAC,CAACU,KAAf;AACH,GA9BD;AAgCAf,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACM,QAAL,CAAc,IAAd,CAAZ;AACH;KApDeP,S;AAsDhB,eAAeA,SAAf","sourcesContent":["// import * as d3 from \"d3\";\nimport {max} from \"d3\";\n\nimport moment from 'moment';\n\nexport function ParseData(data, options) {\n\n    console.log('ParseData');\n    console.log(data);\n\n    const maxDate = moment(new Date(max(data.who_data, function(d){\n        return d.Date_reported;\n    })));\n    \n    let weekTotal = 0;\n    let weekCheck = 0;\n\n    let monthTotal = 0;\n    let monthCheck = 0;\n\n    // data.who_data.sort(function(a,b){\n    //     return new Date(a.Date_reported) - new Date(b.Date_reported);\n    // });\n\n    data.who_data.forEach(function(d,i){\n\n        d.date = new Date(d.Date_reported);\n        d.week = moment(d.date).week();\n        if(d.week!=weekCheck) weekTotal++;\n        d.weekTotal = weekTotal;\n        d.month = d.date.getMonth();\n        if(d.month!=monthCheck) monthTotal++;\n        d.monthTotal = monthTotal;\n        d.year = d.date.getFullYear();\n        d.new_cases = parseInt(d.New_cases);\n        d.new_deaths = parseInt(d.New_deaths);\n        d.cumulative_deaths = parseInt(d.Cumulative_deaths);\n        d.cumulative_cases = parseInt(d.Cumulative_cases);\n        data.equity_data.forEach(function(dd,ii){\n            if(dd.country_iso2===d.Country_code){\n                d.ifrc_region = dd.ifrc_region;\n                d.country_name = dd.country_name;\n            }\n        })\n        delete d.Date_reported;\n        delete d.New_cases;\n        delete d.New_deaths;\n        delete d.Cumulative_deaths;\n        delete d.Cumulative_cases;\n        delete d.Country_code;\n        delete d.WHO_region;\n        delete d.Country;\n        weekCheck = d.week;\n        monthCheck = d.month;\n    })\n\n    console.log(data.who_data[1000]);\n}\n\nexport default ParseData;\n"]},"metadata":{},"sourceType":"module"}