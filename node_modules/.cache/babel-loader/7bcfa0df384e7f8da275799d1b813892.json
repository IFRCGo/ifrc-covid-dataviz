{"ast":null,"code":"import { min, max, group, flatGroup } from \"d3\";\nimport moment from 'moment';\nimport clone from 'just-clone';\nimport { data } from \"jquery\";\nexport function ParseData(data, options) {\n  //*********************\n  // create regions\n  //*********************\n  data.regions = [{\n    sort: 5,\n    'code': 'AF',\n    cumulative_cases: 0,\n    cumulative_deaths: 0,\n    cumulative_vaccines: 0,\n    population: 0\n  }, {\n    sort: 3,\n    'code': 'ME',\n    cumulative_cases: 0,\n    cumulative_deaths: 0,\n    cumulative_vaccines: 0,\n    population: 0\n  }, {\n    sort: 4,\n    'code': 'AP',\n    cumulative_cases: 0,\n    cumulative_deaths: 0,\n    cumulative_vaccines: 0,\n    population: 0\n  }, {\n    sort: 2,\n    'code': 'EU',\n    cumulative_cases: 0,\n    cumulative_deaths: 0,\n    cumulative_vaccines: 0,\n    population: 0\n  }, {\n    sort: 1,\n    'code': 'AM',\n    cumulative_cases: 0,\n    cumulative_deaths: 0,\n    cumulative_vaccines: 0,\n    population: 0\n  }, {\n    sort: 6,\n    'code': 'OTH',\n    cumulative_cases: 0,\n    cumulative_deaths: 0,\n    cumulative_vaccines: 0,\n    population: 0\n  }];\n  data.regions.sort(function (a, b) {\n    return a.sort - b.sort;\n  }); //*********************\n  // clean up country data\n  //*********************\n\n  data.country = data.equity_data;\n  data.country.forEach(function (d, i) {\n    // if not an IFRC region then set to OTH\n    if (d.ifrc_region != 'AF' && d.ifrc_region != 'ME' && d.ifrc_region != 'AP' && d.ifrc_region != 'EU' && d.ifrc_region != 'AM') {\n      d.ifrc_region = 'OTH';\n    } // parse country population\n\n\n    d.population = parseInt(d.population) || 0;\n    var pop = 0;\n    if (d.population > 0) pop = d.population; // sum up ifrc region population \n\n    data.regions.forEach(function (dd, ii) {\n      if (dd.code == d.ifrc_region) {\n        dd.population += pop;\n      }\n    }); // get WHO vaccine data (vaccine types used, vaccines_per_100\n\n    d.vaccines_used = [];\n    d.avg_tests_per_1000 = parseFloat(d.avg_tests_per_1000) || 0;\n    d.number_vaccine_types_used = 0;\n    d.vaccines_per_100 = 0;\n    d.number_vaccine_types_used = parseInt(d.avg_tests_per_1000);\n    data.vaccines_who_data.forEach(function (dd, ii) {\n      if (d.country_iso3 == dd.ISO3) {\n        // d.data_updated = moment(dd.DATE_UPDATED).startOf('day').toDate();\n        d.number_vaccine_types_used = parseInt(dd.NUMBER_VACCINES_TYPES_USED);\n        d.vaccines_per_100 = parseFloat(dd.TOTAL_VACCINATIONS_PER100);\n        if (isNaN(d.vaccines_per_100)) d.vaccines_per_100 = 0;\n        d.vaccines_used = dd.VACCINES_USED.split(',').map(function (item) {\n          return item.trim();\n        });\n      }\n    }); // get ns involvement in activities\n\n    d.ns_involvement = 0;\n    data.self_assessment.forEach(function (dd, ii) {\n      if (d.country_iso3 == dd.ISO3) {\n        if (dd['Final involvement'] == 'Yes') d.ns_involvement = 1;\n      }\n    });\n    d.vaccine_acceptance_percent = 0; // get vaccine acceptance\n\n    data.vaccine_acceptance.forEach(function (dd, ii) {\n      if (d.country_iso3 == dd.iso3) {\n        // if(dd['Final involvement']=='Yes') d.ns_involvement = 1;\n        d.vaccine_acceptance_percent = parseFloat(dd.indicator_value) * 100;\n        d.vaccine_acceptance_population = parseInt(dd.population_size);\n      }\n    }); // get contrat tracing\n\n    if (d.contract_tracing.toLowerCase() == 'all' || d.contract_tracing.toLowerCase() == 'some') {\n      d.contract_tracing = 1;\n    } else {\n      d.contract_tracing = 0;\n    } // parse equity data inform/hdi indexes\n\n\n    if (d.hdi_category.match(/very high/i)) {\n      d.hdi_category = 'very-high';\n    } else if (d.hdi_category.match(/high/i)) {\n      d.hdi_category = 'high';\n    } else if (d.hdi_category.match(/medium/i)) {\n      d.hdi_category = 'medium';\n    } else if (d.hdi_category.match(/low/i)) {\n      d.hdi_category = 'low';\n    }\n\n    if (d.inform_severity.match(/very high/i)) {\n      d.inform_severity = 'very-high';\n    } else if (d.inform_severity.match(/high/i)) {\n      d.inform_severity = 'high';\n    } else if (d.inform_severity.match(/medium/i)) {\n      d.inform_severity = 'medium';\n    } else if (d.inform_severity.match(/low/i)) {\n      d.inform_severity = 'low';\n    } else if (d.inform_severity.match(/no/i)) {\n      d.inform_severity = 'no-score';\n    }\n  }); //*********************\n  // get min/max dates\n  //*********************\n  // get min and max dates from daily who data\n\n  let maxDate = moment(new Date(max(data.who_data, function (d) {\n    return d.Date_reported;\n  }))).startOf('day'); // override min date to week start\n\n  data.min_date = moment('2019-12-31').startOf('day').toDate();\n  let maxDateVaccines = moment(new Date(max(data.vaccines_data, function (d) {\n    return d.date;\n  }))).startOf('day');\n  data.min_vaccine_date = moment(new Date(min(data.vaccines_data, function (d) {\n    return d.date;\n  }))).startOf('day').toDate();\n\n  if (maxDateVaccines.unix() > maxDate.unix()) {\n    maxDate = maxDateVaccines;\n  }\n\n  data.max_date = maxDate.toDate(); //*********************\n  // parse who data\n  //*********************\n\n  data.who_data.forEach(function (d, i) {\n    // parse dates\n    d.date = moment(d.Date_reported).startOf('day').toDate(); // override country name and code\n\n    d.country_code = d.Country_code;\n    d.country_name = null;\n    data.country.forEach(function (dd, ii) {\n      if (dd.country_iso2 === d.country_code) {\n        d.ifrc_region = dd.ifrc_region;\n        d.country_name = dd.country_name;\n      }\n    }); // parse cases and deaths\n\n    d.cumulative_deaths = parseInt(d.Cumulative_deaths);\n    d.cumulative_cases = parseInt(d.Cumulative_cases);\n    d.new_cases = parseInt(d.New_cases);\n    d.new_deaths = parseInt(d.New_deaths);\n  }); // sort by date\n\n  data.who_data.sort(function (a, b) {\n    return new Date(a.date) - new Date(b.Date_reported);\n  }); //*************************\n  // check for missing who dates and fill in the max date\n  //*************************\n  // group by country\n\n  var whoDataGrouped = flatGroup(data.who_data, d => d.country_code);\n  var datesToAdd = [];\n  whoDataGrouped.forEach(function (d, i) {\n    var maxDate = moment(max(d[1], d => d.date)).startOf('day');\n    var lastRecord = clone(d[1][d[1].length - 1]);\n\n    if (maxDate.unix() != data.max_date.getTime()) {\n      lastRecord.date = new Date(data.max_date);\n      lastRecord.new_cases = 0;\n      lastRecord.new_deaths = 0;\n      datesToAdd.push(lastRecord);\n    }\n  });\n  data.who_data.push(...datesToAdd);\n  data.who_data.sort(function (a, b) {\n    return new Date(a.date) - new Date(b.date);\n  }); // set count for incremental day/week/month numbers\n\n  let dayTotal = -1;\n  let dayCheck = 0;\n  let weekTotal = -1;\n  let weekCheck = -1;\n  let monthTotal = 0;\n  let monthCheck = 0; // parse and clean up WHO data\n\n  let whoCountryCodes = [];\n  data.who_data.forEach(function (d, i) {\n    // parse dates\n    // d.date = moment(d.Date_reported).startOf('day').toDate();\n    d.dayOfYear = moment(d.date).dayOfYear();\n    if (d.dayOfYear !== dayCheck) dayTotal++;\n    d.dayTotal = dayTotal;\n    d.week = moment(d.date).isoWeek();\n    if (d.week !== weekCheck) weekTotal++;\n    d.weekTotal = weekTotal;\n    d.month = d.date.getMonth();\n    if (d.month !== monthCheck) monthTotal++;\n    d.monthTotal = monthTotal;\n    d.year = d.date.getFullYear();\n    d.week_start = new Date(moment(d.date).startOf('isoWeek').startOf('day').toDate());\n    d.month_start = new Date(moment(d.date).startOf('month').startOf('day').toDate()); // set negative values to zero for new cases/deaths\n\n    if (d.new_deaths < 0) d.new_deaths = 0;\n    if (d.new_cases < 0) d.new_cases = 0;\n    if (d.ifrc_region == undefined) d.ifrc_region = 'OTH'; // add country code to array so we know it is used\n\n    if (!whoCountryCodes.includes(d.country_code) && d.country_code.length > 1) {\n      whoCountryCodes.push(d.country_code);\n    } // delete old unused keys\n\n\n    delete d.Date_reported;\n    delete d.Country;\n    delete d.New_cases;\n    delete d.New_deaths;\n    delete d.Country_code;\n    delete d.Cumulative_deaths;\n    delete d.Cumulative_cases;\n    delete d.Country_code;\n    delete d.WHO_region;\n    delete d.Country; // set incremental count\n\n    dayCheck = d.dayOfYear;\n    weekCheck = d.week;\n    monthCheck = d.month;\n  }); //*********************\n  // parse vaccine cumulative data\n  //*********************\n  // clean up values\n\n  data.vaccines_data.forEach(function (d, i) {\n    d.date = moment(d.date).startOf('day').toDate();\n  });\n  data.vaccines_data.sort(function (a, b) {\n    return new Date(a.date) - new Date(b.date);\n  }); // filter out vaccine data to only include records with ISO3 country codes\n\n  data.vaccines_data = data.vaccines_data.filter(function (d, i) {\n    return d.iso_code.length === 3 && d.total_vaccinations > 0;\n  });\n  var vaccineDataByCountry = flatGroup(data.vaccines_data, d => d.iso_code); // fill out missing vaccinations date records (extend cumulative from last data date)\n\n  var newDays = [];\n  var hasDays = [];\n  var lastRecord = {};\n  var vDataFlat = [];\n  vaccineDataByCountry.forEach(function (d, i) {\n    var minDt = new Date(data.min_date);\n    var maxDt = new Date(data.max_date);\n    hasDays = [];\n    newDays = []; // set the last recorded date fo this country\n\n    d.lastDate = moment(max(d[1], function (d, i) {\n      return d.date;\n    })).startOf('day').toDate(); // reset country name and code using country table\n\n    data.country.forEach(function (dd, ii) {\n      if (dd.country_iso3 === d[0]) {\n        d.ifrc_region = dd.ifrc_region;\n        d.country_name = dd.country_name;\n        d.country_code = dd.country_iso2;\n        dd.data_updated = d.lastDate;\n      }\n    }); // loop through all date records for this country and add to hasDays array\n\n    d[1].forEach(function (dd, ii) {\n      dd.total_vaccinations = parseInt(dd.total_vaccinations);\n      dd.daily_vaccinations = parseInt(dd.daily_vaccinations);\n      hasDays.push(new Date(dd.date).getTime());\n    }); // fill in missing dates\n    // d[1].forEach(function(dd,ii){\n\n    for (var day = new Date(data.min_vaccine_date); day <= data.max_date; day.setDate(day.getDate() + 1)) {\n      var newDay = new Date(day).getTime();\n\n      if (!hasDays.includes(newDay)) {\n        newDays.push({\n          date: new Date(day),\n          total_vaccinations: null,\n          daily_vaccinations: 0\n        });\n      }\n    } // });\n\n\n    d[1].push(...newDays);\n    d[1].sort(function (a, b) {\n      return new Date(a.date) - new Date(b.date);\n    }); // loop through dates and fill in missing cumulative values\n\n    var totalVac = 0;\n    var totalVac100 = 0;\n    var people_vaccinated_per_hundred = 0;\n    var people_fully_vaccinated_per_hundred = 0;\n    d[1].forEach(function (dd, ii) {\n      if (dd.total_vaccinations) {\n        totalVac = dd.total_vaccinations;\n      } else {\n        dd.total_vaccinations = totalVac;\n      }\n\n      if (dd.total_vaccinations_per_hundred) {\n        totalVac100 = dd.total_vaccinations_per_hundred;\n      } else {\n        dd.total_vaccinations_per_hundred = totalVac100;\n      }\n\n      if (dd.people_vaccinated_per_hundred) {\n        people_vaccinated_per_hundred = dd.people_vaccinated_per_hundred;\n      } else {\n        dd.people_vaccinated_per_hundred = people_vaccinated_per_hundred;\n      }\n\n      if (dd.people_fully_vaccinated_per_hundred) {\n        people_fully_vaccinated_per_hundred = dd.people_fully_vaccinated_per_hundred;\n      } else {\n        dd.people_fully_vaccinated_per_hundred = people_fully_vaccinated_per_hundred;\n      }\n\n      var countryName;\n\n      if (d.country_name == null) {\n        countryName = d[0];\n      } else {\n        countryName = d.country_name;\n      }\n\n      var dailyVac = 0;\n      if (dd.daily_vaccinations && dd.daily_vaccinations > 0) dailyVac = dd.daily_vaccinations;\n      vDataFlat.push({\n        date: new Date(dd.date),\n        lastDate: d.lastDate,\n        total_vaccinations_per_hundred: parseFloat(totalVac100),\n        people_vaccinated_per_hundred: parseFloat(people_vaccinated_per_hundred),\n        people_fully_vaccinated_per_hundred: parseFloat(people_fully_vaccinated_per_hundred),\n        iso_code: d[0],\n        ifrc_region: d.ifrc_region,\n        country_name: countryName,\n        country_code: d.country_code,\n        total_vaccinations: totalVac,\n        daily_vaccinations: dailyVac\n      });\n    });\n  });\n  data.vaccines_data = vDataFlat;\n  data.vaccines_data.sort(function (a, b) {\n    return new Date(a.date) - new Date(b.date);\n  }); // reset count for incremental day/week/month numbers\n\n  dayTotal = -1;\n  dayCheck = 0;\n  weekTotal = -1;\n  weekCheck = -1;\n  monthTotal = 0;\n  monthCheck = 0;\n  data.vaccines_data.forEach(function (d, i) {\n    if (d.ifrc_region == undefined) d.ifrc_region = 'OTH';\n    d.dayOfYear = moment(d.date).dayOfYear();\n    if (d.dayOfYear !== dayCheck) dayTotal++;\n    d.dayTotal = dayTotal;\n    d.week = moment(d.date).isoWeek();\n    if (d.week !== weekCheck) weekTotal++;\n    d.weekTotal = weekTotal;\n    d.month = d.date.getMonth();\n    if (d.month !== monthCheck) monthTotal++;\n    d.monthTotal = monthTotal;\n    d.year = d.date.getFullYear();\n    dayCheck = d.dayOfYear;\n    weekCheck = d.week;\n    monthCheck = d.month;\n    d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n    d.month_start = new Date(moment(d.date).startOf('month').toDate());\n  }); //*********************\n  // add most recent owid vaccine data record to data.country\n  //*********************\n  // group who data by country\n\n  var vaccineDataByCountry = flatGroup(data.vaccines_data, d => d.country_code); //*********************\n  // add most recent records from both datasets to data.country\n  //*********************\n  // first group who data by country\n\n  var whoDataByCountry = flatGroup(data.who_data, d => d.country_code);\n  data.country.forEach(function (d, i) {\n    d.cumulative_cases_per_100k = 0;\n    d.cumulative_deaths_per_100k = 0;\n    d.cumulative_vaccines_per_100k = 0;\n    d.people_fully_vaccinated_per_hundred = 0;\n    d.people_vaccinated_per_hundred = 0;\n    d.total_vaccinations_per_hundred = 0;\n    var countryCode = d.country_iso2; // calculate latest date and at weekly intervals (for bi-weekly percent change calculation)\n\n    whoDataByCountry.forEach(function (dd, ii) {\n      if (dd[0] == countryCode) {\n        d.who_daily_latest = dd[1][dd[1].length - 1];\n        d.who_daily_7_days = dd[1][dd[1].length - 7];\n        d.who_daily_14_days = dd[1][dd[1].length - 14];\n        d.who_daily_21_days = dd[1][dd[1].length - 21];\n        d.who_daily_28_days = dd[1][dd[1].length - 28];\n        d.cumulative_cases_per_100k = d.who_daily_latest.cumulative_cases / (d.population / 100000);\n        d.cumulative_deaths_per_100k = d.who_daily_latest.cumulative_deaths / (d.population / 100000);\n        d.cumulative_cases = d.who_daily_latest.cumulative_cases;\n        d.cumulative_deaths = d.who_daily_latest.cumulative_deaths;\n        d.cumulative_deaths_7_days = d.who_daily_7_days.cumulative_deaths;\n        d.cumulative_deaths_14_days = d.who_daily_14_days.cumulative_deaths;\n        d.cumulative_deaths_21_days = d.who_daily_21_days.cumulative_deaths;\n        d.cumulative_deaths_28_days = d.who_daily_28_days.cumulative_deaths;\n        d.cumulative_cases_7_days = d.who_daily_7_days.cumulative_cases;\n        d.cumulative_cases_14_days = d.who_daily_14_days.cumulative_cases;\n        d.cumulative_cases_21_days = d.who_daily_21_days.cumulative_cases;\n        d.cumulative_cases_28_days = d.who_daily_28_days.cumulative_cases;\n        var percentChange = parseFloat((d.cumulative_cases - d.cumulative_cases_14_days - (d.cumulative_cases_14_days - d.cumulative_cases_28_days)) / d.cumulative_cases_28_days);\n\n        if (isFinite(percentChange)) {\n          d.percent_change = percentChange;\n        } else {\n          d.percent_change = 0;\n        }\n      }\n    });\n    vaccineDataByCountry.forEach(function (dd, ii) {\n      if (dd[0] == countryCode) {\n        if (typeof (dd[0] != 'undefined')) {\n          d.vaccine_daily_latest = dd[1][dd[1].length - 1];\n          d.cumulative_vaccines_per_100k = d.vaccine_daily_latest.total_vaccinations / (d.population / 100000);\n          d.people_fully_vaccinated_per_hundred = d.vaccine_daily_latest.people_fully_vaccinated_per_hundred;\n          d.people_vaccinated_per_hundred = d.vaccine_daily_latest.people_vaccinated_per_hundred;\n          d.total_vaccinations_per_hundred = d.vaccine_daily_latest.total_vaccinations_per_hundred;\n          d.total_vaccinations = d.vaccine_daily_latest.total_vaccinations;\n        }\n      }\n    });\n    if (!isFinite(d.cumulative_cases_per_100k)) d.cumulative_cases_per_100k = 0;\n    if (!isFinite(d.cumulative_deaths_per_100k)) d.cumulative_deaths_per_100k = 0;\n    if (!isFinite(d.cumulative_vaccines_per_100k)) d.cumulative_vaccines_per_100k = 0;\n    d.country_code = d.country_iso2;\n  });\n  data.original = clone(data);\n}\n_c = ParseData;\nexport default ParseData;\n\nvar _c;\n\n$RefreshReg$(_c, \"ParseData\");","map":{"version":3,"sources":["/Users/matthewsmawfield/www/ifrc-covid-dataviz/src/ParseData.js"],"names":["min","max","group","flatGroup","moment","clone","data","ParseData","options","regions","sort","cumulative_cases","cumulative_deaths","cumulative_vaccines","population","a","b","country","equity_data","forEach","d","i","ifrc_region","parseInt","pop","dd","ii","code","vaccines_used","avg_tests_per_1000","parseFloat","number_vaccine_types_used","vaccines_per_100","vaccines_who_data","country_iso3","ISO3","NUMBER_VACCINES_TYPES_USED","TOTAL_VACCINATIONS_PER100","isNaN","VACCINES_USED","split","map","item","trim","ns_involvement","self_assessment","vaccine_acceptance_percent","vaccine_acceptance","iso3","indicator_value","vaccine_acceptance_population","population_size","contract_tracing","toLowerCase","hdi_category","match","inform_severity","maxDate","Date","who_data","Date_reported","startOf","min_date","toDate","maxDateVaccines","vaccines_data","date","min_vaccine_date","unix","max_date","country_code","Country_code","country_name","country_iso2","Cumulative_deaths","Cumulative_cases","new_cases","New_cases","new_deaths","New_deaths","whoDataGrouped","datesToAdd","lastRecord","length","getTime","push","dayTotal","dayCheck","weekTotal","weekCheck","monthTotal","monthCheck","whoCountryCodes","dayOfYear","week","isoWeek","month","getMonth","year","getFullYear","week_start","month_start","undefined","includes","Country","WHO_region","filter","iso_code","total_vaccinations","vaccineDataByCountry","newDays","hasDays","vDataFlat","minDt","maxDt","lastDate","data_updated","daily_vaccinations","day","setDate","getDate","newDay","totalVac","totalVac100","people_vaccinated_per_hundred","people_fully_vaccinated_per_hundred","total_vaccinations_per_hundred","countryName","dailyVac","whoDataByCountry","cumulative_cases_per_100k","cumulative_deaths_per_100k","cumulative_vaccines_per_100k","countryCode","who_daily_latest","who_daily_7_days","who_daily_14_days","who_daily_21_days","who_daily_28_days","cumulative_deaths_7_days","cumulative_deaths_14_days","cumulative_deaths_21_days","cumulative_deaths_28_days","cumulative_cases_7_days","cumulative_cases_14_days","cumulative_cases_21_days","cumulative_cases_28_days","percentChange","isFinite","percent_change","vaccine_daily_latest","original"],"mappings":"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","sourcesContent":["import {min,max,group,flatGroup} from \"d3\";\nimport moment from 'moment';\nimport clone from 'just-clone';\nimport { data } from \"jquery\";\n\nexport function ParseData(data, options) {\n\n    //*********************\n    // create regions\n    //*********************\n    data.regions = [\n        {sort: 5, 'code': 'AF', cumulative_cases: 0, cumulative_deaths: 0, cumulative_vaccines: 0, population: 0},\n        {sort: 3, 'code': 'ME', cumulative_cases: 0, cumulative_deaths: 0, cumulative_vaccines: 0, population: 0},\n        {sort: 4, 'code': 'AP', cumulative_cases: 0, cumulative_deaths: 0, cumulative_vaccines: 0, population: 0},\n        {sort: 2, 'code': 'EU', cumulative_cases: 0, cumulative_deaths: 0, cumulative_vaccines: 0, population: 0},\n        {sort: 1, 'code': 'AM', cumulative_cases: 0, cumulative_deaths: 0, cumulative_vaccines: 0, population: 0},\n        {sort: 6, 'code': 'OTH', cumulative_cases: 0, cumulative_deaths: 0, cumulative_vaccines: 0, population: 0}\n    ]\n\n    data.regions.sort(function(a,b){\n        return (a.sort) - (b.sort);\n    });\n\n    //*********************\n    // clean up country data\n    //*********************\n    data.country = data.equity_data;\n    data.country.forEach(function(d,i){\n\n        // if not an IFRC region then set to OTH\n        if((d.ifrc_region!='AF')&&(d.ifrc_region!='ME')&&(d.ifrc_region!='AP')&&(d.ifrc_region!='EU')&&(d.ifrc_region!='AM')){\n            d.ifrc_region = 'OTH';\n        }\n        \n        // parse country population\n        d.population = parseInt(d.population)||0;\n        var pop = 0;\n        if(d.population>0) pop = d.population;\n\n        // sum up ifrc region population \n        data.regions.forEach(function(dd,ii){\n            if(dd.code==d.ifrc_region){\n                dd.population += pop\n            }\n        });\n\n        // get WHO vaccine data (vaccine types used, vaccines_per_100\n        d.vaccines_used = [];\n        d.avg_tests_per_1000 = parseFloat(d.avg_tests_per_1000)||0;\n        d.number_vaccine_types_used = 0;\n        d.vaccines_per_100 = 0;\n        d.number_vaccine_types_used = parseInt(d.avg_tests_per_1000);\n        data.vaccines_who_data.forEach(function(dd,ii){\n            if(d.country_iso3==dd.ISO3){\n                // d.data_updated = moment(dd.DATE_UPDATED).startOf('day').toDate();\n                d.number_vaccine_types_used = parseInt(dd.NUMBER_VACCINES_TYPES_USED);\n                d.vaccines_per_100 = parseFloat(dd.TOTAL_VACCINATIONS_PER100);\n                if(isNaN(d.vaccines_per_100))d.vaccines_per_100 = 0;\n                d.vaccines_used = dd.VACCINES_USED.split(',').map(function(item) {\n                    return item.trim();\n                  });\n            }\n        })\n\n        // get ns involvement in activities\n        d.ns_involvement = 0;\n        data.self_assessment.forEach(function(dd,ii){\n            if(d.country_iso3==dd.ISO3){\n                if(dd['Final involvement']=='Yes') d.ns_involvement = 1;\n            }\n        })\n\n        d.vaccine_acceptance_percent = 0;\n        // get vaccine acceptance\n        data.vaccine_acceptance.forEach(function(dd,ii){\n            if(d.country_iso3==dd.iso3){\n                // if(dd['Final involvement']=='Yes') d.ns_involvement = 1;\n                d.vaccine_acceptance_percent = parseFloat(dd.indicator_value)*100;\n                d.vaccine_acceptance_population = parseInt(dd.population_size);\n            }\n        })\n\n        // get contrat tracing\n        if((d.contract_tracing.toLowerCase()=='all')||(d.contract_tracing.toLowerCase()=='some')){\n            d.contract_tracing = 1;\n        } else {\n            d.contract_tracing = 0\n        }\n\n        // parse equity data inform/hdi indexes\n        if(d.hdi_category.match(/very high/i)){\n            d.hdi_category = 'very-high'\n        }\n        else if(d.hdi_category.match(/high/i)){\n            d.hdi_category = 'high'\n        }\n        else if(d.hdi_category.match(/medium/i)){\n            d.hdi_category = 'medium'\n        }\n        else if(d.hdi_category.match(/low/i)){\n            d.hdi_category = 'low'\n        }\n        if(d.inform_severity.match(/very high/i)){\n            d.inform_severity = 'very-high'\n        }\n        else if(d.inform_severity.match(/high/i)){\n            d.inform_severity = 'high'\n        }\n        else if(d.inform_severity.match(/medium/i)){\n            d.inform_severity = 'medium'\n        }\n        else if(d.inform_severity.match(/low/i)){\n            d.inform_severity = 'low'\n        }\n        else if(d.inform_severity.match(/no/i)){\n            d.inform_severity = 'no-score'\n        }\n\n    });\n\n    //*********************\n    // get min/max dates\n    //*********************\n\n    // get min and max dates from daily who data\n    let maxDate = moment(new Date(max(data.who_data, function(d){\n        return d.Date_reported;\n    }))).startOf('day');\n\n    // override min date to week start\n    data.min_date = moment('2019-12-31').startOf('day').toDate();\n\n    let maxDateVaccines = moment(new Date(max(data.vaccines_data, function(d){\n        return d.date;\n    }))).startOf('day');\n\n    data.min_vaccine_date = moment(new Date(min(data.vaccines_data, function(d){\n        return d.date;\n    }))).startOf('day').toDate();\n\n\n    if(maxDateVaccines.unix()>maxDate.unix()) {\n        maxDate = maxDateVaccines;\n    }\n\n    data.max_date = maxDate.toDate();\n\n    //*********************\n    // parse who data\n    //*********************\n\n    data.who_data.forEach(function(d,i){\n        // parse dates\n        d.date = moment(d.Date_reported).startOf('day').toDate();\n        // override country name and code\n        d.country_code = d.Country_code;\n        d.country_name = null;\n        data.country.forEach(function(dd,ii){\n            if(dd.country_iso2===d.country_code){\n                d.ifrc_region = dd.ifrc_region;\n                d.country_name = dd.country_name;\n            }\n        })\n\n        // parse cases and deaths\n        d.cumulative_deaths = parseInt(d.Cumulative_deaths);\n        d.cumulative_cases = parseInt(d.Cumulative_cases);\n        d.new_cases = parseInt(d.New_cases);\n        d.new_deaths = parseInt(d.New_deaths);\n        \n    });\n\n    // sort by date\n    data.who_data.sort(function(a,b){\n        return new Date(a.date) - new Date(b.Date_reported);\n    });\n    \n    //*************************\n    // check for missing who dates and fill in the max date\n    //*************************\n\n    // group by country\n    var whoDataGrouped = flatGroup(data.who_data, d => d.country_code);\n\n    var datesToAdd = [];\n\n    whoDataGrouped.forEach(function(d,i){\n        \n        var maxDate = moment(max(d[1], d=>d.date)).startOf('day');\n        \n        var lastRecord = clone(d[1][d[1].length-1]);\n\n        if(maxDate.unix()!=data.max_date.getTime()){\n            lastRecord.date = new Date(data.max_date);\n            lastRecord.new_cases = 0;\n            lastRecord.new_deaths = 0;\n            datesToAdd.push(lastRecord);\n        }\n\n    })\n\n    data.who_data.push(...datesToAdd);\n\n    data.who_data.sort(function(a,b){\n        return new Date(a.date) - new Date(b.date);\n    });\n\n    // set count for incremental day/week/month numbers\n    let dayTotal = -1;\n    let dayCheck = 0;\n    let weekTotal = -1;\n    let weekCheck = -1;\n    let monthTotal = 0;\n    let monthCheck = 0;\n\n    // parse and clean up WHO data\n    let whoCountryCodes = [];\n    data.who_data.forEach(function(d,i){\n        // parse dates\n        // d.date = moment(d.Date_reported).startOf('day').toDate();\n        d.dayOfYear =  moment(d.date).dayOfYear();\n        if(d.dayOfYear!==dayCheck) dayTotal++;\n        d.dayTotal = dayTotal;\n        d.week = moment(d.date).isoWeek();\n        if(d.week!==weekCheck) weekTotal++;\n        d.weekTotal = weekTotal;\n        d.month = d.date.getMonth();\n        if(d.month!==monthCheck) monthTotal++;\n        d.monthTotal = monthTotal;\n        d.year = d.date.getFullYear();\n        d.week_start = new Date(moment(d.date).startOf('isoWeek').startOf('day').toDate());\n        d.month_start = new Date(moment(d.date).startOf('month').startOf('day').toDate());\n\n        // set negative values to zero for new cases/deaths\n        if(d.new_deaths<0)d.new_deaths = 0;\n        if(d.new_cases<0)d.new_cases = 0;\n\n        if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n\n        // add country code to array so we know it is used\n        if((!whoCountryCodes.includes(d.country_code))&&(d.country_code.length>1)) {\n            whoCountryCodes.push(d.country_code);\n        }\n\n        // delete old unused keys\n        delete d.Date_reported;\n        delete d.Country;\n        delete d.New_cases;\n        delete d.New_deaths;\n        delete d.Country_code;\n        delete d.Cumulative_deaths;\n        delete d.Cumulative_cases;\n        delete d.Country_code;\n        delete d.WHO_region;\n        delete d.Country;\n        \n        // set incremental count\n        dayCheck = d.dayOfYear;\n        weekCheck = d.week;\n        monthCheck = d.month;\n    })\n   \n    //*********************\n    // parse vaccine cumulative data\n    //*********************\n\n    // clean up values\n    data.vaccines_data.forEach(function(d,i){\n        d.date = moment(d.date).startOf('day').toDate();\n    });\n    \n    data.vaccines_data.sort(function(a,b){\n        return new Date(a.date) - new Date(b.date);\n    });\n\n    // filter out vaccine data to only include records with ISO3 country codes\n    data.vaccines_data = data.vaccines_data.filter(function(d,i){\n        return d.iso_code.length===3 && d.total_vaccinations > 0;\n    })\n\n    var vaccineDataByCountry = flatGroup(data.vaccines_data, d => d.iso_code);\n\n    // fill out missing vaccinations date records (extend cumulative from last data date)\n    var newDays = [];\n    var hasDays = [];\n    var lastRecord = {};\n    var vDataFlat = [];\n\n    vaccineDataByCountry.forEach(function(d,i){\n\n        var minDt = new Date(data.min_date);\n        var maxDt = new Date(data.max_date);\n\n        hasDays = [];\n        newDays = [];\n\n        // set the last recorded date fo this country\n        d.lastDate = moment(max(d[1], function(d,i){ return d.date })).startOf('day').toDate();\n        \n        // reset country name and code using country table\n        data.country.forEach(function(dd,ii){\n            if(dd.country_iso3===d[0]){\n                d.ifrc_region = dd.ifrc_region;\n                d.country_name = dd.country_name;\n                d.country_code = dd.country_iso2;\n                dd.data_updated = d.lastDate;\n\n            }\n        })\n\n        // loop through all date records for this country and add to hasDays array\n        d[1].forEach(function(dd,ii){\n            dd.total_vaccinations = parseInt(dd.total_vaccinations);\n            dd.daily_vaccinations = parseInt(dd.daily_vaccinations);\n            hasDays.push(new Date(dd.date).getTime());\n        })\n\n        // fill in missing dates\n        // d[1].forEach(function(dd,ii){\n            for (var day = new Date(data.min_vaccine_date);day <= data.max_date; day.setDate(day.getDate() + 1)) {\n                var newDay = new Date(day).getTime();\n                if(!hasDays.includes(newDay)){\n                    newDays.push({date: new Date(day), total_vaccinations: null, daily_vaccinations: 0})\n                }\n            }\n        // });\n\n        d[1].push(...newDays);\n        d[1].sort(function(a,b){\n            return new Date(a.date) - new Date(b.date);\n        });\n\n        // loop through dates and fill in missing cumulative values\n        var totalVac = 0;\n        var totalVac100 = 0;\n        var people_vaccinated_per_hundred = 0;\n        var people_fully_vaccinated_per_hundred = 0;\n        d[1].forEach(function(dd,ii){\n            if(dd.total_vaccinations){\n                totalVac = dd.total_vaccinations;\n            } else {\n                dd.total_vaccinations = totalVac;\n            }\n            if(dd.total_vaccinations_per_hundred){\n                totalVac100 = dd.total_vaccinations_per_hundred\n            } else {\n                dd.total_vaccinations_per_hundred = totalVac100;\n            }\n            if(dd.people_vaccinated_per_hundred){\n                people_vaccinated_per_hundred = dd.people_vaccinated_per_hundred;\n            } else {\n                dd.people_vaccinated_per_hundred = people_vaccinated_per_hundred;\n            }\n            if(dd.people_fully_vaccinated_per_hundred){\n                people_fully_vaccinated_per_hundred = dd.people_fully_vaccinated_per_hundred;\n            } else {\n                dd.people_fully_vaccinated_per_hundred = people_fully_vaccinated_per_hundred;\n            }\n\n            var countryName;\n            if(d.country_name==null) { countryName = d[0];\n            } else {\n                countryName = d.country_name\n            }\n            var dailyVac = 0;\n            if((dd.daily_vaccinations)&&(dd.daily_vaccinations>0)) dailyVac = dd.daily_vaccinations;\n\n            vDataFlat.push({\n                date: new Date(dd.date),\n                lastDate: d.lastDate,\n                total_vaccinations_per_hundred: parseFloat(totalVac100),\n                people_vaccinated_per_hundred: parseFloat(people_vaccinated_per_hundred),\n                people_fully_vaccinated_per_hundred: parseFloat(people_fully_vaccinated_per_hundred),\n                iso_code: d[0], \n                ifrc_region: d.ifrc_region,\n                country_name: countryName,\n                country_code: d.country_code, \n                total_vaccinations: totalVac,\n                daily_vaccinations: dailyVac\n            })\n        })\n    });\n\n    data.vaccines_data = vDataFlat;\n\n    data.vaccines_data.sort(function(a,b){\n        return new Date(a.date) - new Date(b.date);\n    });\n\n    // reset count for incremental day/week/month numbers\n    dayTotal = -1;\n    dayCheck = 0;\n    weekTotal = -1;\n    weekCheck = -1;\n    monthTotal = 0;\n    monthCheck = 0;\n    \n    data.vaccines_data.forEach(function(d,i){\n        if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n        d.dayOfYear =  moment(d.date).dayOfYear();\n        if(d.dayOfYear!==dayCheck) dayTotal++;\n        d.dayTotal = dayTotal;\n        d.week = moment(d.date).isoWeek();\n        if(d.week!==weekCheck) weekTotal++;\n        d.weekTotal = weekTotal;\n        d.month = d.date.getMonth();\n        if(d.month!==monthCheck) monthTotal++;\n        d.monthTotal = monthTotal;\n        d.year = d.date.getFullYear();\n        dayCheck = d.dayOfYear;\n        weekCheck = d.week;\n        monthCheck = d.month;\n        d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n        d.month_start = new Date(moment(d.date).startOf('month').toDate());\n    })\n\n    //*********************\n    // add most recent owid vaccine data record to data.country\n    //*********************\n\n    // group who data by country\n    var vaccineDataByCountry = flatGroup(data.vaccines_data, d => d.country_code);\n\n    //*********************\n    // add most recent records from both datasets to data.country\n    //*********************\n\n    // first group who data by country\n    var whoDataByCountry = flatGroup(data.who_data, d => d.country_code);\n\n    data.country.forEach(function(d,i){\n        d.cumulative_cases_per_100k = 0;\n        d.cumulative_deaths_per_100k = 0;\n        d.cumulative_vaccines_per_100k = 0;\n        d.people_fully_vaccinated_per_hundred = 0;\n        d.people_vaccinated_per_hundred = 0;\n        d.total_vaccinations_per_hundred = 0;\n        var countryCode = d.country_iso2;\n\n        // calculate latest date and at weekly intervals (for bi-weekly percent change calculation)\n        whoDataByCountry.forEach(function(dd,ii){\n            if(dd[0]==countryCode){\n                d.who_daily_latest = dd[1][dd[1].length-1];\n                d.who_daily_7_days = dd[1][dd[1].length-7];\n                d.who_daily_14_days = dd[1][dd[1].length-14];\n                d.who_daily_21_days = dd[1][dd[1].length-21];\n                d.who_daily_28_days = dd[1][dd[1].length-28];\n                d.cumulative_cases_per_100k = (d.who_daily_latest.cumulative_cases/(d.population/100000));\n                d.cumulative_deaths_per_100k = (d.who_daily_latest.cumulative_deaths/(d.population/100000));\n                d.cumulative_cases = d.who_daily_latest.cumulative_cases;\n                d.cumulative_deaths = d.who_daily_latest.cumulative_deaths;\n                d.cumulative_deaths_7_days = d.who_daily_7_days.cumulative_deaths;\n                d.cumulative_deaths_14_days = d.who_daily_14_days.cumulative_deaths;\n                d.cumulative_deaths_21_days = d.who_daily_21_days.cumulative_deaths;\n                d.cumulative_deaths_28_days = d.who_daily_28_days.cumulative_deaths;\n                d.cumulative_cases_7_days = d.who_daily_7_days.cumulative_cases;\n                d.cumulative_cases_14_days = d.who_daily_14_days.cumulative_cases;\n                d.cumulative_cases_21_days = d.who_daily_21_days.cumulative_cases;\n                d.cumulative_cases_28_days = d.who_daily_28_days.cumulative_cases;\n                var percentChange = parseFloat(((d.cumulative_cases - d.cumulative_cases_14_days)-(d.cumulative_cases_14_days-d.cumulative_cases_28_days))/d.cumulative_cases_28_days);\n                if(isFinite(percentChange)) { d.percent_change = percentChange; } else { d.percent_change = 0 }\n            }\n        })\n\n        vaccineDataByCountry.forEach(function(dd,ii){\n            if(dd[0]==countryCode){\n                if(typeof(dd[0]!='undefined')){\n                    d.vaccine_daily_latest = dd[1][dd[1].length-1];\n                    d.cumulative_vaccines_per_100k = (d.vaccine_daily_latest.total_vaccinations/(d.population/100000));\n                    d.people_fully_vaccinated_per_hundred = d.vaccine_daily_latest.people_fully_vaccinated_per_hundred;\n                    d.people_vaccinated_per_hundred = d.vaccine_daily_latest.people_vaccinated_per_hundred;\n                    d.total_vaccinations_per_hundred = d.vaccine_daily_latest.total_vaccinations_per_hundred;\n                    d.total_vaccinations = d.vaccine_daily_latest.total_vaccinations;\n                }\n            }\n        })\n\n        if(!isFinite(d.cumulative_cases_per_100k))d.cumulative_cases_per_100k = 0;\n        if(!isFinite(d.cumulative_deaths_per_100k))d.cumulative_deaths_per_100k = 0;\n        if(!isFinite(d.cumulative_vaccines_per_100k))d.cumulative_vaccines_per_100k = 0;\n        d.country_code = d.country_iso2;\n\n    })\n\n    data.original = clone(data);\n\n}\n\nexport default ParseData;\n"]},"metadata":{},"sourceType":"module"}