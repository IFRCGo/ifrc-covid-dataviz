{"ast":null,"code":"// import * as d3 from \"d3\";\nimport { max } from \"d3\";\nimport moment from 'moment';\nexport function ParseData(data, options) {\n  console.log('ParseData'); // max dates\n\n  const maxDate = moment(new Date(max(data.who_data, function (d) {\n    return d.Date_reported;\n  })));\n  const maxDateVaccines = moment(new Date(max(data.vacc, function (d) {\n    return d.Date_reported;\n  }))); // parse who data\n\n  let dayTotal = -1;\n  let dayCheck = 0;\n  let weekTotal = -1;\n  let weekCheck = -1;\n  let monthTotal = 0;\n  let monthCheck = 0;\n  data.who_data.sort(function (a, b) {\n    return new Date(a.Date_reported) - new Date(b.Date_reported);\n  });\n  data.who_data.forEach(function (d, i) {\n    d.date = new Date(d.Date_reported);\n    d.dayOfYear = moment(d.date).dayOfYear();\n    if (d.dayOfYear !== dayCheck) dayTotal++;\n    d.dayTotal = dayTotal;\n    d.week = moment(d.date).isoWeek();\n    if (d.week !== weekCheck) weekTotal++;\n    d.weekTotal = weekTotal;\n    d.month = d.date.getMonth();\n    if (d.month !== monthCheck) monthTotal++;\n    d.monthTotal = monthTotal;\n    d.year = d.date.getFullYear();\n    d.new_cases = parseInt(d.New_cases);\n    d.new_deaths = parseInt(d.New_deaths);\n    d.cumulative_deaths = parseInt(d.Cumulative_deaths);\n    d.cumulative_cases = parseInt(d.Cumulative_cases);\n    data.equity_data.forEach(function (dd, ii) {\n      if (dd.country_iso2 === d.Country_code) {\n        d.ifrc_region = dd.ifrc_region;\n        d.country_name = dd.country_name;\n      }\n    });\n    if (d.ifrc_region == undefined) d.ifrc_region = 'OTH';\n    delete d.Date_reported;\n    delete d.New_cases;\n    delete d.New_deaths;\n    delete d.Cumulative_deaths;\n    delete d.Cumulative_cases; // delete d.Country_code;\n\n    delete d.WHO_region; // delete d.Country;\n\n    dayCheck = d.dayOfYear;\n    weekCheck = d.week;\n    monthCheck = d.month;\n  }); // console.log(data.who_data[1000]);\n}\n_c = ParseData;\nexport default ParseData;\n\nvar _c;\n\n$RefreshReg$(_c, \"ParseData\");","map":{"version":3,"sources":["/Users/matthewsmawfield/www/ifrc-covid-dataviz/src/ParseData.js"],"names":["max","moment","ParseData","data","options","console","log","maxDate","Date","who_data","d","Date_reported","maxDateVaccines","vacc","dayTotal","dayCheck","weekTotal","weekCheck","monthTotal","monthCheck","sort","a","b","forEach","i","date","dayOfYear","week","isoWeek","month","getMonth","year","getFullYear","new_cases","parseInt","New_cases","new_deaths","New_deaths","cumulative_deaths","Cumulative_deaths","cumulative_cases","Cumulative_cases","equity_data","dd","ii","country_iso2","Country_code","ifrc_region","country_name","undefined","WHO_region"],"mappings":"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","sourcesContent":["// import * as d3 from \"d3\";\nimport {max} from \"d3\";\n\nimport moment from 'moment';\n\nexport function ParseData(data, options) {\n\n    console.log('ParseData');\n    \n    // max dates\n    const maxDate = moment(new Date(max(data.who_data, function(d){\n        return d.Date_reported;\n    })));\n\n    const maxDateVaccines = moment(new Date(max(data.vacc, function(d){\n        return d.Date_reported;\n    })));\n\n    // parse who data\n\n\n    let dayTotal = -1;\n    let dayCheck = 0;\n\n    let weekTotal = -1;\n    let weekCheck = -1;\n\n    let monthTotal = 0;\n    let monthCheck = 0;\n\n    data.who_data.sort(function(a,b){\n        return new Date(a.Date_reported) - new Date(b.Date_reported);\n    });\n\n    data.who_data.forEach(function(d,i){\n\n        d.date = new Date(d.Date_reported);\n        d.dayOfYear =  moment(d.date).dayOfYear();\n        if(d.dayOfYear!==dayCheck) dayTotal++;\n        d.dayTotal = dayTotal;\n\n        d.week = moment(d.date).isoWeek();\n        if(d.week!==weekCheck) weekTotal++;\n        d.weekTotal = weekTotal;\n        d.month = d.date.getMonth();\n        if(d.month!==monthCheck) monthTotal++;\n        d.monthTotal = monthTotal;\n        d.year = d.date.getFullYear();\n        d.new_cases = parseInt(d.New_cases);\n        d.new_deaths = parseInt(d.New_deaths);\n        d.cumulative_deaths = parseInt(d.Cumulative_deaths);\n        d.cumulative_cases = parseInt(d.Cumulative_cases);\n        data.equity_data.forEach(function(dd,ii){\n            if(dd.country_iso2===d.Country_code){\n                d.ifrc_region = dd.ifrc_region;\n                d.country_name = dd.country_name;\n            }\n        })\n        if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n        delete d.Date_reported;\n        delete d.New_cases;\n        delete d.New_deaths;\n        delete d.Cumulative_deaths;\n        delete d.Cumulative_cases;\n        // delete d.Country_code;\n        delete d.WHO_region;\n        // delete d.Country;\n        dayCheck = d.dayOfYear;\n        weekCheck = d.week;\n        monthCheck = d.month;\n    })\n\n\n    // console.log(data.who_data[1000]);\n}\n\nexport default ParseData;\n"]},"metadata":{},"sourceType":"module"}