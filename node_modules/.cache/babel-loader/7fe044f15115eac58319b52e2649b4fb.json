{"ast":null,"code":"import _toConsumableArray from\"/Users/matthewsmawfield/www/ifrc-covid-dataviz/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{min,max,group,flatGroup}from\"d3\";import moment from'moment';import clone from'just-clone';import{data}from\"jquery\";export function ParseData(data,options){var _data$who_data;//*********************\n// create regions\n//*********************\ndata.regions=[{sort:5,'code':'AF',cumulative_cases:0,cumulative_deaths:0,cumulative_vaccines:0,population:0},{sort:3,'code':'ME',cumulative_cases:0,cumulative_deaths:0,cumulative_vaccines:0,population:0},{sort:4,'code':'AP',cumulative_cases:0,cumulative_deaths:0,cumulative_vaccines:0,population:0},{sort:2,'code':'EU',cumulative_cases:0,cumulative_deaths:0,cumulative_vaccines:0,population:0},{sort:1,'code':'AM',cumulative_cases:0,cumulative_deaths:0,cumulative_vaccines:0,population:0},{sort:6,'code':'OTH',cumulative_cases:0,cumulative_deaths:0,cumulative_vaccines:0,population:0}];data.regions.sort(function(a,b){return a.sort-b.sort;});//*********************\n// clean up country data\n//*********************\ndata.country=data.equity_data;data.country.forEach(function(d,i){// if not an IFRC region then set to OTH\nif(d.ifrc_region!='AF'&&d.ifrc_region!='ME'&&d.ifrc_region!='AP'&&d.ifrc_region!='EU'&&d.ifrc_region!='AM'){d.ifrc_region='OTH';}// parse country population\nd.population=parseInt(d.population)||0;var pop=0;if(d.population>0)pop=d.population;// sum up ifrc region population \ndata.regions.forEach(function(dd,ii){if(dd.code==d.ifrc_region){dd.population+=pop;}});// get WHO vaccine data (vaccine types used, vaccines_per_100\nd.vaccines_used=[];d.avg_tests_per_1000=parseFloat(d.avg_tests_per_1000)||0;d.number_vaccine_types_used=0;d.vaccines_per_100=0;d.number_vaccine_types_used=parseInt(d.avg_tests_per_1000);data.vaccines_who_data.forEach(function(dd,ii){if(d.country_iso3==dd.ISO3){// d.data_updated = moment(dd.DATE_UPDATED).startOf('day').toDate();\nd.number_vaccine_types_used=parseInt(dd.NUMBER_VACCINES_TYPES_USED);d.vaccines_per_100=parseFloat(dd.TOTAL_VACCINATIONS_PER100);if(isNaN(d.vaccines_per_100))d.vaccines_per_100=0;d.vaccines_used=dd.VACCINES_USED.split(',').map(function(item){return item.trim();});}});// get ns involvement in activities\nd.ns_involvement=0;data.self_assessment.forEach(function(dd,ii){if(d.country_iso3==dd.ISO3){if(dd['Final involvement']=='Yes')d.ns_involvement=1;}});d.vaccine_acceptance_percent=0;// get vaccine acceptance\ndata.vaccine_acceptance.forEach(function(dd,ii){if(d.country_iso3==dd.iso3){// if(dd['Final involvement']=='Yes') d.ns_involvement = 1;\nd.vaccine_acceptance_percent=parseFloat(dd.indicator_value)*100;d.vaccine_acceptance_population=parseInt(dd.population_size);}});// get contrat tracing\nif(d.contract_tracing.toLowerCase()=='all'||d.contract_tracing.toLowerCase()=='some'){d.contract_tracing=1;}else{d.contract_tracing=0;}// parse equity data inform/hdi indexes\nif(d.hdi_category.match(/very high/i)){d.hdi_category='very-high';}else if(d.hdi_category.match(/high/i)){d.hdi_category='high';}else if(d.hdi_category.match(/medium/i)){d.hdi_category='medium';}else if(d.hdi_category.match(/low/i)){d.hdi_category='low';}if(d.inform_severity.match(/very high/i)){d.inform_severity='very-high';}else if(d.inform_severity.match(/high/i)){d.inform_severity='high';}else if(d.inform_severity.match(/medium/i)){d.inform_severity='medium';}else if(d.inform_severity.match(/low/i)){d.inform_severity='low';}else if(d.inform_severity.match(/no/i)){d.inform_severity='no-score';}});//*********************\n// get min/max dates\n//*********************\n// get min and max dates from daily who data\nvar maxDate=moment(new Date(max(data.who_data,function(d){return d.Date_reported;}))).startOf('day');// override min date to week start\ndata.min_date=moment('2019-12-31').startOf('day').toDate();var maxDateVaccines=moment(new Date(max(data.vaccines_data,function(d){return d.date;}))).startOf('day');data.min_vaccine_date=moment(new Date(min(data.vaccines_data,function(d){return d.date;}))).startOf('day').toDate();data.max_vaccine_date=maxDateVaccines.toDate();if(maxDateVaccines.unix()>maxDate.unix()){maxDate=maxDateVaccines;}data.max_date=maxDate.toDate();//*********************\n// parse who data\n//*********************\ndata.who_data.forEach(function(d,i){// parse dates\nd.date=moment(d.Date_reported).startOf('day').toDate();// override country name and code\nd.country_code=d.Country_code;d.country_name=null;data.country.forEach(function(dd,ii){if(dd.country_iso2===d.country_code){d.ifrc_region=dd.ifrc_region;d.country_name=dd.country_name;}});// parse cases and deaths\nd.cumulative_deaths=parseInt(d.Cumulative_deaths);d.cumulative_cases=parseInt(d.Cumulative_cases);d.new_cases=parseInt(d.New_cases);d.new_deaths=parseInt(d.New_deaths);});// sort by date\ndata.who_data.sort(function(a,b){return new Date(a.date)-new Date(b.Date_reported);});//*************************\n// check for missing who dates and fill in the max date\n//*************************\n// group by country\nvar whoDataGrouped=flatGroup(data.who_data,function(d){return d.country_code;});var datesToAdd=[];whoDataGrouped.forEach(function(d,i){var maxDate=moment(max(d[1],function(d){return d.date;})).startOf('day');var lastRecord=clone(d[1][d[1].length-1]);if(maxDate.unix()!=data.max_date.getTime()){lastRecord.date=new Date(data.max_date);lastRecord.new_cases=0;lastRecord.new_deaths=0;datesToAdd.push(lastRecord);}});(_data$who_data=data.who_data).push.apply(_data$who_data,datesToAdd);data.who_data.sort(function(a,b){return new Date(a.date)-new Date(b.date);});// set count for incremental day/week/month numbers\nvar dayTotal=-1;var dayCheck=0;var weekTotal=-1;var weekCheck=-1;var monthTotal=0;var monthCheck=0;// parse and clean up WHO data\nvar whoCountryCodes=[];data.who_data.forEach(function(d,i){// parse dates\n// d.date = moment(d.Date_reported).startOf('day').toDate();\nd.dayOfYear=moment(d.date).dayOfYear();if(d.dayOfYear!==dayCheck)dayTotal++;d.dayTotal=dayTotal;d.week=moment(d.date).isoWeek();if(d.week!==weekCheck)weekTotal++;d.weekTotal=weekTotal;d.month=d.date.getMonth();if(d.month!==monthCheck)monthTotal++;d.monthTotal=monthTotal;d.year=d.date.getFullYear();d.week_start=new Date(moment(d.date).startOf('isoWeek').startOf('day').toDate());d.month_start=new Date(moment(d.date).startOf('month').startOf('day').toDate());// set negative values to zero for new cases/deaths\nif(d.new_deaths<0)d.new_deaths=0;if(d.new_cases<0)d.new_cases=0;if(d.ifrc_region==undefined)d.ifrc_region='OTH';// add country code to array so we know it is used\nif(!whoCountryCodes.includes(d.country_code)&&d.country_code.length>1){whoCountryCodes.push(d.country_code);}// delete old unused keys\ndelete d.Date_reported;delete d.Country;delete d.New_cases;delete d.New_deaths;delete d.Country_code;delete d.Cumulative_deaths;delete d.Cumulative_cases;delete d.Country_code;delete d.WHO_region;delete d.Country;// set incremental count\ndayCheck=d.dayOfYear;weekCheck=d.week;monthCheck=d.month;});//*********************\n// parse vaccine cumulative data\n//*********************\n// clean up values\ndata.vaccines_data.forEach(function(d,i){d.date=moment(d.date).startOf('day').toDate();});data.vaccines_data.sort(function(a,b){return new Date(a.date)-new Date(b.date);});// filter out vaccine data to only include records with ISO3 country codes\ndata.vaccines_data=data.vaccines_data.filter(function(d,i){return d.iso_code.length===3&&d.total_vaccinations>0;});var vaccineDataByCountry=flatGroup(data.vaccines_data,function(d){return d.iso_code;});// fill out missing vaccinations date records (extend cumulative from last data date)\nvar newDays=[];var hasDays=[];var lastRecord={};var vDataFlat=[];vaccineDataByCountry.forEach(function(d,i){var _d$;var minDt=new Date(data.min_date);var maxDt=new Date(data.max_date);hasDays=[];newDays=[];// set the last recorded date fo this country\nd.lastDate=moment(max(d[1],function(d,i){return d.date;})).startOf('day').toDate();// reset country name and code using country table\ndata.country.forEach(function(dd,ii){if(dd.country_iso3===d[0]){d.ifrc_region=dd.ifrc_region;d.country_name=dd.country_name;d.country_code=dd.country_iso2;dd.data_updated=d.lastDate;}});// loop through all date records for this country and add to hasDays array\nd[1].forEach(function(dd,ii){dd.total_vaccinations=parseInt(dd.total_vaccinations);dd.daily_vaccinations=parseInt(dd.daily_vaccinations);hasDays.push(new Date(dd.date).getTime());});// fill in missing dates\n// d[1].forEach(function(dd,ii){\nfor(var day=new Date(data.min_vaccine_date);day<=data.max_date;day.setDate(day.getDate()+1)){var newDay=new Date(day).getTime();if(!hasDays.includes(newDay)){newDays.push({date:new Date(day),total_vaccinations:null,daily_vaccinations:0});}}// });\n(_d$=d[1]).push.apply(_d$,_toConsumableArray(newDays));d[1].sort(function(a,b){return new Date(a.date)-new Date(b.date);});// loop through dates and fill in missing cumulative values\nvar totalVac=0;var totalVac100=0;var people_vaccinated_per_hundred=0;var people_fully_vaccinated_per_hundred=0;d[1].forEach(function(dd,ii){if(dd.total_vaccinations){totalVac=dd.total_vaccinations;}else{dd.total_vaccinations=totalVac;}if(dd.total_vaccinations_per_hundred){totalVac100=dd.total_vaccinations_per_hundred;}else{dd.total_vaccinations_per_hundred=totalVac100;}if(dd.people_vaccinated_per_hundred){people_vaccinated_per_hundred=dd.people_vaccinated_per_hundred;}else{dd.people_vaccinated_per_hundred=people_vaccinated_per_hundred;}if(dd.people_fully_vaccinated_per_hundred){people_fully_vaccinated_per_hundred=dd.people_fully_vaccinated_per_hundred;}else{dd.people_fully_vaccinated_per_hundred=people_fully_vaccinated_per_hundred;}var countryName;if(d.country_name==null){countryName=d[0];}else{countryName=d.country_name;}var dailyVac=0;if(dd.daily_vaccinations&&dd.daily_vaccinations>0)dailyVac=dd.daily_vaccinations;vDataFlat.push({date:new Date(dd.date),lastDate:d.lastDate,total_vaccinations_per_hundred:parseFloat(totalVac100),people_vaccinated_per_hundred:parseFloat(people_vaccinated_per_hundred),people_fully_vaccinated_per_hundred:parseFloat(people_fully_vaccinated_per_hundred),iso_code:d[0],ifrc_region:d.ifrc_region,country_name:countryName,country_code:d.country_code,total_vaccinations:totalVac,daily_vaccinations:dailyVac});});});data.vaccines_data=vDataFlat;data.vaccines_data.sort(function(a,b){return new Date(a.date)-new Date(b.date);});// reset count for incremental day/week/month numbers\ndayTotal=-1;dayCheck=0;weekTotal=-1;weekCheck=-1;monthTotal=0;monthCheck=0;data.vaccines_data.forEach(function(d,i){if(d.ifrc_region==undefined)d.ifrc_region='OTH';d.dayOfYear=moment(d.date).dayOfYear();if(d.dayOfYear!==dayCheck)dayTotal++;d.dayTotal=dayTotal;d.week=moment(d.date).isoWeek();if(d.week!==weekCheck)weekTotal++;d.weekTotal=weekTotal;d.month=d.date.getMonth();if(d.month!==monthCheck)monthTotal++;d.monthTotal=monthTotal;d.year=d.date.getFullYear();dayCheck=d.dayOfYear;weekCheck=d.week;monthCheck=d.month;d.week_start=new Date(moment(d.date).startOf('isoWeek').toDate());d.month_start=new Date(moment(d.date).startOf('month').toDate());});//*********************\n// add most recent owid vaccine data record to data.country\n//*********************\n// group who data by country\nvar vaccineDataByCountry=flatGroup(data.vaccines_data,function(d){return d.country_code;});//*********************\n// add most recent records from both datasets to data.country\n//*********************\n// first group who data by country\nvar whoDataByCountry=flatGroup(data.who_data,function(d){return d.country_code;});data.country.forEach(function(d,i){d.cumulative_cases_per_100k=0;d.cumulative_deaths_per_100k=0;d.cumulative_vaccines_per_100k=0;d.people_fully_vaccinated_per_hundred=0;d.people_vaccinated_per_hundred=0;d.total_vaccinations_per_hundred=0;var countryCode=d.country_iso2;// calculate latest date and at weekly intervals (for bi-weekly percent change calculation)\nwhoDataByCountry.forEach(function(dd,ii){if(dd[0]==countryCode){d.who_daily_latest=dd[1][dd[1].length-1];d.who_daily_7_days=dd[1][dd[1].length-8];d.who_daily_14_days=dd[1][dd[1].length-15];d.who_daily_21_days=dd[1][dd[1].length-22];d.who_daily_28_days=dd[1][dd[1].length-29];d.cumulative_cases_per_100k=d.who_daily_latest.cumulative_cases/(d.population/100000);d.cumulative_deaths_per_100k=d.who_daily_latest.cumulative_deaths/(d.population/100000);d.cumulative_cases=d.who_daily_latest.cumulative_cases;d.cumulative_deaths=d.who_daily_latest.cumulative_deaths;d.cumulative_deaths_7_days=d.who_daily_7_days.cumulative_deaths;d.cumulative_deaths_14_days=d.who_daily_14_days.cumulative_deaths;d.cumulative_deaths_21_days=d.who_daily_21_days.cumulative_deaths;d.cumulative_deaths_28_days=d.who_daily_28_days.cumulative_deaths;d.cumulative_cases_7_days=d.who_daily_7_days.cumulative_cases;d.cumulative_cases_14_days=d.who_daily_14_days.cumulative_cases;d.cumulative_cases_21_days=d.who_daily_21_days.cumulative_cases;d.cumulative_cases_28_days=d.who_daily_28_days.cumulative_cases;var percentChange=parseFloat((d.cumulative_cases-d.cumulative_cases_14_days-(d.cumulative_cases_14_days-d.cumulative_cases_28_days))/(d.cumulative_cases_14_days-d.cumulative_cases_28_days));if(isFinite(percentChange)){d.percent_change=percentChange;}else{d.percent_change=0;}}});vaccineDataByCountry.forEach(function(dd,ii){if(dd[0]==countryCode){if(typeof(dd[0]!='undefined')){d.vaccine_daily_latest=dd[1][dd[1].length-1];d.cumulative_vaccines_per_100k=d.vaccine_daily_latest.total_vaccinations/(d.population/100000);d.people_fully_vaccinated_per_hundred=d.vaccine_daily_latest.people_fully_vaccinated_per_hundred;d.people_vaccinated_per_hundred=d.vaccine_daily_latest.people_vaccinated_per_hundred;d.total_vaccinations_per_hundred=d.vaccine_daily_latest.total_vaccinations_per_hundred;d.total_vaccinations=d.vaccine_daily_latest.total_vaccinations;}}});if(!isFinite(d.cumulative_cases_per_100k))d.cumulative_cases_per_100k=0;if(!isFinite(d.cumulative_deaths_per_100k))d.cumulative_deaths_per_100k=0;if(!isFinite(d.cumulative_vaccines_per_100k))d.cumulative_vaccines_per_100k=0;d.country_code=d.country_iso2;});data.original=clone(data);}export default ParseData;","map":{"version":3,"sources":["/Users/matthewsmawfield/www/ifrc-covid-dataviz/src/ParseData.js"],"names":["min","max","group","flatGroup","moment","clone","data","ParseData","options","regions","sort","cumulative_cases","cumulative_deaths","cumulative_vaccines","population","a","b","country","equity_data","forEach","d","i","ifrc_region","parseInt","pop","dd","ii","code","vaccines_used","avg_tests_per_1000","parseFloat","number_vaccine_types_used","vaccines_per_100","vaccines_who_data","country_iso3","ISO3","NUMBER_VACCINES_TYPES_USED","TOTAL_VACCINATIONS_PER100","isNaN","VACCINES_USED","split","map","item","trim","ns_involvement","self_assessment","vaccine_acceptance_percent","vaccine_acceptance","iso3","indicator_value","vaccine_acceptance_population","population_size","contract_tracing","toLowerCase","hdi_category","match","inform_severity","maxDate","Date","who_data","Date_reported","startOf","min_date","toDate","maxDateVaccines","vaccines_data","date","min_vaccine_date","max_vaccine_date","unix","max_date","country_code","Country_code","country_name","country_iso2","Cumulative_deaths","Cumulative_cases","new_cases","New_cases","new_deaths","New_deaths","whoDataGrouped","datesToAdd","lastRecord","length","getTime","push","dayTotal","dayCheck","weekTotal","weekCheck","monthTotal","monthCheck","whoCountryCodes","dayOfYear","week","isoWeek","month","getMonth","year","getFullYear","week_start","month_start","undefined","includes","Country","WHO_region","filter","iso_code","total_vaccinations","vaccineDataByCountry","newDays","hasDays","vDataFlat","minDt","maxDt","lastDate","data_updated","daily_vaccinations","day","setDate","getDate","newDay","totalVac","totalVac100","people_vaccinated_per_hundred","people_fully_vaccinated_per_hundred","total_vaccinations_per_hundred","countryName","dailyVac","whoDataByCountry","cumulative_cases_per_100k","cumulative_deaths_per_100k","cumulative_vaccines_per_100k","countryCode","who_daily_latest","who_daily_7_days","who_daily_14_days","who_daily_21_days","who_daily_28_days","cumulative_deaths_7_days","cumulative_deaths_14_days","cumulative_deaths_21_days","cumulative_deaths_28_days","cumulative_cases_7_days","cumulative_cases_14_days","cumulative_cases_21_days","cumulative_cases_28_days","percentChange","isFinite","percent_change","vaccine_daily_latest","original"],"mappings":"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","sourcesContent":["import {min,max,group,flatGroup} from \"d3\";\nimport moment from 'moment';\nimport clone from 'just-clone';\nimport { data } from \"jquery\";\n\nexport function ParseData(data, options) {\n\n    //*********************\n    // create regions\n    //*********************\n    data.regions = [\n        {sort: 5, 'code': 'AF', cumulative_cases: 0, cumulative_deaths: 0, cumulative_vaccines: 0, population: 0},\n        {sort: 3, 'code': 'ME', cumulative_cases: 0, cumulative_deaths: 0, cumulative_vaccines: 0, population: 0},\n        {sort: 4, 'code': 'AP', cumulative_cases: 0, cumulative_deaths: 0, cumulative_vaccines: 0, population: 0},\n        {sort: 2, 'code': 'EU', cumulative_cases: 0, cumulative_deaths: 0, cumulative_vaccines: 0, population: 0},\n        {sort: 1, 'code': 'AM', cumulative_cases: 0, cumulative_deaths: 0, cumulative_vaccines: 0, population: 0},\n        {sort: 6, 'code': 'OTH', cumulative_cases: 0, cumulative_deaths: 0, cumulative_vaccines: 0, population: 0}\n    ]\n\n    data.regions.sort(function(a,b){\n        return (a.sort) - (b.sort);\n    });\n\n    //*********************\n    // clean up country data\n    //*********************\n    data.country = data.equity_data;\n    data.country.forEach(function(d,i){\n\n        // if not an IFRC region then set to OTH\n        if((d.ifrc_region!='AF')&&(d.ifrc_region!='ME')&&(d.ifrc_region!='AP')&&(d.ifrc_region!='EU')&&(d.ifrc_region!='AM')){\n            d.ifrc_region = 'OTH';\n        }\n        \n        // parse country population\n        d.population = parseInt(d.population)||0;\n        var pop = 0;\n        if(d.population>0) pop = d.population;\n\n        // sum up ifrc region population \n        data.regions.forEach(function(dd,ii){\n            if(dd.code==d.ifrc_region){\n                dd.population += pop\n            }\n        });\n\n        // get WHO vaccine data (vaccine types used, vaccines_per_100\n        d.vaccines_used = [];\n        d.avg_tests_per_1000 = parseFloat(d.avg_tests_per_1000)||0;\n        d.number_vaccine_types_used = 0;\n        d.vaccines_per_100 = 0;\n        d.number_vaccine_types_used = parseInt(d.avg_tests_per_1000);\n        data.vaccines_who_data.forEach(function(dd,ii){\n            if(d.country_iso3==dd.ISO3){\n                // d.data_updated = moment(dd.DATE_UPDATED).startOf('day').toDate();\n                d.number_vaccine_types_used = parseInt(dd.NUMBER_VACCINES_TYPES_USED);\n                d.vaccines_per_100 = parseFloat(dd.TOTAL_VACCINATIONS_PER100);\n                if(isNaN(d.vaccines_per_100))d.vaccines_per_100 = 0;\n                d.vaccines_used = dd.VACCINES_USED.split(',').map(function(item) {\n                    return item.trim();\n                  });\n            }\n        })\n\n        // get ns involvement in activities\n        d.ns_involvement = 0;\n        data.self_assessment.forEach(function(dd,ii){\n            if(d.country_iso3==dd.ISO3){\n                if(dd['Final involvement']=='Yes') d.ns_involvement = 1;\n            }\n        })\n\n        d.vaccine_acceptance_percent = 0;\n        // get vaccine acceptance\n        data.vaccine_acceptance.forEach(function(dd,ii){\n            if(d.country_iso3==dd.iso3){\n                // if(dd['Final involvement']=='Yes') d.ns_involvement = 1;\n                d.vaccine_acceptance_percent = parseFloat(dd.indicator_value)*100;\n                d.vaccine_acceptance_population = parseInt(dd.population_size);\n            }\n        })\n\n        // get contrat tracing\n        if((d.contract_tracing.toLowerCase()=='all')||(d.contract_tracing.toLowerCase()=='some')){\n            d.contract_tracing = 1;\n        } else {\n            d.contract_tracing = 0\n        }\n\n        // parse equity data inform/hdi indexes\n        if(d.hdi_category.match(/very high/i)){\n            d.hdi_category = 'very-high'\n        }\n        else if(d.hdi_category.match(/high/i)){\n            d.hdi_category = 'high'\n        }\n        else if(d.hdi_category.match(/medium/i)){\n            d.hdi_category = 'medium'\n        }\n        else if(d.hdi_category.match(/low/i)){\n            d.hdi_category = 'low'\n        }\n        if(d.inform_severity.match(/very high/i)){\n            d.inform_severity = 'very-high'\n        }\n        else if(d.inform_severity.match(/high/i)){\n            d.inform_severity = 'high'\n        }\n        else if(d.inform_severity.match(/medium/i)){\n            d.inform_severity = 'medium'\n        }\n        else if(d.inform_severity.match(/low/i)){\n            d.inform_severity = 'low'\n        }\n        else if(d.inform_severity.match(/no/i)){\n            d.inform_severity = 'no-score'\n        }\n\n    });\n\n    //*********************\n    // get min/max dates\n    //*********************\n\n    // get min and max dates from daily who data\n    let maxDate = moment(new Date(max(data.who_data, function(d){\n        return d.Date_reported;\n    }))).startOf('day');\n\n    // override min date to week start\n    data.min_date = moment('2019-12-31').startOf('day').toDate();\n\n    let maxDateVaccines = moment(new Date(max(data.vaccines_data, function(d){\n        return d.date;\n    }))).startOf('day');\n\n    data.min_vaccine_date = moment(new Date(min(data.vaccines_data, function(d){\n        return d.date;\n    }))).startOf('day').toDate();\n\n    data.max_vaccine_date = maxDateVaccines.toDate();\n\n    if(maxDateVaccines.unix()>maxDate.unix()) {\n        maxDate = maxDateVaccines;\n    }\n\n    data.max_date = maxDate.toDate();\n\n    //*********************\n    // parse who data\n    //*********************\n\n    data.who_data.forEach(function(d,i){\n        // parse dates\n        d.date = moment(d.Date_reported).startOf('day').toDate();\n        // override country name and code\n        d.country_code = d.Country_code;\n        d.country_name = null;\n        data.country.forEach(function(dd,ii){\n            if(dd.country_iso2===d.country_code){\n                d.ifrc_region = dd.ifrc_region;\n                d.country_name = dd.country_name;\n            }\n        })\n\n        // parse cases and deaths\n        d.cumulative_deaths = parseInt(d.Cumulative_deaths);\n        d.cumulative_cases = parseInt(d.Cumulative_cases);\n        d.new_cases = parseInt(d.New_cases);\n        d.new_deaths = parseInt(d.New_deaths);\n        \n    });\n\n    // sort by date\n    data.who_data.sort(function(a,b){\n        return new Date(a.date) - new Date(b.Date_reported);\n    });\n    \n    //*************************\n    // check for missing who dates and fill in the max date\n    //*************************\n\n    // group by country\n    var whoDataGrouped = flatGroup(data.who_data, d => d.country_code);\n\n    var datesToAdd = [];\n\n    whoDataGrouped.forEach(function(d,i){\n        \n        var maxDate = moment(max(d[1], d=>d.date)).startOf('day');\n        \n        var lastRecord = clone(d[1][d[1].length-1]);\n\n        if(maxDate.unix()!=data.max_date.getTime()){\n            lastRecord.date = new Date(data.max_date);\n            lastRecord.new_cases = 0;\n            lastRecord.new_deaths = 0;\n            datesToAdd.push(lastRecord);\n        }\n\n    })\n\n    data.who_data.push(...datesToAdd);\n\n    data.who_data.sort(function(a,b){\n        return new Date(a.date) - new Date(b.date);\n    });\n\n    // set count for incremental day/week/month numbers\n    let dayTotal = -1;\n    let dayCheck = 0;\n    let weekTotal = -1;\n    let weekCheck = -1;\n    let monthTotal = 0;\n    let monthCheck = 0;\n\n    // parse and clean up WHO data\n    let whoCountryCodes = [];\n    data.who_data.forEach(function(d,i){\n        // parse dates\n        // d.date = moment(d.Date_reported).startOf('day').toDate();\n        d.dayOfYear =  moment(d.date).dayOfYear();\n        if(d.dayOfYear!==dayCheck) dayTotal++;\n        d.dayTotal = dayTotal;\n        d.week = moment(d.date).isoWeek();\n        if(d.week!==weekCheck) weekTotal++;\n        d.weekTotal = weekTotal;\n        d.month = d.date.getMonth();\n        if(d.month!==monthCheck) monthTotal++;\n        d.monthTotal = monthTotal;\n        d.year = d.date.getFullYear();\n        d.week_start = new Date(moment(d.date).startOf('isoWeek').startOf('day').toDate());\n        d.month_start = new Date(moment(d.date).startOf('month').startOf('day').toDate());\n\n        // set negative values to zero for new cases/deaths\n        if(d.new_deaths<0)d.new_deaths = 0;\n        if(d.new_cases<0)d.new_cases = 0;\n\n        if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n\n        // add country code to array so we know it is used\n        if((!whoCountryCodes.includes(d.country_code))&&(d.country_code.length>1)) {\n            whoCountryCodes.push(d.country_code);\n        }\n\n        // delete old unused keys\n        delete d.Date_reported;\n        delete d.Country;\n        delete d.New_cases;\n        delete d.New_deaths;\n        delete d.Country_code;\n        delete d.Cumulative_deaths;\n        delete d.Cumulative_cases;\n        delete d.Country_code;\n        delete d.WHO_region;\n        delete d.Country;\n        \n        // set incremental count\n        dayCheck = d.dayOfYear;\n        weekCheck = d.week;\n        monthCheck = d.month;\n    })\n   \n    //*********************\n    // parse vaccine cumulative data\n    //*********************\n\n    // clean up values\n    data.vaccines_data.forEach(function(d,i){\n        d.date = moment(d.date).startOf('day').toDate();\n    });\n    \n    data.vaccines_data.sort(function(a,b){\n        return new Date(a.date) - new Date(b.date);\n    });\n\n    // filter out vaccine data to only include records with ISO3 country codes\n    data.vaccines_data = data.vaccines_data.filter(function(d,i){\n        return d.iso_code.length===3 && d.total_vaccinations > 0;\n    })\n\n    var vaccineDataByCountry = flatGroup(data.vaccines_data, d => d.iso_code);\n\n    // fill out missing vaccinations date records (extend cumulative from last data date)\n    var newDays = [];\n    var hasDays = [];\n    var lastRecord = {};\n    var vDataFlat = [];\n\n    vaccineDataByCountry.forEach(function(d,i){\n\n        var minDt = new Date(data.min_date);\n        var maxDt = new Date(data.max_date);\n\n        hasDays = [];\n        newDays = [];\n\n        // set the last recorded date fo this country\n        d.lastDate = moment(max(d[1], function(d,i){ return d.date })).startOf('day').toDate();\n        \n        // reset country name and code using country table\n        data.country.forEach(function(dd,ii){\n            if(dd.country_iso3===d[0]){\n                d.ifrc_region = dd.ifrc_region;\n                d.country_name = dd.country_name;\n                d.country_code = dd.country_iso2;\n                dd.data_updated = d.lastDate;\n\n            }\n        })\n\n        // loop through all date records for this country and add to hasDays array\n        d[1].forEach(function(dd,ii){\n            dd.total_vaccinations = parseInt(dd.total_vaccinations);\n            dd.daily_vaccinations = parseInt(dd.daily_vaccinations);\n            hasDays.push(new Date(dd.date).getTime());\n        })\n\n        // fill in missing dates\n        // d[1].forEach(function(dd,ii){\n            for (var day = new Date(data.min_vaccine_date);day <= data.max_date; day.setDate(day.getDate() + 1)) {\n                var newDay = new Date(day).getTime();\n                if(!hasDays.includes(newDay)){\n                    newDays.push({date: new Date(day), total_vaccinations: null, daily_vaccinations: 0})\n                }\n            }\n        // });\n\n        d[1].push(...newDays);\n        d[1].sort(function(a,b){\n            return new Date(a.date) - new Date(b.date);\n        });\n\n        // loop through dates and fill in missing cumulative values\n        var totalVac = 0;\n        var totalVac100 = 0;\n        var people_vaccinated_per_hundred = 0;\n        var people_fully_vaccinated_per_hundred = 0;\n        d[1].forEach(function(dd,ii){\n            if(dd.total_vaccinations){\n                totalVac = dd.total_vaccinations;\n            } else {\n                dd.total_vaccinations = totalVac;\n            }\n            if(dd.total_vaccinations_per_hundred){\n                totalVac100 = dd.total_vaccinations_per_hundred\n            } else {\n                dd.total_vaccinations_per_hundred = totalVac100;\n            }\n            if(dd.people_vaccinated_per_hundred){\n                people_vaccinated_per_hundred = dd.people_vaccinated_per_hundred;\n            } else {\n                dd.people_vaccinated_per_hundred = people_vaccinated_per_hundred;\n            }\n            if(dd.people_fully_vaccinated_per_hundred){\n                people_fully_vaccinated_per_hundred = dd.people_fully_vaccinated_per_hundred;\n            } else {\n                dd.people_fully_vaccinated_per_hundred = people_fully_vaccinated_per_hundred;\n            }\n\n            var countryName;\n            if(d.country_name==null) { countryName = d[0];\n            } else {\n                countryName = d.country_name\n            }\n            var dailyVac = 0;\n            if((dd.daily_vaccinations)&&(dd.daily_vaccinations>0)) dailyVac = dd.daily_vaccinations;\n\n            vDataFlat.push({\n                date: new Date(dd.date),\n                lastDate: d.lastDate,\n                total_vaccinations_per_hundred: parseFloat(totalVac100),\n                people_vaccinated_per_hundred: parseFloat(people_vaccinated_per_hundred),\n                people_fully_vaccinated_per_hundred: parseFloat(people_fully_vaccinated_per_hundred),\n                iso_code: d[0], \n                ifrc_region: d.ifrc_region,\n                country_name: countryName,\n                country_code: d.country_code, \n                total_vaccinations: totalVac,\n                daily_vaccinations: dailyVac\n            })\n        })\n    });\n\n    data.vaccines_data = vDataFlat;\n\n    data.vaccines_data.sort(function(a,b){\n        return new Date(a.date) - new Date(b.date);\n    });\n\n    // reset count for incremental day/week/month numbers\n    dayTotal = -1;\n    dayCheck = 0;\n    weekTotal = -1;\n    weekCheck = -1;\n    monthTotal = 0;\n    monthCheck = 0;\n    \n    data.vaccines_data.forEach(function(d,i){\n        if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n        d.dayOfYear =  moment(d.date).dayOfYear();\n        if(d.dayOfYear!==dayCheck) dayTotal++;\n        d.dayTotal = dayTotal;\n        d.week = moment(d.date).isoWeek();\n        if(d.week!==weekCheck) weekTotal++;\n        d.weekTotal = weekTotal;\n        d.month = d.date.getMonth();\n        if(d.month!==monthCheck) monthTotal++;\n        d.monthTotal = monthTotal;\n        d.year = d.date.getFullYear();\n        dayCheck = d.dayOfYear;\n        weekCheck = d.week;\n        monthCheck = d.month;\n        d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n        d.month_start = new Date(moment(d.date).startOf('month').toDate());\n    })\n\n    //*********************\n    // add most recent owid vaccine data record to data.country\n    //*********************\n\n    // group who data by country\n    var vaccineDataByCountry = flatGroup(data.vaccines_data, d => d.country_code);\n\n    //*********************\n    // add most recent records from both datasets to data.country\n    //*********************\n\n    // first group who data by country\n    var whoDataByCountry = flatGroup(data.who_data, d => d.country_code);\n\n    data.country.forEach(function(d,i){\n        d.cumulative_cases_per_100k = 0;\n        d.cumulative_deaths_per_100k = 0;\n        d.cumulative_vaccines_per_100k = 0;\n        d.people_fully_vaccinated_per_hundred = 0;\n        d.people_vaccinated_per_hundred = 0;\n        d.total_vaccinations_per_hundred = 0;\n        var countryCode = d.country_iso2;\n\n        // calculate latest date and at weekly intervals (for bi-weekly percent change calculation)\n        whoDataByCountry.forEach(function(dd,ii){\n            if(dd[0]==countryCode){\n                d.who_daily_latest = dd[1][dd[1].length-1];\n                d.who_daily_7_days = dd[1][dd[1].length-8];\n                d.who_daily_14_days = dd[1][dd[1].length-15];\n                d.who_daily_21_days = dd[1][dd[1].length-22];\n                d.who_daily_28_days = dd[1][dd[1].length-29];\n                d.cumulative_cases_per_100k = (d.who_daily_latest.cumulative_cases/(d.population/100000));\n                d.cumulative_deaths_per_100k = (d.who_daily_latest.cumulative_deaths/(d.population/100000));\n                d.cumulative_cases = d.who_daily_latest.cumulative_cases;\n                d.cumulative_deaths = d.who_daily_latest.cumulative_deaths;\n                d.cumulative_deaths_7_days = d.who_daily_7_days.cumulative_deaths;\n                d.cumulative_deaths_14_days = d.who_daily_14_days.cumulative_deaths;\n                d.cumulative_deaths_21_days = d.who_daily_21_days.cumulative_deaths;\n                d.cumulative_deaths_28_days = d.who_daily_28_days.cumulative_deaths;\n                d.cumulative_cases_7_days = d.who_daily_7_days.cumulative_cases;\n                d.cumulative_cases_14_days = d.who_daily_14_days.cumulative_cases;\n                d.cumulative_cases_21_days = d.who_daily_21_days.cumulative_cases;\n                d.cumulative_cases_28_days = d.who_daily_28_days.cumulative_cases;\n                var percentChange = parseFloat(((d.cumulative_cases - d.cumulative_cases_14_days)-(d.cumulative_cases_14_days-d.cumulative_cases_28_days))/(d.cumulative_cases_14_days-d.cumulative_cases_28_days));\n                if(isFinite(percentChange)) { d.percent_change = percentChange; } else { d.percent_change = 0 }\n            }\n        })\n\n        vaccineDataByCountry.forEach(function(dd,ii){\n            if(dd[0]==countryCode){\n                if(typeof(dd[0]!='undefined')){\n                    d.vaccine_daily_latest = dd[1][dd[1].length-1];\n                    d.cumulative_vaccines_per_100k = (d.vaccine_daily_latest.total_vaccinations/(d.population/100000));\n                    d.people_fully_vaccinated_per_hundred = d.vaccine_daily_latest.people_fully_vaccinated_per_hundred;\n                    d.people_vaccinated_per_hundred = d.vaccine_daily_latest.people_vaccinated_per_hundred;\n                    d.total_vaccinations_per_hundred = d.vaccine_daily_latest.total_vaccinations_per_hundred;\n                    d.total_vaccinations = d.vaccine_daily_latest.total_vaccinations;\n                }\n            }\n        })\n\n        if(!isFinite(d.cumulative_cases_per_100k))d.cumulative_cases_per_100k = 0;\n        if(!isFinite(d.cumulative_deaths_per_100k))d.cumulative_deaths_per_100k = 0;\n        if(!isFinite(d.cumulative_vaccines_per_100k))d.cumulative_vaccines_per_100k = 0;\n        d.country_code = d.country_iso2;\n\n    })\n\n    data.original = clone(data);\n\n}\n\nexport default ParseData;\n"]},"metadata":{},"sourceType":"module"}