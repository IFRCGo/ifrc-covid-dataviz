{"ast":null,"code":"import * as d3 from \"d3\";\nimport moment from 'moment';\nexport function drawTimechart(data, options) {\n  // console.log('draw timechart');\n  // console.log(data);\n  // console.log(options);\n  // const groupedData = d3.group(data.who_data, d => d[options.timeline_frequency+'Total'], d => d.ifrc_region)\n  const groupedData = [];\n  data.who_data.forEach(function (d, i) {\n    groupedData[d[options.timeline_frequency + 'Total']] = groupedData[d[options.timeline_frequency + 'Total']] || {};\n    if (options.timeline_frequency == 'day') groupedData[d[options.timeline_frequency + 'Total']].date = d.date;\n    if (options.timeline_frequency == 'week') groupedData[d[options.timeline_frequency + 'Total']].date = moment(d.date).startOf('isoWeek').toDate();\n    if (options.timeline_frequency == 'month') groupedData[d[options.timeline_frequency + 'Total']].date = moment(d.date).startOf('month').toDate();\n    groupedData[d[options.timeline_frequency + 'Total']].region[d.ifrc_region] = groupedData[d[options.timeline_frequency + 'Total']].region[d.ifrc_region] || {\n      new_cases: 0,\n      new_deaths: 0,\n      cumulative_cases: 0,\n      cumulative_deaths: 0\n    };\n    groupedData[d[options.timeline_frequency + 'Total']].region[d.ifrc_region].new_cases += d.new_cases;\n    groupedData[d[options.timeline_frequency + 'Total']].region[d.ifrc_region].new_deaths += d.new_deaths;\n    groupedData[d[options.timeline_frequency + 'Total']].region[d.ifrc_region].cumulative_cases += d.cumulative_cases;\n    groupedData[d[options.timeline_frequency + 'Total']].region[d.ifrc_region].cumulative_deaths += d.cumulative_deaths;\n  }); // totals by date\n\n  groupedData.forEach(function (d, i) {\n    d.total_new_cases = d.AF.new_cases + d.AP.new_cases + d.AM.new_cases + d.EU.new_cases + d.ME.new_cases + d.undefined.new_cases;\n    d.total_cumulative_cases = d.AF.cumulative_cases + d.AP.cumulative_cases + d.AM.cumulative_cases + d.EU.cumulative_cases + d.ME.cumulative_cases + d.undefined.cumulative_cases;\n    d.total_new_deaths = d.AF.new_deaths + d.AP.new_deaths + d.AM.new_deaths + d.EU.new_deaths + d.ME.new_deaths + d.undefined.new_deaths;\n    d.total_cumulative_deaths = d.AF.cumulative_deaths + d.AP.cumulative_deaths + d.AM.cumulative_deaths + d.EU.cumulative_deaths + d.ME.cumulative_deaths + d.undefined.cumulative_deaths;\n  });\n  console.log(groupedData);\n  const numIntervals = d3.max(data.who_data, function (d, i) {\n    return d[options.timeline_frequency + 'Total'];\n  });\n  const maxCases = d3.max(groupedData, function (d, i) {\n    if (options.timeline_type == 'non-cumulative') return d.total_new_cases;\n    if (options.timeline_type == 'cumulative') return d.total_cumulative_cases;\n    if (options.timeline_type == 'stacked') return 100;\n  }); // define date range\n\n  const minDate = groupedData[0].date;\n  const maxDate = groupedData[numIntervals].date;\n  const svg = d3.select('#timechart_svg').attr('fill', 'blue');\n  const width = parseInt(svg.attr('width'));\n  const barWidth = width / numIntervals;\n  const barSpacing = 0.2;\n  const xScale = d3.scaleLinear().range([0, width]).domain([minDate, maxDate]);\n  const yScaleCases = d3.scaleLinear().range([140, 0]).domain([0, maxCases]);\n  console.log('minDate');\n  console.log(minDate);\n  console.log('maxDate');\n  console.log(maxDate); // CASES\n  // loop through groupedData and draw bars\n\n  const casesBarGroups = svg.selectAll('.cases_bar_group').data(groupedData).enter().append('g').attr('transform', function (d, i) {\n    return 'translate(' + xScale(d.date) + ')';\n  });\n  casesBarGroups.append('rect').attr('x', barWidth * barSpacing).attr('y', 0).attr('width', barWidth - barWidth * barSpacing * 2).attr('height', function (d, i) {\n    console.log(d);\n  }); // 10\n  // 0.1\n  // 1 - 8 - 1\n  // draw x-axis\n  // draw y-axis\n}\nexport function updateTimechart(data) {\n  console.log('update timechart');\n}\nexport default drawTimechart;","map":{"version":3,"sources":["/Users/matthewsmawfield/www/ifrc-covid-dataviz/src/Timechart.js"],"names":["d3","moment","drawTimechart","data","options","groupedData","who_data","forEach","d","i","timeline_frequency","date","startOf","toDate","region","ifrc_region","new_cases","new_deaths","cumulative_cases","cumulative_deaths","total_new_cases","AF","AP","AM","EU","ME","undefined","total_cumulative_cases","total_new_deaths","total_cumulative_deaths","console","log","numIntervals","max","maxCases","timeline_type","minDate","maxDate","svg","select","attr","width","parseInt","barWidth","barSpacing","xScale","scaleLinear","range","domain","yScaleCases","casesBarGroups","selectAll","enter","append","updateTimechart"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\nimport moment from 'moment';\n\nexport function drawTimechart(data, options) {\n\n    // console.log('draw timechart');\n    // console.log(data);\n    // console.log(options);\n    // const groupedData = d3.group(data.who_data, d => d[options.timeline_frequency+'Total'], d => d.ifrc_region)\n\n    const groupedData = [];\n\n    data.who_data.forEach(function(d,i){\n        groupedData[d[options.timeline_frequency+'Total']] = groupedData[d[options.timeline_frequency+'Total']] || {};\n        if(options.timeline_frequency=='day') groupedData[d[options.timeline_frequency+'Total']].date = d.date;\n        if(options.timeline_frequency=='week') groupedData[d[options.timeline_frequency+'Total']].date = moment(d.date).startOf('isoWeek').toDate();\n        if(options.timeline_frequency=='month') groupedData[d[options.timeline_frequency+'Total']].date = moment(d.date).startOf('month').toDate();\n        groupedData[d[options.timeline_frequency+'Total']].region[d.ifrc_region] = groupedData[d[options.timeline_frequency+'Total']].region[d.ifrc_region] || {new_cases: 0, new_deaths: 0, cumulative_cases: 0, cumulative_deaths: 0};\n        groupedData[d[options.timeline_frequency+'Total']].region[d.ifrc_region].new_cases += d.new_cases;\n        groupedData[d[options.timeline_frequency+'Total']].region[d.ifrc_region].new_deaths += d.new_deaths;\n        groupedData[d[options.timeline_frequency+'Total']].region[d.ifrc_region].cumulative_cases += d.cumulative_cases;\n        groupedData[d[options.timeline_frequency+'Total']].region[d.ifrc_region].cumulative_deaths += d.cumulative_deaths;\n    });\n\n    // totals by date\n    groupedData.forEach(function(d,i){\n        d.total_new_cases = d.AF.new_cases + d.AP.new_cases + d.AM.new_cases + d.EU.new_cases + d.ME.new_cases + d.undefined.new_cases; \n        d.total_cumulative_cases = d.AF.cumulative_cases + d.AP.cumulative_cases + d.AM.cumulative_cases + d.EU.cumulative_cases + d.ME.cumulative_cases + d.undefined.cumulative_cases; \n        d.total_new_deaths = d.AF.new_deaths + d.AP.new_deaths + d.AM.new_deaths + d.EU.new_deaths + d.ME.new_deaths + d.undefined.new_deaths; \n        d.total_cumulative_deaths = d.AF.cumulative_deaths + d.AP.cumulative_deaths + d.AM.cumulative_deaths + d.EU.cumulative_deaths + d.ME.cumulative_deaths + d.undefined.cumulative_deaths; \n    })\n\n    console.log(groupedData);\n\n    const numIntervals = d3.max(data.who_data, function(d,i){\n        return d[options.timeline_frequency+'Total'];\n    });\n\n    const maxCases = d3.max(groupedData, function(d,i){\n        if(options.timeline_type=='non-cumulative') return d.total_new_cases;\n        if(options.timeline_type=='cumulative') return d.total_cumulative_cases;\n        if(options.timeline_type=='stacked') return 100;\n    })\n\n    // define date range\n    const minDate = groupedData[0].date;\n    const maxDate = groupedData[numIntervals].date;\n\n    const svg = d3.select('#timechart_svg').attr('fill', 'blue');\n    const width = parseInt(svg.attr('width'));\n    const barWidth = width/numIntervals;\n    const barSpacing = 0.2;\n\n    const xScale = d3.scaleLinear()\n    .range([0,width])\n    .domain([minDate,maxDate]);\n\n    const yScaleCases = d3.scaleLinear()\n    .range([140,0])\n    .domain([0,maxCases]);\n\n    console.log('minDate');\n    console.log(minDate);\n    console.log('maxDate');\n    console.log(maxDate);\n\n    // CASES\n    // loop through groupedData and draw bars\n    const casesBarGroups = svg.selectAll('.cases_bar_group')\n    .data(groupedData)\n    .enter()\n    .append('g')\n    .attr('transform', function(d,i){ return 'translate('+xScale(d.date)+')'})\n\n    casesBarGroups.append('rect')\n    .attr('x', (barWidth*barSpacing))\n    .attr('y', 0)\n    .attr('width', barWidth-(barWidth*barSpacing*2))\n    .attr('height', function(d,i){\n        console.log(d);\n    });\n\n    // 10\n\n    // 0.1\n\n    // 1 - 8 - 1\n    \n    // draw x-axis\n\n\n    // draw y-axis\n\n}\n\nexport function updateTimechart(data) {\n\n    console.log('update timechart');\n\n}\n\nexport default drawTimechart;\n"]},"metadata":{},"sourceType":"module"}