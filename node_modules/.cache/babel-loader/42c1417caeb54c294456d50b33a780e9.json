{"ast":null,"code":"// import * as d3 from \"d3\";\nimport { min, max, group, flatGroup } from \"d3\";\nimport moment from 'moment';\nimport clone from 'just-clone';\nexport function ParseData(data, options) {\n  // console.log('ParseData');\n  // console.log(options);\n  data.equity_data.forEach(function (d, i) {\n    d.vaccines_used = [];\n    d.number_vaccine_types_used = 0;\n    data.vaccines_who_data.forEach(function (dd, ii) {\n      if (d.country_iso3 == dd.ISO3) {\n        d.data_updated = moment(dd.DATE_UPDATED).startOf('day').toDate();\n        d.number_vaccine_types_used = dd.NUMBER_VACCINES_TYPES_USED;\n        d.vaccines_used = dd.VACCINES_USED.split(',').map(function (item) {\n          return item.trim();\n        });\n      }\n    });\n  }); // max dates\n\n  let maxDate = moment(new Date(max(data.who_data, function (d) {\n    return d.Date_reported;\n  })));\n  let minDate = moment(new Date(min(data.who_data, function (d) {\n    return d.Date_reported;\n  }))); // override\n\n  minDate = moment('2019-12-31');\n  let minDateVaccines = new Date(min(data.vaccines_data, function (d) {\n    return d.date;\n  }));\n  let maxDateVaccines = new Date(max(data.vaccines_data, function (d) {\n    return d.date;\n  }));\n\n  if (maxDateVaccines > maxDate) {\n    maxDate = maxDateVaccines;\n  } // if(maxDate<moment()){\n  //     maxDate = moment();\n  // }\n  // if(maxDateVaccines<moment()){\n  //     maxDateVaccines = moment();\n  // }\n\n\n  options.maxDataDate = maxDate;\n  options.maxVDataDate = maxDateVaccines;\n  options.maxDate = moment(maxDate).toDate();\n  options.maxVDate = moment(maxDateVaccines).toDate();\n  options.minDate = moment(minDate).toDate(); // parse who data\n\n  let dayTotal = -1;\n  let dayCheck = 0;\n  let weekTotal = -1;\n  let weekCheck = -1;\n  let monthTotal = 0;\n  let monthCheck = 0;\n  data.who_data.sort(function (a, b) {\n    return new Date(a.Date_reported) - new Date(b.Date_reported);\n  });\n  var countryCodes = [];\n  var ccArray = [];\n  data.who_data.forEach(function (d, i) {\n    d.date = new Date(d.Date_reported);\n    d.dayOfYear = moment(d.date).dayOfYear();\n    if (d.dayOfYear !== dayCheck) dayTotal++;\n    d.dayTotal = dayTotal;\n    d.week = moment(d.date).isoWeek();\n    if (d.week !== weekCheck) weekTotal++;\n    d.weekTotal = weekTotal;\n    d.month = d.date.getMonth();\n    if (d.month !== monthCheck) monthTotal++;\n    d.monthTotal = monthTotal;\n    d.year = d.date.getFullYear();\n    d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n    d.month_start = new Date(moment(d.date).startOf('month').toDate());\n    d.new_cases = parseInt(d.New_cases);\n    d.new_deaths = parseInt(d.New_deaths);\n    d.cumulative_deaths = parseInt(d.Cumulative_deaths);\n    d.cumulative_cases = parseInt(d.Cumulative_cases);\n    d.country_code = d.Country_code;\n    d.country_name = null;\n    data.equity_data.forEach(function (dd, ii) {\n      if (dd.country_iso2 === d.Country_code) {\n        d.ifrc_region = dd.ifrc_region;\n        d.country_name = dd.country_name;\n      }\n    });\n    if (d.ifrc_region == undefined) d.ifrc_region = 'OTH';\n\n    if (!countryCodes.includes(d.country_code)) {\n      if (d.ifrc_region == 'OTH') {\n        ccArray.push([d.Country, d.country_code]);\n      }\n\n      countryCodes.push(d.country_code);\n    }\n\n    delete d.Date_reported;\n    delete d.Country;\n    delete d.New_cases;\n    delete d.New_deaths;\n    delete d.Country_code;\n    delete d.Cumulative_deaths;\n    delete d.Cumulative_cases; // delete d.Country_code;\n\n    delete d.WHO_region; // delete d.Country;\n\n    dayCheck = d.dayOfYear;\n    weekCheck = d.week;\n    monthCheck = d.month;\n  }); // check for missing coutries\n  // ccArray.forEach(function(d,i){\n  //     console.log(d[1])\n  // })\n  // console.log(ccArray);\n  // parse vaccine cumulative data\n\n  dayTotal = -1;\n  dayCheck = 0;\n  weekTotal = -1;\n  weekCheck = -1;\n  monthTotal = 0;\n  monthCheck = 0; // filter out vaccine data on only include records with ISO3 country codes\n\n  data.vaccines_data_cumulative = data.vaccines_data.filter(function (d, i) {\n    return d.iso_code.length === 3 && d.total_vaccinations > 0;\n  }); // fill out missing vaccinations date records (extend cumulative)\n\n  var vGroup = flatGroup(data.vaccines_data_cumulative, d => d.iso_code);\n  var newDates = [];\n  var hasDays = [];\n  var initDate = 0;\n  var lastRecord = {};\n  var vDataFlat = [];\n  vGroup.forEach(function (d, i) {\n    var minDt = new Date(minDateVaccines);\n    var maxDt = new Date(maxDateVaccines);\n    var hasDays = [];\n    var newDays = [];\n    var newDays = [];\n    data.equity_data.forEach(function (dd, ii) {\n      if (dd.country_iso3 === vGroup[i][0]) {\n        d.ifrc_region = dd.ifrc_region;\n        d.country_name = dd.country_name;\n        d.country_code = dd.country_iso2;\n      }\n    });\n    vGroup[i].lastDate = new Date(max(vGroup[i][1], function (d, i) {\n      return d.date;\n    }));\n    vGroup[i][1].forEach(function (dd, ii) {\n      hasDays.push(new Date(dd.date).getTime());\n    }); // if((i<1)||(d[0] =='BFA')||(d[0] =='RWA')){\n\n    vGroup[i][1].forEach(function (dd, ii) {\n      dd.total_vaccinations = parseInt(dd.total_vaccinations);\n\n      for (var day = minDt; day <= maxDt; day.setDate(day.getDate() + 1)) {\n        var newDay = day.getTime();\n\n        if (!hasDays.includes(newDay)) {\n          newDays.push({\n            date: new Date(day),\n            total_vaccinations: null\n          });\n        }\n      } // dd.lastDate = dd.date;\n\n    });\n    vGroup[i][1].push(...newDays);\n    vGroup[i][1].sort(function (a, b) {\n      return new Date(a.date) - new Date(b.date);\n    });\n    var totalVac = 0;\n    var totalVac100 = 0;\n    var people_vaccinated_per_hundred = 0;\n    var people_fully_vaccinated_per_hundred = 0;\n    vGroup[i][1].forEach(function (dd, ii) {\n      if (dd.total_vaccinations) {\n        totalVac = dd.total_vaccinations;\n      } else {\n        dd.total_vaccinations = totalVac;\n      }\n\n      if (dd.total_vaccinations_per_hundred) {\n        totalVac100 = dd.total_vaccinations_per_hundred;\n      } else {\n        dd.total_vaccinations_per_hundred = totalVac100;\n      }\n\n      if (dd.people_vaccinated_per_hundred) {\n        people_vaccinated_per_hundred = dd.people_vaccinated_per_hundred;\n      } else {\n        dd.people_vaccinated_per_hundred = people_vaccinated_per_hundred;\n      }\n\n      if (dd.people_fully_vaccinated_per_hundred) {\n        people_fully_vaccinated_per_hundred = dd.people_fully_vaccinated_per_hundred;\n      } else {\n        dd.people_fully_vaccinated_per_hundred = people_fully_vaccinated_per_hundred;\n      }\n\n      var countryName;\n\n      if (vGroup[i].country_name == null) {\n        countryName = vGroup[i][0];\n      } else {\n        countryName = vGroup[i].country_name;\n      }\n\n      vDataFlat.push({\n        date: new Date(dd.date),\n        lastDate: vGroup[i].lastDate,\n        total_vaccinations_per_hundred: parseFloat(totalVac100),\n        people_vaccinated_per_hundred: people_vaccinated_per_hundred,\n        people_fully_vaccinated_per_hundred: people_fully_vaccinated_per_hundred,\n        iso_code: vGroup[i][0],\n        ifrc_region: vGroup[i].ifrc_region,\n        country_name: countryName,\n        country_code: vGroup[i].country_code,\n        total_vaccinations: totalVac\n      });\n    });\n  });\n  data.vaccines_data_cumulative = vDataFlat;\n  data.vaccines_data_cumulative.sort(function (a, b) {\n    return new Date(a.date) - new Date(b.date);\n  });\n  data.vaccines_data_cumulative.forEach(function (d, i) {\n    if (d.ifrc_region == undefined) d.ifrc_region = 'OTH';\n    d.dayOfYear = moment(d.date).dayOfYear();\n    if (d.dayOfYear !== dayCheck) dayTotal++;\n    d.dayTotal = dayTotal;\n    d.week = moment(d.date).isoWeek();\n    if (d.week !== weekCheck) weekTotal++;\n    d.weekTotal = weekTotal;\n    d.month = d.date.getMonth();\n    if (d.month !== monthCheck) monthTotal++;\n    d.monthTotal = monthTotal;\n    d.year = d.date.getFullYear();\n    dayCheck = d.dayOfYear;\n    weekCheck = d.week;\n    monthCheck = d.month;\n    d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n    d.month_start = new Date(moment(d.date).startOf('month').toDate());\n  }); // parse vaccine daily data\n\n  dayTotal = -1;\n  dayCheck = 0;\n  weekTotal = -1;\n  weekCheck = -1;\n  monthTotal = 0;\n  monthCheck = 0; // filter out vaccine data on only include records with ISO3 country codes\n\n  data.vaccines_data_daily = data.vaccines_data.filter(function (d, i) {\n    return d.iso_code.length === 3 && d.daily_vaccinations > 0;\n  }); // fill out missing vaccinations date records (extend cumulative)\n\n  var vGroup = flatGroup(data.vaccines_data_daily, d => d.iso_code);\n  var newDates = [];\n  var hasDays = [];\n  var initDate = 0;\n  var lastRecord = {};\n  var vDataFlat = [];\n  vGroup.forEach(function (d, i) {\n    var minDt = new Date(minDateVaccines);\n    var maxDt = new Date(maxDateVaccines);\n    var hasDays = [];\n    var newDays = [];\n    var newDays = [];\n    data.equity_data.forEach(function (dd, ii) {\n      if (dd.country_iso3 === vGroup[i][0]) {\n        d.ifrc_region = dd.ifrc_region;\n        d.country_name = dd.country_name;\n        d.country_code = dd.country_iso2;\n      }\n    });\n    vGroup[i][1].forEach(function (dd, ii) {\n      hasDays.push(new Date(dd.date).getTime());\n    }); // if((i<1)||(d[0] =='BFA')||(d[0] =='RWA')){\n\n    vGroup[i][1].forEach(function (dd, ii) {\n      dd.daily_vaccinations = parseInt(dd.daily_vaccinations);\n\n      for (var day = minDt; day <= maxDt; day.setDate(day.getDate() + 1)) {\n        var newDay = day.getTime();\n\n        if (!hasDays.includes(newDay)) {\n          newDays.push({\n            date: new Date(day),\n            daily_vaccinations: null\n          });\n        }\n      }\n    });\n    vGroup[i][1].push(...newDays);\n    vGroup[i][1].sort(function (a, b) {\n      return new Date(a.date) - new Date(b.date);\n    });\n    var daily_vaccinations = 0;\n    vGroup[i][1].forEach(function (dd, ii) {\n      if (dd.daily_vaccinations) {\n        daily_vaccinations = dd.daily_vaccinations;\n      } else {\n        dd.daily_vaccinations = daily_vaccinations;\n      }\n\n      var countryName;\n\n      if (vGroup[i].country_name == null) {\n        countryName = vGroup[i][0];\n      } else {\n        countryName = vGroup[i].country_name;\n      }\n\n      vDataFlat.push({\n        date: new Date(dd.date),\n        iso_code: vGroup[i][0],\n        ifrc_region: vGroup[i].ifrc_region,\n        country_name: countryName,\n        country_code: vGroup[i].country_code,\n        daily_vaccinations: daily_vaccinations\n      });\n    });\n  });\n  data.vaccines_data_daily = vDataFlat;\n  data.vaccines_data_daily.sort(function (a, b) {\n    return new Date(a.date) - new Date(b.date);\n  });\n  data.vaccines_data_daily.forEach(function (d, i) {\n    if (d.ifrc_region == undefined) d.ifrc_region = 'OTH';\n    d.dayOfYear = moment(d.date).dayOfYear();\n    if (d.dayOfYear !== dayCheck) dayTotal++;\n    d.dayTotal = dayTotal;\n    d.week = moment(d.date).isoWeek();\n    if (d.week !== weekCheck) weekTotal++;\n    d.weekTotal = weekTotal;\n    d.month = d.date.getMonth();\n    if (d.month !== monthCheck) monthTotal++;\n    d.monthTotal = monthTotal;\n    d.year = d.date.getFullYear();\n    dayCheck = d.dayOfYear;\n    weekCheck = d.week;\n    monthCheck = d.month;\n    d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n    d.month_start = new Date(moment(d.date).startOf('month').toDate());\n  }); // parse equity data inform/hdi indexes\n\n  data.equity_data.forEach(function (d, i) {\n    if (d.hdi_category.match(/very high/i)) {\n      d.hdi_category = 'very-high';\n    } else if (d.hdi_category.match(/high/i)) {\n      d.hdi_category = 'high';\n    } else if (d.hdi_category.match(/medium/i)) {\n      d.hdi_category = 'medium';\n    } else if (d.hdi_category.match(/low/i)) {\n      d.hdi_category = 'low';\n    }\n\n    if (d.inform_severity.match(/very high/i)) {\n      d.inform_severity = 'very-high';\n    } else if (d.inform_severity.match(/high/i)) {\n      d.inform_severity = 'high';\n    } else if (d.inform_severity.match(/medium/i)) {\n      d.inform_severity = 'medium';\n    } else if (d.inform_severity.match(/low/i)) {\n      d.inform_severity = 'low';\n    } else if (d.inform_severity.match(/no/i)) {\n      d.inform_severity = 'no-score';\n    }\n  });\n  data.equity_data = data.equity_data.filter(function (d, i) {\n    return countryCodes.includes(d.country_iso2);\n  });\n  data.original = clone(data); // console.log(data);\n}\n_c = ParseData;\nexport default ParseData;\n\nvar _c;\n\n$RefreshReg$(_c, \"ParseData\");","map":{"version":3,"sources":["/Users/matthewsmawfield/www/ifrc-covid-dataviz/src/ParseData.js"],"names":["min","max","group","flatGroup","moment","clone","ParseData","data","options","equity_data","forEach","d","i","vaccines_used","number_vaccine_types_used","vaccines_who_data","dd","ii","country_iso3","ISO3","data_updated","DATE_UPDATED","startOf","toDate","NUMBER_VACCINES_TYPES_USED","VACCINES_USED","split","map","item","trim","maxDate","Date","who_data","Date_reported","minDate","minDateVaccines","vaccines_data","date","maxDateVaccines","maxDataDate","maxVDataDate","maxVDate","dayTotal","dayCheck","weekTotal","weekCheck","monthTotal","monthCheck","sort","a","b","countryCodes","ccArray","dayOfYear","week","isoWeek","month","getMonth","year","getFullYear","week_start","month_start","new_cases","parseInt","New_cases","new_deaths","New_deaths","cumulative_deaths","Cumulative_deaths","cumulative_cases","Cumulative_cases","country_code","Country_code","country_name","country_iso2","ifrc_region","undefined","includes","push","Country","WHO_region","vaccines_data_cumulative","filter","iso_code","length","total_vaccinations","vGroup","newDates","hasDays","initDate","lastRecord","vDataFlat","minDt","maxDt","newDays","lastDate","getTime","day","setDate","getDate","newDay","totalVac","totalVac100","people_vaccinated_per_hundred","people_fully_vaccinated_per_hundred","total_vaccinations_per_hundred","countryName","parseFloat","vaccines_data_daily","daily_vaccinations","hdi_category","match","inform_severity","original"],"mappings":"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","sourcesContent":["// import * as d3 from \"d3\";\nimport {min,max,group,flatGroup} from \"d3\";\nimport moment from 'moment';\nimport clone from 'just-clone';\n\nexport function ParseData(data, options) {\n\n    // console.log('ParseData');\n    // console.log(options);\n        \n    data.equity_data.forEach(function(d,i){\n        d.vaccines_used = [];\n        d.number_vaccine_types_used = 0;\n        data.vaccines_who_data.forEach(function(dd,ii){\n            if(d.country_iso3==dd.ISO3){\n                d.data_updated = moment(dd.DATE_UPDATED).startOf('day').toDate();\n                d.number_vaccine_types_used = dd.NUMBER_VACCINES_TYPES_USED;\n                d.vaccines_used = dd.VACCINES_USED.split(',').map(function(item) {\n                    return item.trim();\n                  });\n            }\n        })\n    })\n    // max dates\n    let maxDate = moment(new Date(max(data.who_data, function(d){\n        return d.Date_reported;\n    })));\n\n    let minDate = moment(new Date(min(data.who_data, function(d){\n        return d.Date_reported;\n    })));\n\n    // override\n    minDate = moment('2019-12-31');\n\n    let minDateVaccines = (new Date(min(data.vaccines_data, function(d){\n        return d.date;\n    })));\n\n\n    let maxDateVaccines = (new Date(max(data.vaccines_data, function(d){\n        return d.date;\n    })));\n\n    if(maxDateVaccines>maxDate) {\n        maxDate = maxDateVaccines;\n    }\n\n    // if(maxDate<moment()){\n    //     maxDate = moment();\n    // }\n    // if(maxDateVaccines<moment()){\n    //     maxDateVaccines = moment();\n    // }\n    options.maxDataDate = maxDate;\n    options.maxVDataDate = maxDateVaccines;\n\n    options.maxDate = moment(maxDate).toDate();\n    options.maxVDate = moment(maxDateVaccines).toDate();\n    options.minDate = moment(minDate).toDate();\n\n    // parse who data\n\n    let dayTotal = -1;\n    let dayCheck = 0;\n\n    let weekTotal = -1;\n    let weekCheck = -1;\n\n    let monthTotal = 0;\n    let monthCheck = 0;\n\n    data.who_data.sort(function(a,b){\n        return new Date(a.Date_reported) - new Date(b.Date_reported);\n    });\n\n    var countryCodes = [];\n    var ccArray = [];\n\n    data.who_data.forEach(function(d,i){\n        d.date = new Date(d.Date_reported);\n        d.dayOfYear =  moment(d.date).dayOfYear();\n        if(d.dayOfYear!==dayCheck) dayTotal++;\n        d.dayTotal = dayTotal;\n\n        d.week = moment(d.date).isoWeek();\n        if(d.week!==weekCheck) weekTotal++;\n        d.weekTotal = weekTotal;\n        d.month = d.date.getMonth();\n        if(d.month!==monthCheck) monthTotal++;\n        d.monthTotal = monthTotal;\n        d.year = d.date.getFullYear();\n\n        d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n        d.month_start = new Date(moment(d.date).startOf('month').toDate());\n\n        d.new_cases = parseInt(d.New_cases);\n        d.new_deaths = parseInt(d.New_deaths);\n        d.cumulative_deaths = parseInt(d.Cumulative_deaths);\n        d.cumulative_cases = parseInt(d.Cumulative_cases);\n        d.country_code = d.Country_code;\n        d.country_name = null;\n        data.equity_data.forEach(function(dd,ii){\n            if(dd.country_iso2===d.Country_code){\n                d.ifrc_region = dd.ifrc_region;\n                d.country_name = dd.country_name;\n            }\n        })\n        if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n        if(!countryCodes.includes(d.country_code)) {\n            if(d.ifrc_region=='OTH'){\n                ccArray.push([d.Country, d.country_code]);\n            }\n            countryCodes.push(d.country_code);\n        }\n\n        delete d.Date_reported;\n        delete d.Country;\n        delete d.New_cases;\n        delete d.New_deaths;\n        delete d.Country_code;\n        delete d.Cumulative_deaths;\n        delete d.Cumulative_cases;\n        // delete d.Country_code;\n        delete d.WHO_region;\n        // delete d.Country;\n        dayCheck = d.dayOfYear;\n        weekCheck = d.week;\n        monthCheck = d.month;\n    })\n\n    // check for missing coutries\n    // ccArray.forEach(function(d,i){\n    //     console.log(d[1])\n    // })\n    // console.log(ccArray);\n\n    \n    // parse vaccine cumulative data\n    dayTotal = -1;\n    dayCheck = 0;\n\n    weekTotal = -1;\n    weekCheck = -1;\n    monthTotal = 0;\n    monthCheck = 0;\n\n    // filter out vaccine data on only include records with ISO3 country codes\n    data.vaccines_data_cumulative = data.vaccines_data.filter(function(d,i){\n        return d.iso_code.length===3 && d.total_vaccinations > 0;\n    })\n\n    // fill out missing vaccinations date records (extend cumulative)\n    var vGroup = flatGroup(data.vaccines_data_cumulative, d => d.iso_code);\n\n    var newDates = [];\n    var hasDays = [];\n    var initDate = 0;\n    var lastRecord = {};\n    var vDataFlat = [];\n    vGroup.forEach(function(d,i){\n\n        var minDt = new Date(minDateVaccines);\n        var maxDt = new Date(maxDateVaccines);\n        var hasDays = [];\n        var newDays = [];\n        var newDays = [];        \n        data.equity_data.forEach(function(dd,ii){\n            if(dd.country_iso3===vGroup[i][0]){\n                d.ifrc_region = dd.ifrc_region;\n                d.country_name = dd.country_name;\n                d.country_code = dd.country_iso2;\n                \n            }\n        })\n\n        vGroup[i].lastDate = new Date(max(vGroup[i][1], function(d,i){ return d.date }));\n\n        vGroup[i][1].forEach(function(dd,ii){\n            hasDays.push(new Date(dd.date).getTime());\n        })\n\n        // if((i<1)||(d[0] =='BFA')||(d[0] =='RWA')){\n        vGroup[i][1].forEach(function(dd,ii){\n            dd.total_vaccinations = parseInt(dd.total_vaccinations);\n            for (var day = minDt;day <= maxDt; day.setDate(day.getDate() + 1)) {\n                var newDay = day.getTime();\n                if(!hasDays.includes(newDay)){\n                    newDays.push({date: new Date(day), total_vaccinations: null})\n                }\n            }\n            // dd.lastDate = dd.date;\n        });\n\n        vGroup[i][1].push(...newDays);\n\n        vGroup[i][1].sort(function(a,b){\n            return new Date(a.date) - new Date(b.date);\n        });\n\n        var totalVac = 0;\n        var totalVac100 = 0;\n        var people_vaccinated_per_hundred = 0;\n        var people_fully_vaccinated_per_hundred = 0;\n\n        vGroup[i][1].forEach(function(dd,ii){\n\n            if(dd.total_vaccinations){\n                totalVac = dd.total_vaccinations;\n            } else {\n                dd.total_vaccinations = totalVac;\n            }\n            if(dd.total_vaccinations_per_hundred){\n                totalVac100 = dd.total_vaccinations_per_hundred\n            } else {\n                dd.total_vaccinations_per_hundred = totalVac100;\n            }\n            if(dd.people_vaccinated_per_hundred){\n                people_vaccinated_per_hundred = dd.people_vaccinated_per_hundred;\n            } else {\n                dd.people_vaccinated_per_hundred = people_vaccinated_per_hundred;\n            }\n            if(dd.people_fully_vaccinated_per_hundred){\n                people_fully_vaccinated_per_hundred = dd.people_fully_vaccinated_per_hundred;\n            } else {\n                dd.people_fully_vaccinated_per_hundred = people_fully_vaccinated_per_hundred;\n            }\n\n            var countryName;\n            if(vGroup[i].country_name==null) { countryName = vGroup[i][0];\n            } else {\n                countryName = vGroup[i].country_name\n            }\n\n            vDataFlat.push({\n                date: new Date(dd.date),\n                lastDate: (vGroup[i].lastDate),\n                total_vaccinations_per_hundred: parseFloat(totalVac100),\n                people_vaccinated_per_hundred: people_vaccinated_per_hundred,\n                people_fully_vaccinated_per_hundred: people_fully_vaccinated_per_hundred,\n                iso_code: vGroup[i][0], \n                ifrc_region: vGroup[i].ifrc_region,\n                country_name: countryName,\n                country_code: vGroup[i].country_code, \n                total_vaccinations: totalVac \n            })\n        })\n    });\n\n    data.vaccines_data_cumulative = vDataFlat;\n\n    data.vaccines_data_cumulative.sort(function(a,b){\n        return new Date(a.date) - new Date(b.date);\n    });\n\n    data.vaccines_data_cumulative.forEach(function(d,i){\n        if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n        d.dayOfYear =  moment(d.date).dayOfYear();\n        if(d.dayOfYear!==dayCheck) dayTotal++;\n        d.dayTotal = dayTotal;\n        d.week = moment(d.date).isoWeek();\n        if(d.week!==weekCheck) weekTotal++;\n        d.weekTotal = weekTotal;\n        d.month = d.date.getMonth();\n        if(d.month!==monthCheck) monthTotal++;\n        d.monthTotal = monthTotal;\n        d.year = d.date.getFullYear();\n        dayCheck = d.dayOfYear;\n        weekCheck = d.week;\n        monthCheck = d.month;\n        d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n        d.month_start = new Date(moment(d.date).startOf('month').toDate());\n    })\n\n    // parse vaccine daily data\n\n    dayTotal = -1;\n    dayCheck = 0;\n\n    weekTotal = -1;\n    weekCheck = -1;\n    monthTotal = 0;\n    monthCheck = 0;\n\n    // filter out vaccine data on only include records with ISO3 country codes\n    data.vaccines_data_daily = data.vaccines_data.filter(function(d,i){\n        return d.iso_code.length===3 && d.daily_vaccinations > 0;\n    })\n\n    // fill out missing vaccinations date records (extend cumulative)\n    var vGroup = flatGroup(data.vaccines_data_daily, d => d.iso_code);\n\n    var newDates = [];\n    var hasDays = [];\n    var initDate = 0;\n    var lastRecord = {};\n    var vDataFlat = [];\n    vGroup.forEach(function(d,i){\n\n        var minDt = new Date(minDateVaccines);\n        var maxDt = new Date(maxDateVaccines);\n        var hasDays = [];\n        var newDays = [];\n        var newDays = [];\n\n        data.equity_data.forEach(function(dd,ii){\n            if(dd.country_iso3===vGroup[i][0]){\n                d.ifrc_region = dd.ifrc_region;\n                d.country_name = dd.country_name;\n                d.country_code = dd.country_iso2;\n            }\n        })\n\n        vGroup[i][1].forEach(function(dd,ii){\n            hasDays.push(new Date(dd.date).getTime());\n        })\n\n        // if((i<1)||(d[0] =='BFA')||(d[0] =='RWA')){\n        vGroup[i][1].forEach(function(dd,ii){\n            dd.daily_vaccinations = parseInt(dd.daily_vaccinations);\n            for (var day = minDt;day <= maxDt; day.setDate(day.getDate() + 1)) {\n                var newDay = day.getTime();\n                if(!hasDays.includes(newDay)){\n                    newDays.push({date: new Date(day), daily_vaccinations: null})\n                }\n            }\n        });\n\n        vGroup[i][1].push(...newDays);\n\n        vGroup[i][1].sort(function(a,b){\n            return new Date(a.date) - new Date(b.date);\n        });\n\n        var daily_vaccinations = 0;\n\n        vGroup[i][1].forEach(function(dd,ii){\n            if(dd.daily_vaccinations){\n                daily_vaccinations = dd.daily_vaccinations;\n            } else {\n                dd.daily_vaccinations = daily_vaccinations;\n            }\n            var countryName;\n            if(vGroup[i].country_name==null) { countryName = vGroup[i][0];\n            } else {\n                countryName = vGroup[i].country_name\n            }\n            vDataFlat.push({\n                date: new Date(dd.date),\n                iso_code: vGroup[i][0], \n                ifrc_region: vGroup[i].ifrc_region,\n                country_name: countryName,\n                country_code: vGroup[i].country_code, \n                daily_vaccinations: daily_vaccinations \n            })\n        })\n    });\n\n    data.vaccines_data_daily = vDataFlat;\n\n    data.vaccines_data_daily.sort(function(a,b){\n        return new Date(a.date) - new Date(b.date);\n    });\n\n    data.vaccines_data_daily.forEach(function(d,i){\n        if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n        d.dayOfYear =  moment(d.date).dayOfYear();\n        if(d.dayOfYear!==dayCheck) dayTotal++;\n        d.dayTotal = dayTotal;\n        d.week = moment(d.date).isoWeek();\n        if(d.week!==weekCheck) weekTotal++;\n        d.weekTotal = weekTotal;\n        d.month = d.date.getMonth();\n        if(d.month!==monthCheck) monthTotal++;\n        d.monthTotal = monthTotal;\n        d.year = d.date.getFullYear();\n        dayCheck = d.dayOfYear;\n        weekCheck = d.week;\n        monthCheck = d.month;\n        d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n        d.month_start = new Date(moment(d.date).startOf('month').toDate());\n    });\n\n\n    // parse equity data inform/hdi indexes\n    data.equity_data.forEach(function(d,i){\n        if(d.hdi_category.match(/very high/i)){\n            d.hdi_category = 'very-high'\n        }\n        else if(d.hdi_category.match(/high/i)){\n            d.hdi_category = 'high'\n        }\n        else if(d.hdi_category.match(/medium/i)){\n            d.hdi_category = 'medium'\n        }\n        else if(d.hdi_category.match(/low/i)){\n            d.hdi_category = 'low'\n        }\n        if(d.inform_severity.match(/very high/i)){\n            d.inform_severity = 'very-high'\n        }\n        else if(d.inform_severity.match(/high/i)){\n            d.inform_severity = 'high'\n        }\n        else if(d.inform_severity.match(/medium/i)){\n            d.inform_severity = 'medium'\n        }\n        else if(d.inform_severity.match(/low/i)){\n            d.inform_severity = 'low'\n        }\n        else if(d.inform_severity.match(/no/i)){\n            d.inform_severity = 'no-score'\n        }\n    })\n\n    data.equity_data = data.equity_data.filter(function(d,i){\n       return countryCodes.includes(d.country_iso2)\n    })\n    data.original = clone(data);\n    // console.log(data);\n}\n\nexport default ParseData;\n"]},"metadata":{},"sourceType":"module"}