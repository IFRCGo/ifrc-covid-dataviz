{"ast":null,"code":"import * as d3 from \"d3\";\nimport moment from 'moment';\nimport colors from './colors';\nimport { addCommas } from './HelperFunctions';\nexport function drawRegionchart(data, options) {\n  const regions = ['AF', 'ME', 'AP', 'EU', 'AM', 'OTH'];\n  const groupedData = [];\n  regions.forEach(function (d, i) {\n    if (d != 'OTH') // remove OTH\n      groupedData.push({\n        region: d,\n        cumulative_cases: 0,\n        cumulative_deaths: 0,\n        cumulative_vaccines: 0\n      });\n  });\n  data.who_data.forEach(function (d, i) {\n    regions.forEach(function (dd, ii) {\n      if (dd == d.ifrc_region && dd != 'OTH') {\n        // remove OTH\n        groupedData[ii].cumulative_cases += d.new_cases;\n        groupedData[ii].cumulative_deaths += d.new_deaths;\n      }\n    });\n  });\n  groupedData.sort(function (a, b) {\n    return b.cumulative_cases - a.cumulative_cases;\n  });\n  const maxCases = d3.max(groupedData, function (d, i) {\n    return d.cumulative_cases;\n  });\n  const maxDeaths = d3.max(groupedData, function (d, i) {\n    return d.cumulative_deaths;\n  }); // append region chart containerg\n\n  const regionChartContainer = d3.select('#layout #region_chart_container').attr('opacity', 0);\n  const rcSize = {\n    x: regionChartContainer.attr('x'),\n    y: regionChartContainer.attr('y'),\n    width: regionChartContainer.attr('width'),\n    height: regionChartContainer.attr('height')\n  };\n  const svg = d3.select('#layout').append('g').attr('transform', 'translate(' + rcSize.x + ', ' + rcSize.y + ')').attr('id', 'region_chart');\n  var rowHeight = rcSize.height / groupedData.length - 1; // remove OTH\n\n  console.log(groupedData);\n  var rows = svg.selectAll('.bar-row').data(groupedData).enter().append('g').attr('class', 'bar-row').attr('transform', function (d, i) {\n    return 'translate(0,' + (i * rowHeight + margin.top) + ')';\n  });\n  var label = rows.append('text').attr('y', rowHeight / 2).attr('x', margin.left - 5).attr('class', function (d, i) {\n    return 'bar-' + d.region;\n  }).style('alignment-baseline', 'middle').style('font-size', '11px').attr('fill', '#696969').text(function (d, i) {\n    if (d.region === 'AM') return 'Americas';\n    if (d.region === 'EU') return 'Europe';\n    if (d.region === 'AF') return 'Africa';\n    if (d.region === 'ME') return 'Middle East and North Africa';\n    if (d.region === 'AP') return 'Asia-Pacific';\n  }).style('text-anchor', 'end');\n  var labelWidth = rows.node().getBBox().width + margin.left;\n  label.attr('x', labelWidth + 89);\n  labelWidth = labelWidth + 94;\n  console.log(labelWidth);\n  var rowBg = rows.append('rect').attr('y', 0).attr('x', 0).attr('width', labelWidth).attr('height', rowHeight - 2).style('opacity', 0).attr('fill', 'grey').style('cursor', 'pointer').attr('class', function (d, i) {\n    return 'bar-bg-' + d.region;\n  }).on('mouseover', function () {\n    d3.select(this).style('opacity', 0.1);\n  }).on('mouseout', function () {\n    d3.select(this).style('opacity', 0);\n  }).on('click', function (d, i) {\n    console.log('filter');\n  });\n  const xScaleCases = d3.scaleLinear().range([0, rcSize.width - margin.right - labelWidth]).domain([0, maxCases]); // severity/reliability x xcale\n\n  const xScaleDeaths = d3.scaleLinear().range([labelWidth, rcSize.width - margin.right]).domain([0, maxDeaths]); // severity/reliability x xcale\n\n  console.log(svg);\n  const barPadding = 0.13;\n  var bar = rows.append('rect').attr('id', function (d, i) {\n    return 'bar-' + d.region;\n  }).attr('class', 'region-bar').attr('width', function (d, i) {\n    return xScaleCases(d.cumulative_cases);\n  }).attr('x', labelWidth).style('outline', 'none').style('cursor', 'pointer').attr('y', rowHeight * barPadding - 1).attr('height', rowHeight - rowHeight * barPadding * 2).style('fill', function (d) {\n    return colors.regions[d.region];\n  }).on('click', function (d, i) {\n    var id = d3.select(this).attr('id');\n  });\n  var dataLabel = rows.append('text').text(function (d) {\n    return addCommas(d.cumulative_cases);\n  }).attr('id', function (d, i) {\n    return 'data-label' + d.region;\n  }).attr('class', 'data-label').attr('y', rowHeight / 2).style('alignment-baseline', 'middle').style('text-anchor', 'start').attr('x', function (d, i) {\n    return xScaleCases(d.cumulative_cases) + labelWidth + 5;\n  }).style('fill', '#696969').style('font-weight', 'normal').style('font-size', '10px'); // svg.selectAll('g').remove();\n  // const width = 2000;\n  // const barWidth = width/numIntervals;\n  // let barSpacing = 0.04; \n  // if(options.timeline_frequency==='month') barSpacing = 0.03;\n  // if(options.timeline_frequency==='day') barSpacing = 0;\n  // const xScale = d3.scaleLinear()\n  // .range([0,width])\n  // .domain([0,numIntervals]);\n  // const yScaleCases = d3.scaleLinear()\n  // .range([0,140])\n  // .domain([0,maxCases]);\n  // const yScaleDeaths = d3.scaleLinear()\n  // .range([0,140])\n  // .domain([0,maxDeaths]);\n  // // CASES\n  // // loop through groupedData and draw bars\n  // const barGroups = svg.selectAll('.bar_group')\n  // .data(groupedData)\n  // .enter()\n  // .append('g')\n  // .attr('transform', function(d,i){ \n  //     return 'translate('+xScale(i)+')'\n  // })\n  // // CASES\n  // barGroups.selectAll('.cases_bar')\n  // .data(function(d,i){ return d.region.filter(function(dd,ii){\n  //     return dd.region!=='OTH';\n  // })})\n  // .enter()\n  // .append('rect')\n  // .attr('class', 'cases_bar')\n  // .attr('x', (barWidth*barSpacing))\n  // .attr('y', function(d,i){\n  //     const totalNewCases = d3.select(this.parentNode).datum().total_new_cases - d3.select(this.parentNode).datum().OTH.new_cases;\n  //     let dp = 0;\n  //     if(i>0){\n  //         for(let ii=1;ii<=i;ii++){\n  //             if(options.timeline_type==='cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].cumulative_cases;\n  //             if(options.timeline_type==='non-cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].new_cases;\n  //             if(options.timeline_type==='stacked') dp += d3.select(this.parentNode).datum().region[ii-1].new_cases;\n  //         }\n  //     }\n  //     let y = 0;\n  //     if(options.timeline_type==='cumulative') y = (140-yScaleCases(d.cumulative_cases)-(yScaleCases(dp)))\n  //     if(options.timeline_type==='non-cumulative') y = (140-yScaleCases(d.new_cases)-(yScaleCases(dp)))\n  //     if(options.timeline_type==='stacked') y = (140-(140*(d.new_cases/totalNewCases))-((140*(dp/totalNewCases))))\n  //     if(y){ return y; } else { return 0};\n  // })\n  // .attr('width', barWidth-(barWidth*barSpacing*2))\n  // .attr('height', function(d,i){\n  //     const totalNewCases = d3.select(this.parentNode).datum().total_new_cases - d3.select(this.parentNode).datum().OTH.new_cases;\n  //     let y = 0;\n  //     if(options.timeline_type==='cumulative') y = yScaleCases(d.cumulative_cases);\n  //     if(options.timeline_type==='non-cumulative') y = yScaleCases(d.new_cases);\n  //     if(options.timeline_type==='stacked') y = (140*(d.new_cases/totalNewCases));\n  //     if(y){ return y; } else { return 0};\n  // })\n  // .attr('fill', function(d,i){\n  //     return colors.regions[d.region];\n  // })\n  // // DEATHS\n  // barGroups.selectAll('.deaths_bar')\n  // .data(function(d,i){ return d.region.filter(function(dd,ii){\n  //     return dd.region!=='OTH';\n  // })})\n  // .enter()\n  // .append('rect')\n  // .attr('class', 'deaths_bar')\n  // .attr('x', (barWidth*barSpacing))\n  // .attr('y', function(d,i){\n  //     const totalNewDeaths = d3.select(this.parentNode).datum().total_new_deaths - d3.select(this.parentNode).datum().OTH.new_deaths;\n  //     let dp = 0;\n  //     if(i>0){\n  //         for(let ii=1;ii<=i;ii++){\n  //             if(options.timeline_type==='cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].cumulative_deaths;\n  //             if(options.timeline_type==='non-cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].new_deaths;\n  //             if(options.timeline_type==='stacked') dp += d3.select(this.parentNode).datum().region[ii-1].new_deaths;\n  //         }\n  //     }\n  //     let y = 0;\n  //     if(options.timeline_type==='cumulative') y = (140-yScaleDeaths(d.cumulative_deaths)-(yScaleDeaths(dp))+170)\n  //     if(options.timeline_type==='non-cumulative') y = (140-yScaleDeaths(d.new_deaths)-(yScaleDeaths(dp))+170)\n  //     if(options.timeline_type==='stacked') y = (140-(140*(d.new_deaths/totalNewDeaths))-((140*(dp/totalNewDeaths)))+170)\n  //     if(y){ return y; } else { return 0};\n  // })\n  // .attr('width', barWidth-(barWidth*barSpacing*2))\n  // .attr('height', function(d,i){\n  //     const totalNewDeaths = d3.select(this.parentNode).datum().total_new_deaths - d3.select(this.parentNode).datum().OTH.new_deaths;\n  //     let y = 0;\n  //     if(options.timeline_type==='cumulative') y = yScaleDeaths(d.cumulative_deaths);\n  //     if(options.timeline_type==='non-cumulative') y = yScaleDeaths(d.new_deaths);\n  //     if(options.timeline_type==='stacked') y = (140*(d.new_deaths/totalNewDeaths));\n  //     if(y){ return y; } else { return 0};\n  // })\n  // .attr('fill', function(d,i){\n  //     return colors.regions[d.region];\n  // })\n  // 10\n  // 0.1\n  // 1 - 8 - 1\n  // draw x-axis\n  // draw y-axis\n}\nexport function updateRegionchart(data) {\n  console.log('update regionchart');\n}\nexport default drawRegionchart;","map":{"version":3,"sources":["/Users/matthewsmawfield/www/ifrc-covid-dataviz/src/Regionchart.js"],"names":["d3","moment","colors","addCommas","drawRegionchart","data","options","regions","groupedData","forEach","d","i","push","region","cumulative_cases","cumulative_deaths","cumulative_vaccines","who_data","dd","ii","ifrc_region","new_cases","new_deaths","sort","a","b","maxCases","max","maxDeaths","regionChartContainer","select","attr","rcSize","x","y","width","height","svg","append","rowHeight","length","console","log","rows","selectAll","enter","margin","top","label","left","style","text","labelWidth","node","getBBox","rowBg","on","xScaleCases","scaleLinear","range","right","domain","xScaleDeaths","barPadding","bar","id","dataLabel","updateRegionchart"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\nimport moment from 'moment';\nimport colors from './colors';\nimport {addCommas} from './HelperFunctions';\n\nexport function drawRegionchart(data, options) {\n\n    const regions = ['AF', 'ME', 'AP', 'EU', 'AM', 'OTH'];\n\n    const groupedData = [];\n\n    regions.forEach(function(d,i){\n        if(d!='OTH') // remove OTH\n        groupedData.push({ region: d, cumulative_cases: 0, cumulative_deaths: 0, cumulative_vaccines: 0});\n    })\n\n    data.who_data.forEach(function(d,i){\n        regions.forEach(function(dd,ii){\n            if((dd==d.ifrc_region)&&(dd!='OTH')){ // remove OTH\n                groupedData[ii].cumulative_cases += d.new_cases;\n                groupedData[ii].cumulative_deaths += d.new_deaths;\n            }\n        })\n    });\n\n    groupedData.sort(function(a,b){\n        return (b.cumulative_cases) - (a.cumulative_cases);\n    });\n\n    const maxCases = d3.max(groupedData, function(d,i){\n        return d.cumulative_cases;\n    })\n\n    const maxDeaths = d3.max(groupedData, function(d,i){\n        return d.cumulative_deaths;\n    })\n\n    // append region chart containerg\n    const regionChartContainer = d3.select('#layout #region_chart_container').attr('opacity', 0);\n    const rcSize = {\n        x: regionChartContainer.attr('x'), y: regionChartContainer.attr('y'), width: regionChartContainer.attr('width'), height: regionChartContainer.attr('height')\n    }\n\n    const svg = d3.select('#layout').append('g').attr('transform', 'translate('+rcSize.x+', '+rcSize.y+')')\n    .attr('id', 'region_chart');\n\n\n\tvar rowHeight = rcSize.height/groupedData.length-1; // remove OTH\n\n    console.log(groupedData);\n\n    var rows = svg.selectAll('.bar-row')\n\t.data(groupedData)\n\t.enter()\n\t.append('g')\n\t.attr('class', 'bar-row')\n\t.attr('transform', function(d,i){\n\t\treturn 'translate(0,' + ((i*rowHeight) + margin.top) + ')';\n\t});\n\n    var label = rows.append('text')\n\t.attr('y', rowHeight/2 )\n    .attr('x', margin.left-5)\n\t.attr('class', function(d,i){ return 'bar-'+d.region })\n\t.style('alignment-baseline', 'middle')\n\t.style('font-size', '11px')\n\t.attr('fill', '#696969')\n\t.text(function(d,i){\n\t\tif(d.region==='AM') return 'Americas';\n\t\tif(d.region==='EU') return 'Europe';\n\t\tif(d.region==='AF') return 'Africa';\n\t\tif(d.region==='ME') return 'Middle East and North Africa';\n\t\tif(d.region==='AP') return 'Asia-Pacific';\n\t}).style('text-anchor', 'end');\n\n    var labelWidth = rows.node().getBBox().width + margin.left;\n\tlabel.attr('x', labelWidth+89);\n\tlabelWidth = labelWidth + 94;\n\n    console.log(labelWidth);\n\n    var rowBg = rows.append('rect')\n\t.attr('y', 0)\n\t.attr('x', 0)\n\t.attr('width', labelWidth)\n\t.attr('height', rowHeight-2)\n\t.style('opacity', 0)\n    .attr('fill', 'grey')\n\t.style('cursor', 'pointer')\n\t.attr('class', function(d,i){ return 'bar-bg-'+d.region })\n\t.on('mouseover', function(){\n\t\td3.select(this).style('opacity', 0.1)\n\t})\n\t.on('mouseout', function(){\n\t\td3.select(this).style('opacity', 0)\n\t})\n\t.on('click', function(d,i){\n        console.log('filter');\n    });\n\n    const xScaleCases = d3.scaleLinear()\n\t.range([0, rcSize.width - margin.right- labelWidth])\n\t.domain([0, maxCases]);// severity/reliability x xcale\n\n    const xScaleDeaths = d3.scaleLinear()\n\t.range([labelWidth, rcSize.width - margin.right])\n\t.domain([0, maxDeaths]);// severity/reliability x xcale\n\n    console.log(svg);\n    const barPadding = 0.13;\n\n    var bar = rows.append('rect')\n    .attr('id', function(d,i){\n        return 'bar-'+d.region;\n    })\n    .attr('class', 'region-bar')\n    .attr('width', function(d,i){\n        return xScaleCases(d.cumulative_cases);\n    })\n    .attr('x', labelWidth)\n    .style('outline', 'none')\n    .style('cursor', 'pointer')\n    .attr('y', rowHeight*barPadding - 1)\n    .attr('height', rowHeight-((rowHeight*barPadding)*2))\n    .style('fill', function(d){\n        return colors.regions[d.region]\n    })\n    .on('click', function(d,i){\n        var id = (d3.select(this).attr('id'));\n    });\n\n    var dataLabel = rows.append('text')\n\t.text(function(d){\n        return addCommas(d.cumulative_cases);\n    })\n\t.attr('id', function(d,i){\n\t\treturn 'data-label'+d.region;\n\t})\n\t.attr('class', 'data-label')\n\t.attr('y', rowHeight/2)\n\t.style('alignment-baseline', 'middle')\n\t.style('text-anchor', 'start')\n\t.attr('x', function(d,i){\n        return xScaleCases(d.cumulative_cases)+labelWidth+5;\n    })\n\t.style('fill', '#696969')\n\t.style('font-weight', 'normal')\n\t.style('font-size', '10px');\n\n    // svg.selectAll('g').remove();\n\n    // const width = 2000;\n    // const barWidth = width/numIntervals;\n\n    // let barSpacing = 0.04; \n    // if(options.timeline_frequency==='month') barSpacing = 0.03;\n    // if(options.timeline_frequency==='day') barSpacing = 0;\n\n    // const xScale = d3.scaleLinear()\n    // .range([0,width])\n    // .domain([0,numIntervals]);\n\n    // const yScaleCases = d3.scaleLinear()\n    // .range([0,140])\n    // .domain([0,maxCases]);\n\n    // const yScaleDeaths = d3.scaleLinear()\n    // .range([0,140])\n    // .domain([0,maxDeaths]);\n\n    // // CASES\n    // // loop through groupedData and draw bars\n    // const barGroups = svg.selectAll('.bar_group')\n    // .data(groupedData)\n    // .enter()\n    // .append('g')\n    // .attr('transform', function(d,i){ \n    //     return 'translate('+xScale(i)+')'\n    // })\n\n    // // CASES\n    // barGroups.selectAll('.cases_bar')\n    // .data(function(d,i){ return d.region.filter(function(dd,ii){\n    //     return dd.region!=='OTH';\n    // })})\n    // .enter()\n    // .append('rect')\n    // .attr('class', 'cases_bar')\n    // .attr('x', (barWidth*barSpacing))\n    // .attr('y', function(d,i){\n    //     const totalNewCases = d3.select(this.parentNode).datum().total_new_cases - d3.select(this.parentNode).datum().OTH.new_cases;\n    //     let dp = 0;\n    //     if(i>0){\n    //         for(let ii=1;ii<=i;ii++){\n    //             if(options.timeline_type==='cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].cumulative_cases;\n    //             if(options.timeline_type==='non-cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].new_cases;\n    //             if(options.timeline_type==='stacked') dp += d3.select(this.parentNode).datum().region[ii-1].new_cases;\n    //         }\n    //     }\n    //     let y = 0;\n    //     if(options.timeline_type==='cumulative') y = (140-yScaleCases(d.cumulative_cases)-(yScaleCases(dp)))\n    //     if(options.timeline_type==='non-cumulative') y = (140-yScaleCases(d.new_cases)-(yScaleCases(dp)))\n    //     if(options.timeline_type==='stacked') y = (140-(140*(d.new_cases/totalNewCases))-((140*(dp/totalNewCases))))\n    //     if(y){ return y; } else { return 0};\n    // })\n    // .attr('width', barWidth-(barWidth*barSpacing*2))\n    // .attr('height', function(d,i){\n    //     const totalNewCases = d3.select(this.parentNode).datum().total_new_cases - d3.select(this.parentNode).datum().OTH.new_cases;\n    //     let y = 0;\n    //     if(options.timeline_type==='cumulative') y = yScaleCases(d.cumulative_cases);\n    //     if(options.timeline_type==='non-cumulative') y = yScaleCases(d.new_cases);\n    //     if(options.timeline_type==='stacked') y = (140*(d.new_cases/totalNewCases));\n    //     if(y){ return y; } else { return 0};\n    // })\n    // .attr('fill', function(d,i){\n    //     return colors.regions[d.region];\n    // })\n\n    // // DEATHS\n    // barGroups.selectAll('.deaths_bar')\n    // .data(function(d,i){ return d.region.filter(function(dd,ii){\n    //     return dd.region!=='OTH';\n    // })})\n    // .enter()\n    // .append('rect')\n    // .attr('class', 'deaths_bar')\n    // .attr('x', (barWidth*barSpacing))\n    // .attr('y', function(d,i){\n    //     const totalNewDeaths = d3.select(this.parentNode).datum().total_new_deaths - d3.select(this.parentNode).datum().OTH.new_deaths;\n    //     let dp = 0;\n    //     if(i>0){\n    //         for(let ii=1;ii<=i;ii++){\n    //             if(options.timeline_type==='cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].cumulative_deaths;\n    //             if(options.timeline_type==='non-cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].new_deaths;\n    //             if(options.timeline_type==='stacked') dp += d3.select(this.parentNode).datum().region[ii-1].new_deaths;\n    //         }\n    //     }\n    //     let y = 0;\n    //     if(options.timeline_type==='cumulative') y = (140-yScaleDeaths(d.cumulative_deaths)-(yScaleDeaths(dp))+170)\n    //     if(options.timeline_type==='non-cumulative') y = (140-yScaleDeaths(d.new_deaths)-(yScaleDeaths(dp))+170)\n    //     if(options.timeline_type==='stacked') y = (140-(140*(d.new_deaths/totalNewDeaths))-((140*(dp/totalNewDeaths)))+170)\n    //     if(y){ return y; } else { return 0};\n    // })\n    // .attr('width', barWidth-(barWidth*barSpacing*2))\n    // .attr('height', function(d,i){\n    //     const totalNewDeaths = d3.select(this.parentNode).datum().total_new_deaths - d3.select(this.parentNode).datum().OTH.new_deaths;\n    //     let y = 0;\n    //     if(options.timeline_type==='cumulative') y = yScaleDeaths(d.cumulative_deaths);\n    //     if(options.timeline_type==='non-cumulative') y = yScaleDeaths(d.new_deaths);\n    //     if(options.timeline_type==='stacked') y = (140*(d.new_deaths/totalNewDeaths));\n    //     if(y){ return y; } else { return 0};\n    // })\n    // .attr('fill', function(d,i){\n    //     return colors.regions[d.region];\n    // })\n\n    // 10\n\n    // 0.1\n\n    // 1 - 8 - 1\n    \n    // draw x-axis\n\n\n    // draw y-axis\n\n}\n\nexport function updateRegionchart(data) {\n\n    console.log('update regionchart');\n\n}\n\nexport default drawRegionchart;\n"]},"metadata":{},"sourceType":"module"}