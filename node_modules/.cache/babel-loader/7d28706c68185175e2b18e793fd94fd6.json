{"ast":null,"code":"import _toConsumableArray from\"/Users/matthewsmawfield/www/ifrc-covid-dataviz/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";// import * as d3 from \"d3\";\nimport{min,max,group,flatGroup}from\"d3\";import moment from'moment';import clone from'just-clone';// const regions = ['AF', 'ME', 'AP', 'EU', 'AM', 'OTH'];\nvar regions=[{'code':'AF','population':0},{'code':'ME','population':0},{'code':'AP','population':0},{'code':'EU','population':0},{'code':'AM','population':0},{'code':'OTH','population':0}];export function ParseData(data,options){data.equity_data.forEach(function(d,i){d.vaccines_used=[];d.population=parseInt(d.population);d.number_vaccine_types_used=0;d.vaccines_per_100=0;data.vaccines_who_data.forEach(function(dd,ii){if(d.country_iso3==dd.ISO3){d.data_updated=moment(dd.DATE_UPDATED).startOf('day').toDate();d.number_vaccine_types_used=dd.NUMBER_VACCINES_TYPES_USED;d.vaccines_per_100=parseFloat(dd.TOTAL_VACCINATIONS_PER100);if(isNaN(d.vaccines_per_100))d.vaccines_per_100=0;d.vaccines_used=dd.VACCINES_USED.split(',').map(function(item){return item.trim();});}});if(d.ifrc_region!='AF'&&d.ifrc_region!='ME'&&d.ifrc_region!='AP'&&d.ifrc_region!='EU'&&d.ifrc_region!='AM'){d.ifrc_region='OTH';}var pop=0;if(d.population>0)pop=d.population;regions.forEach(function(dd,ii){if(dd.code==d.ifrc_region){dd.population+=pop;}});d.ns_involvement=0;data.self_assessment.forEach(function(dd,ii){if(d.country_iso3==dd.ISO3){if(dd['Final involvement']=='Yes')d.ns_involvement=1;}});data.vaccine_acceptance.forEach(function(dd,ii){if(d.country_iso3==dd.iso3){// if(dd['Final involvement']=='Yes') d.ns_involvement = 1;\nd.country_code=d.country_iso2;d.vaccine_acceptance_percent=parseFloat(dd.indicator_value)*100;d.vaccine_acceptance_population=parseInt(dd.population_size);}});if(d.contract_tracing.toLowerCase()=='all'||d.contract_tracing.toLowerCase()=='some'){d.contract_tracing=1;}else{d.contract_tracing=0;}d.avg_tests_per_1000=parseFloat(d.avg_tests_per_1000)||0;});data.regions=regions;// max dates\nvar maxDate=moment(new Date(max(data.who_data,function(d){return d.Date_reported;})));var minDate=moment(new Date(min(data.who_data,function(d){return d.Date_reported;})));// override\nminDate=moment('2019-12-31');var minDateVaccines=new Date(min(data.vaccines_data,function(d){return d.date;}));var maxDateVaccines=new Date(max(data.vaccines_data,function(d){return d.date;}));options.maxDataDate=maxDate.toDate();options.maxVDataDate=maxDateVaccines;if(maxDateVaccines>maxDate){maxDate=maxDateVaccines;}// if(maxDate<moment()){\n//     maxDate = moment();\n// }\n// if(maxDateVaccines<moment()){\n//     maxDateVaccines = moment();\n// }\noptions.maxDate=moment(maxDate).toDate();options.maxVDate=moment(maxDateVaccines).toDate();options.minDate=moment(minDate).toDate();// parse who data\nvar dayTotal=-1;var dayCheck=0;var weekTotal=-1;var weekCheck=-1;var monthTotal=0;var monthCheck=0;// filter out negative new deaths\n// data.who_data = data.who_data.filter(d=>d.New_deaths>0);\n// data.who_data = data.who_data.filter(d=>d.New_cases>0);\ndata.who_data.sort(function(a,b){return new Date(a.Date_reported)-new Date(b.Date_reported);});var countryCodes=[];var ccArray=[];data.who_data.forEach(function(d,i){d.date=new Date(d.Date_reported);d.dayOfYear=moment(d.date).dayOfYear();if(d.dayOfYear!==dayCheck)dayTotal++;d.dayTotal=dayTotal;d.week=moment(d.date).isoWeek();if(d.week!==weekCheck)weekTotal++;d.weekTotal=weekTotal;d.month=d.date.getMonth();if(d.month!==monthCheck)monthTotal++;d.monthTotal=monthTotal;d.year=d.date.getFullYear();d.week_start=new Date(moment(d.date).startOf('isoWeek').toDate());d.month_start=new Date(moment(d.date).startOf('month').toDate());d.new_cases=parseInt(d.New_cases);d.new_deaths=parseInt(d.New_deaths);// negative values\nif(d.new_deaths<0)d.new_deaths=0;if(d.new_cases<0)d.new_cases=0;d.cumulative_deaths=parseInt(d.Cumulative_deaths);d.cumulative_cases=parseInt(d.Cumulative_cases);d.country_code=d.Country_code;d.country_name=null;data.equity_data.forEach(function(dd,ii){if(dd.country_iso2===d.Country_code){d.ifrc_region=dd.ifrc_region;d.country_name=dd.country_name;}});if(d.ifrc_region==undefined)d.ifrc_region='OTH';if(!countryCodes.includes(d.country_code)){if(d.ifrc_region=='OTH'){ccArray.push([d.Country,d.country_code]);}countryCodes.push(d.country_code);}delete d.Date_reported;delete d.Country;delete d.New_cases;delete d.New_deaths;delete d.Country_code;delete d.Cumulative_deaths;delete d.Cumulative_cases;// delete d.Country_code;\ndelete d.WHO_region;// delete d.Country;\ndayCheck=d.dayOfYear;weekCheck=d.week;monthCheck=d.month;});// check for missing coutries\n// ccArray.forEach(function(d,i){\n//     console.log(d[1])\n// })\n// console.log(ccArray);\n// parse vaccine cumulative data\ndayTotal=-1;dayCheck=0;weekTotal=-1;weekCheck=-1;monthTotal=0;monthCheck=0;// filter out vaccine data on only include records with ISO3 country codes\ndata.vaccines_data_cumulative=data.vaccines_data.filter(function(d,i){return d.iso_code.length===3&&d.total_vaccinations>0;});// fill out missing vaccinations date records (extend cumulative)\nvar vGroup=flatGroup(data.vaccines_data_cumulative,function(d){return d.iso_code;});var newDates=[];var hasDays=[];var initDate=0;var lastRecord={};var vDataFlat=[];vGroup.forEach(function(d,i){var _vGroup$i$;var minDt=new Date(minDateVaccines);var maxDt=new Date(maxDateVaccines);var hasDays=[];var newDays=[];var newDays=[];data.equity_data.forEach(function(dd,ii){if(dd.country_iso3===vGroup[i][0]){d.ifrc_region=dd.ifrc_region;d.country_name=dd.country_name;d.country_code=dd.country_iso2;}});vGroup[i].lastDate=new Date(max(vGroup[i][1],function(d,i){return d.date;}));vGroup[i][1].forEach(function(dd,ii){hasDays.push(new Date(dd.date).getTime());});// if((i<1)||(d[0] =='BFA')||(d[0] =='RWA')){\nvGroup[i][1].forEach(function(dd,ii){dd.total_vaccinations=parseInt(dd.total_vaccinations);for(var day=minDt;day<=maxDt;day.setDate(day.getDate()+1)){var newDay=day.getTime();if(!hasDays.includes(newDay)){newDays.push({date:new Date(day),total_vaccinations:null});}}// dd.lastDate = dd.date;\n});(_vGroup$i$=vGroup[i][1]).push.apply(_vGroup$i$,_toConsumableArray(newDays));vGroup[i][1].sort(function(a,b){return new Date(a.date)-new Date(b.date);});var totalVac=0;var totalVac100=0;var people_vaccinated_per_hundred=0;var people_fully_vaccinated_per_hundred=0;vGroup[i][1].forEach(function(dd,ii){if(dd.total_vaccinations){totalVac=dd.total_vaccinations;}else{dd.total_vaccinations=totalVac;}if(dd.total_vaccinations_per_hundred){totalVac100=dd.total_vaccinations_per_hundred;}else{dd.total_vaccinations_per_hundred=totalVac100;}if(dd.people_vaccinated_per_hundred){people_vaccinated_per_hundred=dd.people_vaccinated_per_hundred;}else{dd.people_vaccinated_per_hundred=people_vaccinated_per_hundred;}if(dd.people_fully_vaccinated_per_hundred){people_fully_vaccinated_per_hundred=dd.people_fully_vaccinated_per_hundred;}else{dd.people_fully_vaccinated_per_hundred=people_fully_vaccinated_per_hundred;}var countryName;if(vGroup[i].country_name==null){countryName=vGroup[i][0];}else{countryName=vGroup[i].country_name;}vDataFlat.push({date:new Date(dd.date),lastDate:vGroup[i].lastDate,total_vaccinations_per_hundred:parseFloat(totalVac100),people_vaccinated_per_hundred:people_vaccinated_per_hundred,people_fully_vaccinated_per_hundred:people_fully_vaccinated_per_hundred,iso_code:vGroup[i][0],ifrc_region:vGroup[i].ifrc_region,country_name:countryName,country_code:vGroup[i].country_code,total_vaccinations:totalVac});});});data.vaccines_data_cumulative=vDataFlat;data.vaccines_data_cumulative.sort(function(a,b){return new Date(a.date)-new Date(b.date);});data.vaccines_data_cumulative.forEach(function(d,i){if(d.ifrc_region==undefined)d.ifrc_region='OTH';d.dayOfYear=moment(d.date).dayOfYear();if(d.dayOfYear!==dayCheck)dayTotal++;d.dayTotal=dayTotal;d.week=moment(d.date).isoWeek();if(d.week!==weekCheck)weekTotal++;d.weekTotal=weekTotal;d.month=d.date.getMonth();if(d.month!==monthCheck)monthTotal++;d.monthTotal=monthTotal;d.year=d.date.getFullYear();dayCheck=d.dayOfYear;weekCheck=d.week;monthCheck=d.month;d.week_start=new Date(moment(d.date).startOf('isoWeek').toDate());d.month_start=new Date(moment(d.date).startOf('month').toDate());});// parse vaccine daily data\ndayTotal=-1;dayCheck=0;weekTotal=-1;weekCheck=-1;monthTotal=0;monthCheck=0;// filter out vaccine data on only include records with ISO3 country codes\ndata.vaccines_data_daily=data.vaccines_data.filter(function(d,i){return d.iso_code.length===3&&d.daily_vaccinations>0;});// fill out missing vaccinations date records (extend cumulative)\nvar vGroup=flatGroup(data.vaccines_data_daily,function(d){return d.iso_code;});var newDates=[];var hasDays=[];var initDate=0;var lastRecord={};var vDataFlat=[];vGroup.forEach(function(d,i){var _vGroup$i$2;var minDt=new Date(minDateVaccines);var maxDt=new Date(maxDateVaccines);var hasDays=[];var newDays=[];var newDays=[];data.equity_data.forEach(function(dd,ii){if(dd.country_iso3===vGroup[i][0]){d.ifrc_region=dd.ifrc_region;d.country_name=dd.country_name;d.country_code=dd.country_iso2;}});vGroup[i][1].forEach(function(dd,ii){hasDays.push(new Date(dd.date).getTime());});// if((i<1)||(d[0] =='BFA')||(d[0] =='RWA')){\nvGroup[i][1].forEach(function(dd,ii){dd.daily_vaccinations=parseInt(dd.daily_vaccinations);for(var day=minDt;day<=maxDt;day.setDate(day.getDate()+1)){var newDay=day.getTime();if(!hasDays.includes(newDay)){newDays.push({date:new Date(day),daily_vaccinations:null});}}});(_vGroup$i$2=vGroup[i][1]).push.apply(_vGroup$i$2,_toConsumableArray(newDays));vGroup[i][1].sort(function(a,b){return new Date(a.date)-new Date(b.date);});var daily_vaccinations=0;vGroup[i][1].forEach(function(dd,ii){if(dd.daily_vaccinations){daily_vaccinations=dd.daily_vaccinations;}else{dd.daily_vaccinations=daily_vaccinations;}var countryName;if(vGroup[i].country_name==null){countryName=vGroup[i][0];}else{countryName=vGroup[i].country_name;}vDataFlat.push({date:new Date(dd.date),iso_code:vGroup[i][0],ifrc_region:vGroup[i].ifrc_region,country_name:countryName,country_code:vGroup[i].country_code,daily_vaccinations:daily_vaccinations});});});data.vaccines_data_daily=vDataFlat;data.vaccines_data_daily.sort(function(a,b){return new Date(a.date)-new Date(b.date);});data.vaccines_data_daily.forEach(function(d,i){if(d.ifrc_region==undefined)d.ifrc_region='OTH';d.dayOfYear=moment(d.date).dayOfYear();if(d.dayOfYear!==dayCheck)dayTotal++;d.dayTotal=dayTotal;d.week=moment(d.date).isoWeek();if(d.week!==weekCheck)weekTotal++;d.weekTotal=weekTotal;d.month=d.date.getMonth();if(d.month!==monthCheck)monthTotal++;d.monthTotal=monthTotal;d.year=d.date.getFullYear();dayCheck=d.dayOfYear;weekCheck=d.week;monthCheck=d.month;d.week_start=new Date(moment(d.date).startOf('isoWeek').toDate());d.month_start=new Date(moment(d.date).startOf('month').toDate());});// parse equity data inform/hdi indexes\ndata.equity_data.forEach(function(d,i){if(d.hdi_category.match(/very high/i)){d.hdi_category='very-high';}else if(d.hdi_category.match(/high/i)){d.hdi_category='high';}else if(d.hdi_category.match(/medium/i)){d.hdi_category='medium';}else if(d.hdi_category.match(/low/i)){d.hdi_category='low';}if(d.inform_severity.match(/very high/i)){d.inform_severity='very-high';}else if(d.inform_severity.match(/high/i)){d.inform_severity='high';}else if(d.inform_severity.match(/medium/i)){d.inform_severity='medium';}else if(d.inform_severity.match(/low/i)){d.inform_severity='low';}else if(d.inform_severity.match(/no/i)){d.inform_severity='no-score';}});data.equity_data=data.equity_data.filter(function(d,i){return countryCodes.includes(d.country_iso2);});data.original=clone(data);// console.log(data);\n}export default ParseData;","map":{"version":3,"sources":["/Users/matthewsmawfield/www/ifrc-covid-dataviz/src/ParseData.js"],"names":["min","max","group","flatGroup","moment","clone","regions","ParseData","data","options","equity_data","forEach","d","i","vaccines_used","population","parseInt","number_vaccine_types_used","vaccines_per_100","vaccines_who_data","dd","ii","country_iso3","ISO3","data_updated","DATE_UPDATED","startOf","toDate","NUMBER_VACCINES_TYPES_USED","parseFloat","TOTAL_VACCINATIONS_PER100","isNaN","VACCINES_USED","split","map","item","trim","ifrc_region","pop","code","ns_involvement","self_assessment","vaccine_acceptance","iso3","country_code","country_iso2","vaccine_acceptance_percent","indicator_value","vaccine_acceptance_population","population_size","contract_tracing","toLowerCase","avg_tests_per_1000","maxDate","Date","who_data","Date_reported","minDate","minDateVaccines","vaccines_data","date","maxDateVaccines","maxDataDate","maxVDataDate","maxVDate","dayTotal","dayCheck","weekTotal","weekCheck","monthTotal","monthCheck","sort","a","b","countryCodes","ccArray","dayOfYear","week","isoWeek","month","getMonth","year","getFullYear","week_start","month_start","new_cases","New_cases","new_deaths","New_deaths","cumulative_deaths","Cumulative_deaths","cumulative_cases","Cumulative_cases","Country_code","country_name","undefined","includes","push","Country","WHO_region","vaccines_data_cumulative","filter","iso_code","length","total_vaccinations","vGroup","newDates","hasDays","initDate","lastRecord","vDataFlat","minDt","maxDt","newDays","lastDate","getTime","day","setDate","getDate","newDay","totalVac","totalVac100","people_vaccinated_per_hundred","people_fully_vaccinated_per_hundred","total_vaccinations_per_hundred","countryName","vaccines_data_daily","daily_vaccinations","hdi_category","match","inform_severity","original"],"mappings":"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","sourcesContent":["// import * as d3 from \"d3\";\nimport {min,max,group,flatGroup} from \"d3\";\nimport moment from 'moment';\nimport clone from 'just-clone';\n// const regions = ['AF', 'ME', 'AP', 'EU', 'AM', 'OTH'];\nconst regions = [\n    {'code': 'AF', 'population': 0},\n    {'code': 'ME', 'population': 0},\n    {'code': 'AP', 'population': 0},\n    {'code': 'EU', 'population': 0},\n    {'code': 'AM', 'population': 0},\n    {'code': 'OTH', 'population': 0}\n]\nexport function ParseData(data, options) {\n\n    data.equity_data.forEach(function(d,i){\n        d.vaccines_used = [];\n        d.population = parseInt(d.population);\n        d.number_vaccine_types_used = 0;\n        d.vaccines_per_100 = 0;\n        data.vaccines_who_data.forEach(function(dd,ii){\n            if(d.country_iso3==dd.ISO3){\n                d.data_updated = moment(dd.DATE_UPDATED).startOf('day').toDate();\n                d.number_vaccine_types_used = dd.NUMBER_VACCINES_TYPES_USED;\n                d.vaccines_per_100 = parseFloat(dd.TOTAL_VACCINATIONS_PER100);\n                if(isNaN(d.vaccines_per_100))d.vaccines_per_100 = 0;\n                d.vaccines_used = dd.VACCINES_USED.split(',').map(function(item) {\n                    return item.trim();\n                  });\n            }\n        })\n        if((d.ifrc_region!='AF')&&(d.ifrc_region!='ME')&&(d.ifrc_region!='AP')&&(d.ifrc_region!='EU')&&(d.ifrc_region!='AM')){\n            d.ifrc_region = 'OTH';\n        }\n\n        var pop = 0;\n        if(d.population>0) pop = d.population;\n\n        regions.forEach(function(dd,ii){\n            if(dd.code==d.ifrc_region){\n                dd.population += pop\n            }\n        });\n\n\n\n        d.ns_involvement = 0;\n        data.self_assessment.forEach(function(dd,ii){\n            if(d.country_iso3==dd.ISO3){\n                if(dd['Final involvement']=='Yes') d.ns_involvement = 1;\n            }\n        })\n\n        data.vaccine_acceptance.forEach(function(dd,ii){\n            if(d.country_iso3==dd.iso3){\n                // if(dd['Final involvement']=='Yes') d.ns_involvement = 1;\n                d.country_code = d.country_iso2;\n                d.vaccine_acceptance_percent = parseFloat(dd.indicator_value)*100;\n                d.vaccine_acceptance_population = parseInt(dd.population_size);\n            }\n        })\n\n        if((d.contract_tracing.toLowerCase()=='all')||(d.contract_tracing.toLowerCase()=='some')){\n            d.contract_tracing = 1;\n        } else {\n            d.contract_tracing = 0\n        }\n\n        d.avg_tests_per_1000 = parseFloat(d.avg_tests_per_1000)||0;\n\n    })\n\n    data.regions = regions;\n\n    // max dates\n    let maxDate = moment(new Date(max(data.who_data, function(d){\n        return d.Date_reported;\n    })));\n\n    let minDate = moment(new Date(min(data.who_data, function(d){\n        return d.Date_reported;\n    })));\n\n    // override\n    minDate = moment('2019-12-31');\n\n    let minDateVaccines = (new Date(min(data.vaccines_data, function(d){\n        return d.date;\n    })));\n\n\n    let maxDateVaccines = (new Date(max(data.vaccines_data, function(d){\n        return d.date;\n    })));\n\n    options.maxDataDate = (maxDate).toDate();\n    options.maxVDataDate = maxDateVaccines;\n\n    if(maxDateVaccines>maxDate) {\n        maxDate = maxDateVaccines;\n    }\n\n    // if(maxDate<moment()){\n    //     maxDate = moment();\n    // }\n    // if(maxDateVaccines<moment()){\n    //     maxDateVaccines = moment();\n    // }\n\n    options.maxDate = moment(maxDate).toDate();\n    options.maxVDate = moment(maxDateVaccines).toDate();\n    options.minDate = moment(minDate).toDate();\n\n    // parse who data\n\n    let dayTotal = -1;\n    let dayCheck = 0;\n\n    let weekTotal = -1;\n    let weekCheck = -1;\n\n    let monthTotal = 0;\n    let monthCheck = 0;\n\n    // filter out negative new deaths\n    // data.who_data = data.who_data.filter(d=>d.New_deaths>0);\n    // data.who_data = data.who_data.filter(d=>d.New_cases>0);\n\n    data.who_data.sort(function(a,b){\n        return new Date(a.Date_reported) - new Date(b.Date_reported);\n    });\n\n    var countryCodes = [];\n    var ccArray = [];\n\n    data.who_data.forEach(function(d,i){\n        d.date = new Date(d.Date_reported);\n        d.dayOfYear =  moment(d.date).dayOfYear();\n        if(d.dayOfYear!==dayCheck) dayTotal++;\n        d.dayTotal = dayTotal;\n\n        d.week = moment(d.date).isoWeek();\n        if(d.week!==weekCheck) weekTotal++;\n        d.weekTotal = weekTotal;\n        d.month = d.date.getMonth();\n        if(d.month!==monthCheck) monthTotal++;\n        d.monthTotal = monthTotal;\n        d.year = d.date.getFullYear();\n\n        d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n        d.month_start = new Date(moment(d.date).startOf('month').toDate());\n\n        d.new_cases = parseInt(d.New_cases);\n        d.new_deaths = parseInt(d.New_deaths);\n\n        // negative values\n        if(d.new_deaths<0)d.new_deaths = 0;\n        if(d.new_cases<0)d.new_cases = 0;\n\n        d.cumulative_deaths = parseInt(d.Cumulative_deaths);\n        d.cumulative_cases = parseInt(d.Cumulative_cases);\n        d.country_code = d.Country_code;\n        d.country_name = null;\n        data.equity_data.forEach(function(dd,ii){\n            if(dd.country_iso2===d.Country_code){\n                d.ifrc_region = dd.ifrc_region;\n                d.country_name = dd.country_name;\n            }\n        })\n        if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n        if(!countryCodes.includes(d.country_code)) {\n            if(d.ifrc_region=='OTH'){\n                ccArray.push([d.Country, d.country_code]);\n            }\n            countryCodes.push(d.country_code);\n        }\n\n        delete d.Date_reported;\n        delete d.Country;\n        delete d.New_cases;\n        delete d.New_deaths;\n        delete d.Country_code;\n        delete d.Cumulative_deaths;\n        delete d.Cumulative_cases;\n        // delete d.Country_code;\n        delete d.WHO_region;\n        // delete d.Country;\n        dayCheck = d.dayOfYear;\n        weekCheck = d.week;\n        monthCheck = d.month;\n    })\n\n    // check for missing coutries\n    // ccArray.forEach(function(d,i){\n    //     console.log(d[1])\n    // })\n    // console.log(ccArray);\n\n    \n    // parse vaccine cumulative data\n    dayTotal = -1;\n    dayCheck = 0;\n\n    weekTotal = -1;\n    weekCheck = -1;\n    monthTotal = 0;\n    monthCheck = 0;\n\n    // filter out vaccine data on only include records with ISO3 country codes\n    data.vaccines_data_cumulative = data.vaccines_data.filter(function(d,i){\n        return d.iso_code.length===3 && d.total_vaccinations > 0;\n    })\n\n    // fill out missing vaccinations date records (extend cumulative)\n    var vGroup = flatGroup(data.vaccines_data_cumulative, d => d.iso_code);\n\n    var newDates = [];\n    var hasDays = [];\n    var initDate = 0;\n    var lastRecord = {};\n    var vDataFlat = [];\n    vGroup.forEach(function(d,i){\n\n        var minDt = new Date(minDateVaccines);\n        var maxDt = new Date(maxDateVaccines);\n        var hasDays = [];\n        var newDays = [];\n        var newDays = [];        \n        data.equity_data.forEach(function(dd,ii){\n            if(dd.country_iso3===vGroup[i][0]){\n                d.ifrc_region = dd.ifrc_region;\n                d.country_name = dd.country_name;\n                d.country_code = dd.country_iso2;\n                \n            }\n        })\n\n        vGroup[i].lastDate = new Date(max(vGroup[i][1], function(d,i){ return d.date }));\n\n        vGroup[i][1].forEach(function(dd,ii){\n            hasDays.push(new Date(dd.date).getTime());\n        })\n\n        // if((i<1)||(d[0] =='BFA')||(d[0] =='RWA')){\n        vGroup[i][1].forEach(function(dd,ii){\n            dd.total_vaccinations = parseInt(dd.total_vaccinations);\n            for (var day = minDt;day <= maxDt; day.setDate(day.getDate() + 1)) {\n                var newDay = day.getTime();\n                if(!hasDays.includes(newDay)){\n                    newDays.push({date: new Date(day), total_vaccinations: null})\n                }\n            }\n            // dd.lastDate = dd.date;\n        });\n\n        vGroup[i][1].push(...newDays);\n\n        vGroup[i][1].sort(function(a,b){\n            return new Date(a.date) - new Date(b.date);\n        });\n\n        var totalVac = 0;\n        var totalVac100 = 0;\n        var people_vaccinated_per_hundred = 0;\n        var people_fully_vaccinated_per_hundred = 0;\n\n        vGroup[i][1].forEach(function(dd,ii){\n\n            if(dd.total_vaccinations){\n                totalVac = dd.total_vaccinations;\n            } else {\n                dd.total_vaccinations = totalVac;\n            }\n            if(dd.total_vaccinations_per_hundred){\n                totalVac100 = dd.total_vaccinations_per_hundred\n            } else {\n                dd.total_vaccinations_per_hundred = totalVac100;\n            }\n            if(dd.people_vaccinated_per_hundred){\n                people_vaccinated_per_hundred = dd.people_vaccinated_per_hundred;\n            } else {\n                dd.people_vaccinated_per_hundred = people_vaccinated_per_hundred;\n            }\n            if(dd.people_fully_vaccinated_per_hundred){\n                people_fully_vaccinated_per_hundred = dd.people_fully_vaccinated_per_hundred;\n            } else {\n                dd.people_fully_vaccinated_per_hundred = people_fully_vaccinated_per_hundred;\n            }\n\n            var countryName;\n            if(vGroup[i].country_name==null) { countryName = vGroup[i][0];\n            } else {\n                countryName = vGroup[i].country_name\n            }\n\n            vDataFlat.push({\n                date: new Date(dd.date),\n                lastDate: (vGroup[i].lastDate),\n                total_vaccinations_per_hundred: parseFloat(totalVac100),\n                people_vaccinated_per_hundred: people_vaccinated_per_hundred,\n                people_fully_vaccinated_per_hundred: people_fully_vaccinated_per_hundred,\n                iso_code: vGroup[i][0], \n                ifrc_region: vGroup[i].ifrc_region,\n                country_name: countryName,\n                country_code: vGroup[i].country_code, \n                total_vaccinations: totalVac \n            })\n        })\n    });\n\n    data.vaccines_data_cumulative = vDataFlat;\n\n    data.vaccines_data_cumulative.sort(function(a,b){\n        return new Date(a.date) - new Date(b.date);\n    });\n\n    data.vaccines_data_cumulative.forEach(function(d,i){\n        if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n        d.dayOfYear =  moment(d.date).dayOfYear();\n        if(d.dayOfYear!==dayCheck) dayTotal++;\n        d.dayTotal = dayTotal;\n        d.week = moment(d.date).isoWeek();\n        if(d.week!==weekCheck) weekTotal++;\n        d.weekTotal = weekTotal;\n        d.month = d.date.getMonth();\n        if(d.month!==monthCheck) monthTotal++;\n        d.monthTotal = monthTotal;\n        d.year = d.date.getFullYear();\n        dayCheck = d.dayOfYear;\n        weekCheck = d.week;\n        monthCheck = d.month;\n        d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n        d.month_start = new Date(moment(d.date).startOf('month').toDate());\n    })\n\n    // parse vaccine daily data\n\n    dayTotal = -1;\n    dayCheck = 0;\n\n    weekTotal = -1;\n    weekCheck = -1;\n    monthTotal = 0;\n    monthCheck = 0;\n\n    // filter out vaccine data on only include records with ISO3 country codes\n    data.vaccines_data_daily = data.vaccines_data.filter(function(d,i){\n        return d.iso_code.length===3 && d.daily_vaccinations > 0;\n    })\n\n    // fill out missing vaccinations date records (extend cumulative)\n    var vGroup = flatGroup(data.vaccines_data_daily, d => d.iso_code);\n\n    var newDates = [];\n    var hasDays = [];\n    var initDate = 0;\n    var lastRecord = {};\n    var vDataFlat = [];\n    vGroup.forEach(function(d,i){\n\n        var minDt = new Date(minDateVaccines);\n        var maxDt = new Date(maxDateVaccines);\n        var hasDays = [];\n        var newDays = [];\n        var newDays = [];\n\n        data.equity_data.forEach(function(dd,ii){\n            if(dd.country_iso3===vGroup[i][0]){\n                d.ifrc_region = dd.ifrc_region;\n                d.country_name = dd.country_name;\n                d.country_code = dd.country_iso2;\n            }\n        })\n\n        vGroup[i][1].forEach(function(dd,ii){\n            hasDays.push(new Date(dd.date).getTime());\n        })\n\n        // if((i<1)||(d[0] =='BFA')||(d[0] =='RWA')){\n        vGroup[i][1].forEach(function(dd,ii){\n            dd.daily_vaccinations = parseInt(dd.daily_vaccinations);\n            for (var day = minDt;day <= maxDt; day.setDate(day.getDate() + 1)) {\n                var newDay = day.getTime();\n                if(!hasDays.includes(newDay)){\n                    newDays.push({date: new Date(day), daily_vaccinations: null})\n                }\n            }\n        });\n\n        vGroup[i][1].push(...newDays);\n\n        vGroup[i][1].sort(function(a,b){\n            return new Date(a.date) - new Date(b.date);\n        });\n\n        var daily_vaccinations = 0;\n\n        vGroup[i][1].forEach(function(dd,ii){\n            if(dd.daily_vaccinations){\n                daily_vaccinations = dd.daily_vaccinations;\n            } else {\n                dd.daily_vaccinations = daily_vaccinations;\n            }\n            var countryName;\n            if(vGroup[i].country_name==null) { countryName = vGroup[i][0];\n            } else {\n                countryName = vGroup[i].country_name\n            }\n            vDataFlat.push({\n                date: new Date(dd.date),\n                iso_code: vGroup[i][0], \n                ifrc_region: vGroup[i].ifrc_region,\n                country_name: countryName,\n                country_code: vGroup[i].country_code, \n                daily_vaccinations: daily_vaccinations \n            })\n        })\n    });\n\n    data.vaccines_data_daily = vDataFlat;\n\n    data.vaccines_data_daily.sort(function(a,b){\n        return new Date(a.date) - new Date(b.date);\n    });\n\n    data.vaccines_data_daily.forEach(function(d,i){\n        if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n        d.dayOfYear =  moment(d.date).dayOfYear();\n        if(d.dayOfYear!==dayCheck) dayTotal++;\n        d.dayTotal = dayTotal;\n        d.week = moment(d.date).isoWeek();\n        if(d.week!==weekCheck) weekTotal++;\n        d.weekTotal = weekTotal;\n        d.month = d.date.getMonth();\n        if(d.month!==monthCheck) monthTotal++;\n        d.monthTotal = monthTotal;\n        d.year = d.date.getFullYear();\n        dayCheck = d.dayOfYear;\n        weekCheck = d.week;\n        monthCheck = d.month;\n        d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n        d.month_start = new Date(moment(d.date).startOf('month').toDate());\n    });\n\n\n    // parse equity data inform/hdi indexes\n    data.equity_data.forEach(function(d,i){\n        if(d.hdi_category.match(/very high/i)){\n            d.hdi_category = 'very-high'\n        }\n        else if(d.hdi_category.match(/high/i)){\n            d.hdi_category = 'high'\n        }\n        else if(d.hdi_category.match(/medium/i)){\n            d.hdi_category = 'medium'\n        }\n        else if(d.hdi_category.match(/low/i)){\n            d.hdi_category = 'low'\n        }\n        if(d.inform_severity.match(/very high/i)){\n            d.inform_severity = 'very-high'\n        }\n        else if(d.inform_severity.match(/high/i)){\n            d.inform_severity = 'high'\n        }\n        else if(d.inform_severity.match(/medium/i)){\n            d.inform_severity = 'medium'\n        }\n        else if(d.inform_severity.match(/low/i)){\n            d.inform_severity = 'low'\n        }\n        else if(d.inform_severity.match(/no/i)){\n            d.inform_severity = 'no-score'\n        }\n    })\n\n    data.equity_data = data.equity_data.filter(function(d,i){\n       return countryCodes.includes(d.country_iso2)\n    })\n    data.original = clone(data);\n    // console.log(data);\n}\n\nexport default ParseData;\n"]},"metadata":{},"sourceType":"module"}