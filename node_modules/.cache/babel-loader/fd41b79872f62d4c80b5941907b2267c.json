{"ast":null,"code":"import * as d3 from \"d3\";\nimport moment from 'moment';\nimport colors from './colors';\nexport function drawTimechart(data, options) {\n  const regions = ['AP', 'AM', 'AF', 'ME', 'EU', 'OTH']; // console.log('draw timechart');\n  // console.log(data);\n  // console.log(options);\n  // const groupedData = d3.group(data.who_data, d => d[options.timeline_frequency+'Total'], d => d.ifrc_region)\n\n  const groupedData = [];\n  data.who_data.forEach(function (d, i) {\n    if (!groupedData[d[options.timeline_frequency + 'Total']]) groupedData[d[options.timeline_frequency + 'Total']] = {};\n    if (options.timeline_frequency == 'day') groupedData[d[options.timeline_frequency + 'Total']].date = d.date;\n    if (options.timeline_frequency == 'week') groupedData[d[options.timeline_frequency + 'Total']].date = moment(d.date).startOf('isoWeek').toDate();\n    if (options.timeline_frequency == 'month') groupedData[d[options.timeline_frequency + 'Total']].date = moment(d.date).startOf('month').toDate();\n    if (!groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region]) groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region] = {\n      new_cases: 0,\n      new_deaths: 0,\n      cumulative_cases: 0,\n      cumulative_deaths: 0\n    };\n    groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].new_cases += d.new_cases;\n    groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].new_deaths += d.new_deaths;\n    groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].cumulative_cases = 0; // if(d.new_cases>0)\n    // groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].cumulative_cases = d.cumulative_cases;\n    // if(d.new_deaths>0)\n    // groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].cumulative_deaths += d.cumulative_deaths;\n  });\n  console.log(groupedData); // totals by date\n\n  groupedData.forEach(function (d, i) {\n    regions.forEach(function (dd, ii) {\n      // if(dd!='OTH') d.region.push({'region': dd, 'new_cases': d[dd].new_cases, 'new_deaths': d[dd].new_deaths, 'cumulative_cases': d[dd].cumulative_cases, 'cumulative_deaths': d[dd].cumulative_deaths});\n      if (i > 0) {\n        d[dd].cumulative_cases = groupedData[i][dd].new_cases + groupedData[i - 1][dd].cumulative_cases;\n        d[dd].cumulative_deaths = groupedData[i][dd].new_deaths + groupedData[i - 1][dd].cumulative_deaths;\n      } else {\n        d[dd].cumulative_cases = groupedData[i][dd].new_cases;\n        d[dd].cumulative_deaths = groupedData[i][dd].new_deaths;\n      }\n    });\n    d.total_new_cases = d.AF.new_cases + d.AP.new_cases + d.AM.new_cases + d.EU.new_cases + d.ME.new_cases + d.OTH.new_cases;\n    d.total_cumulative_cases = d.AF.cumulative_cases + d.AP.cumulative_cases + d.AM.cumulative_cases + d.EU.cumulative_cases + d.ME.cumulative_cases + d.OTH.cumulative_cases;\n    d.total_new_deaths = d.AF.new_deaths + d.AP.new_deaths + d.AM.new_deaths + d.EU.new_deaths + d.ME.new_deaths + d.OTH.new_deaths;\n    d.total_cumulative_deaths = d.AF.cumulative_deaths + d.AP.cumulative_deaths + d.AM.cumulative_deaths + d.EU.cumulative_deaths + d.ME.cumulative_deaths + d.OTH.cumulative_deaths;\n    d.region = [];\n    regions.forEach(function (dd, ii) {\n      d.region.push({\n        'region': dd,\n        'new_cases': d[dd].new_cases,\n        'new_deaths': d[dd].new_deaths,\n        'cumulative_cases': d[dd].cumulative_cases,\n        'cumulative_deaths': d[dd].cumulative_deaths\n      });\n    });\n  }); // console.log(groupedData);\n\n  const numIntervals = d3.max(data.who_data, function (d, i) {\n    return d[options.timeline_frequency + 'Total'];\n  });\n  const maxCases = d3.max(groupedData, function (d, i) {\n    if (options.timeline_type == 'non-cumulative') return d.total_new_cases;\n    if (options.timeline_type == 'cumulative') return d.total_cumulative_cases;\n    if (options.timeline_type == 'stacked') return 100;\n  });\n  const maxDeaths = d3.max(groupedData, function (d, i) {\n    if (options.timeline_type == 'non-cumulative') return d.total_new_deaths;\n    if (options.timeline_type == 'cumulative') return d.total_cumulative_deaths;\n    if (options.timeline_type == 'stacked') return 100;\n  }); // define date range\n\n  const minDate = groupedData[0].date;\n  const maxDate = groupedData[numIntervals].date;\n  const svg = d3.select('#timechart_svg');\n  svg.selectAll('g').remove();\n  const width = 2000;\n  const barWidth = width / numIntervals;\n  let barSpacing = 0.06;\n  if (options.timeline_frequency == 'month') barSpacing = 0.05;\n  if (options.timeline_frequency == 'day') barSpacing = 0;\n  const xScale = d3.scaleLinear().range([0, width]).domain([0, numIntervals]);\n  const yScaleCases = d3.scaleLinear().range([0, 140]).domain([0, maxCases]);\n  const yScaleDeaths = d3.scaleLinear().range([0, 140]).domain([0, maxDeaths]);\n  console.log('minDate');\n  console.log(minDate);\n  console.log('maxDate');\n  console.log(maxDate);\n  console.log('maxCases');\n  console.log(maxCases);\n  console.log('maxDeaths');\n  console.log(maxDeaths); // CASES\n  // loop through groupedData and draw bars\n\n  const barGroups = svg.selectAll('.bar_group').data(groupedData).enter().append('g').attr('transform', function (d, i) {\n    return 'translate(' + xScale(i) + ')';\n  }); // CASES\n\n  barGroups.selectAll('.cases_bar').data(function (d, i) {\n    return d.region.filter(function (dd, ii) {\n      return dd.region != 'OTH';\n    });\n  }).enter().append('rect').attr('class', 'cases_bar').attr('x', barWidth * barSpacing).attr('y', function (d, i) {\n    const totalNewCases = d3.select(this.parentNode).datum().total_new_cases - d3.select(this.parentNode).datum().OTH.new_cases;\n    let dp = 0;\n\n    if (i > 0) {\n      for (let ii = 1; ii <= i; ii++) {\n        if (options.timeline_type == 'cumulative') dp += d3.select(this.parentNode).datum().region[ii - 1].cumulative_cases;\n        if (options.timeline_type == 'non-cumulative') dp += d3.select(this.parentNode).datum().region[ii - 1].new_cases;\n        if (options.timeline_type == 'stacked') dp += d3.select(this.parentNode).datum().region[ii - 1].new_cases;\n      }\n    }\n\n    let y = 0;\n    if (options.timeline_type == 'cumulative') y = 140 - yScaleCases(d.cumulative_cases) - yScaleCases(dp);\n    if (options.timeline_type == 'non-cumulative') y = 140 - yScaleCases(d.new_cases) - yScaleCases(dp);\n    if (options.timeline_type == 'stacked') y = 140 - 140 * (d.new_cases / totalNewCases) - 140 * (dp / totalNewCases);\n\n    if (y) {\n      return y;\n    } else {\n      return 0;\n    }\n\n    ;\n  }).attr('width', barWidth - barWidth * barSpacing * 2).attr('height', function (d, i) {\n    const totalNewCases = d3.select(this.parentNode).datum().total_new_cases - d3.select(this.parentNode).datum().OTH.new_cases;\n    if (options.timeline_type == 'cumulative') return yScaleCases(d.cumulative_cases);\n    if (options.timeline_type == 'non-cumulative') return yScaleCases(d.new_cases);\n    if (options.timeline_type == 'stacked') return 140 * (d.new_cases / totalNewCases);\n  }).attr('fill', function (d, i) {\n    return colors.regions[d.region];\n  }); // DEATHS\n\n  barGroups.selectAll('.deaths_bar').data(function (d, i) {\n    return d.region.filter(function (dd, ii) {\n      return dd.region != 'OTH';\n    });\n  }).enter().append('rect').attr('class', 'deaths_bar').attr('x', barWidth * barSpacing).attr('y', function (d, i) {\n    const totalNewDeaths = d3.select(this.parentNode).datum().total_new_deaths - d3.select(this.parentNode).datum().OTH.new_deaths;\n    let dp = 0;\n\n    if (i > 0) {\n      for (let ii = 1; ii <= i; ii++) {\n        if (options.timeline_type == 'cumulative') dp += d3.select(this.parentNode).datum().region[ii - 1].cumulative_deaths;\n        if (options.timeline_type == 'non-cumulative') dp += d3.select(this.parentNode).datum().region[ii - 1].new_deaths;\n        if (options.timeline_type == 'stacked') dp += d3.select(this.parentNode).datum().region[ii - 1].new_deaths;\n      }\n    }\n\n    if (options.timeline_type == 'cumulative') return 140 - yScaleDeaths(d.cumulative_deaths) - yScaleDeaths(dp) + 170;\n    if (options.timeline_type == 'non-cumulative') return 140 - yScaleDeaths(d.new_deaths) - yScaleDeaths(dp) + 170;\n    if (options.timeline_type == 'stacked') return 140 - 140 * (d.new_deaths / totalNewDeaths) - 140 * (dp / totalNewDeaths) + 170;\n  }).attr('width', barWidth - barWidth * barSpacing * 2).attr('height', function (d, i) {\n    const totalNewDeaths = d3.select(this.parentNode).datum().total_new_deaths - d3.select(this.parentNode).datum().OTH.new_deaths;\n    if (options.timeline_type == 'cumulative') return yScaleDeaths(d.cumulative_deaths);\n    if (options.timeline_type == 'non-cumulative') return yScaleDeaths(d.new_deaths);\n    if (options.timeline_type == 'stacked') return 140 * (d.new_deaths / totalNewDeaths);\n  }).attr('fill', function (d, i) {\n    return colors.regions[d.region];\n  }); // 10\n  // 0.1\n  // 1 - 8 - 1\n  // draw x-axis\n  // draw y-axis\n}\nexport function updateTimechart(data) {\n  console.log('update timechart');\n}\nexport default drawTimechart;","map":{"version":3,"sources":["/Users/matthewsmawfield/www/ifrc-covid-dataviz/src/Timechart.js"],"names":["d3","moment","colors","drawTimechart","data","options","regions","groupedData","who_data","forEach","d","i","timeline_frequency","date","startOf","toDate","ifrc_region","new_cases","new_deaths","cumulative_cases","cumulative_deaths","console","log","dd","ii","total_new_cases","AF","AP","AM","EU","ME","OTH","total_cumulative_cases","total_new_deaths","total_cumulative_deaths","region","push","numIntervals","max","maxCases","timeline_type","maxDeaths","minDate","maxDate","svg","select","selectAll","remove","width","barWidth","barSpacing","xScale","scaleLinear","range","domain","yScaleCases","yScaleDeaths","barGroups","enter","append","attr","filter","totalNewCases","parentNode","datum","dp","y","totalNewDeaths","updateTimechart"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\nimport moment from 'moment';\nimport colors from './colors';\n\nexport function drawTimechart(data, options) {\n\n    const regions = ['AP', 'AM', 'AF', 'ME', 'EU', 'OTH'];\n    // console.log('draw timechart');\n    // console.log(data);\n    // console.log(options);\n    // const groupedData = d3.group(data.who_data, d => d[options.timeline_frequency+'Total'], d => d.ifrc_region)\n\n    const groupedData = [];\n\n    data.who_data.forEach(function(d,i){\n        if(!groupedData[d[options.timeline_frequency+'Total']])groupedData[d[options.timeline_frequency+'Total']] = {};\n        if(options.timeline_frequency=='day') groupedData[d[options.timeline_frequency+'Total']].date = d.date;\n        if(options.timeline_frequency=='week') groupedData[d[options.timeline_frequency+'Total']].date = moment(d.date).startOf('isoWeek').toDate();\n        if(options.timeline_frequency=='month') groupedData[d[options.timeline_frequency+'Total']].date = moment(d.date).startOf('month').toDate();\n        if(!groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region]) groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region] = {new_cases: 0, new_deaths: 0, cumulative_cases: 0, cumulative_deaths: 0};\n        groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].new_cases += d.new_cases;\n        groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].new_deaths += d.new_deaths;\n        groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].cumulative_cases = 0;\n        // if(d.new_cases>0)\n        // groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].cumulative_cases = d.cumulative_cases;\n        // if(d.new_deaths>0)\n        // groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].cumulative_deaths += d.cumulative_deaths;\n    });\n\n    console.log(groupedData);\n\n    // totals by date\n    groupedData.forEach(function(d,i){\n        regions.forEach(function(dd,ii){\n            // if(dd!='OTH') d.region.push({'region': dd, 'new_cases': d[dd].new_cases, 'new_deaths': d[dd].new_deaths, 'cumulative_cases': d[dd].cumulative_cases, 'cumulative_deaths': d[dd].cumulative_deaths});\n            if(i>0){\n                d[dd].cumulative_cases = groupedData[i][dd].new_cases + groupedData[i-1][dd].cumulative_cases;\n                d[dd].cumulative_deaths = groupedData[i][dd].new_deaths + groupedData[i-1][dd].cumulative_deaths;\n            } else {\n                d[dd].cumulative_cases = groupedData[i][dd].new_cases;\n                d[dd].cumulative_deaths = groupedData[i][dd].new_deaths;\n            }\n        })\n\n        d.total_new_cases = d.AF.new_cases + d.AP.new_cases + d.AM.new_cases + d.EU.new_cases + d.ME.new_cases + d.OTH.new_cases; \n        d.total_cumulative_cases = d.AF.cumulative_cases + d.AP.cumulative_cases + d.AM.cumulative_cases + d.EU.cumulative_cases + d.ME.cumulative_cases + d.OTH.cumulative_cases; \n        d.total_new_deaths = d.AF.new_deaths + d.AP.new_deaths + d.AM.new_deaths + d.EU.new_deaths + d.ME.new_deaths + d.OTH.new_deaths; \n        d.total_cumulative_deaths = d.AF.cumulative_deaths + d.AP.cumulative_deaths + d.AM.cumulative_deaths + d.EU.cumulative_deaths + d.ME.cumulative_deaths + d.OTH.cumulative_deaths; \n        d.region = [];\n\n        regions.forEach(function(dd,ii){\n            d.region.push({'region': dd, 'new_cases': d[dd].new_cases, 'new_deaths': d[dd].new_deaths, 'cumulative_cases': d[dd].cumulative_cases, 'cumulative_deaths': d[dd].cumulative_deaths});\n        })\n\n    })\n\n    // console.log(groupedData);\n    const numIntervals = d3.max(data.who_data, function(d,i){\n        return d[options.timeline_frequency+'Total'];\n    });\n\n    const maxCases = d3.max(groupedData, function(d,i){\n        if(options.timeline_type=='non-cumulative') return d.total_new_cases;\n        if(options.timeline_type=='cumulative') return d.total_cumulative_cases;\n        if(options.timeline_type=='stacked') return 100;\n    })\n\n    const maxDeaths = d3.max(groupedData, function(d,i){\n        if(options.timeline_type=='non-cumulative') return d.total_new_deaths;\n        if(options.timeline_type=='cumulative') return d.total_cumulative_deaths;\n        if(options.timeline_type=='stacked') return 100;\n    })\n\n    // define date range\n    const minDate = groupedData[0].date;\n    const maxDate = groupedData[numIntervals].date;\n\n    const svg = d3.select('#timechart_svg');\n    svg.selectAll('g').remove();\n\n    const width = 2000;\n    const barWidth = width/numIntervals;\n\n    let barSpacing = 0.06 \n    if(options.timeline_frequency=='month') barSpacing = 0.05;\n    if(options.timeline_frequency=='day') barSpacing = 0;\n\n    const xScale = d3.scaleLinear()\n    .range([0,width])\n    .domain([0,numIntervals]);\n\n    const yScaleCases = d3.scaleLinear()\n    .range([0,140])\n    .domain([0,maxCases]);\n\n    const yScaleDeaths = d3.scaleLinear()\n    .range([0,140])\n    .domain([0,maxDeaths]);\n\n    console.log('minDate');\n    console.log(minDate);\n    console.log('maxDate');\n    console.log(maxDate);\n    console.log('maxCases');\n    console.log(maxCases);\n\n    console.log('maxDeaths');\n    console.log(maxDeaths);\n\n    // CASES\n    // loop through groupedData and draw bars\n    const barGroups = svg.selectAll('.bar_group')\n    .data(groupedData)\n    .enter()\n    .append('g')\n    .attr('transform', function(d,i){ \n        return 'translate('+xScale(i)+')'\n    })\n\n    // CASES\n    barGroups.selectAll('.cases_bar')\n    .data(function(d,i){ return d.region.filter(function(dd,ii){\n        return dd.region!='OTH';\n    })})\n    .enter()\n    .append('rect')\n    .attr('class', 'cases_bar')\n    .attr('x', (barWidth*barSpacing))\n    .attr('y', function(d,i){\n        const totalNewCases = d3.select(this.parentNode).datum().total_new_cases - d3.select(this.parentNode).datum().OTH.new_cases;\n        let dp = 0;\n        if(i>0){\n            for(let ii=1;ii<=i;ii++){\n                if(options.timeline_type=='cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].cumulative_cases;\n                if(options.timeline_type=='non-cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].new_cases;\n                if(options.timeline_type=='stacked') dp += d3.select(this.parentNode).datum().region[ii-1].new_cases;\n            }\n        }\n        let y = 0;\n        if(options.timeline_type=='cumulative') y = (140-yScaleCases(d.cumulative_cases)-(yScaleCases(dp)))\n        if(options.timeline_type=='non-cumulative') y = (140-yScaleCases(d.new_cases)-(yScaleCases(dp)))\n        if(options.timeline_type=='stacked') y = (140-(140*(d.new_cases/totalNewCases))-((140*(dp/totalNewCases))))\n        if(y){ return y; } else { return 0};\n    })\n    .attr('width', barWidth-(barWidth*barSpacing*2))\n    .attr('height', function(d,i){\n        const totalNewCases = d3.select(this.parentNode).datum().total_new_cases - d3.select(this.parentNode).datum().OTH.new_cases;\n        if(options.timeline_type=='cumulative') return yScaleCases(d.cumulative_cases);\n        if(options.timeline_type=='non-cumulative') return yScaleCases(d.new_cases);\n        if(options.timeline_type=='stacked') return (140*(d.new_cases/totalNewCases));\n    })\n    .attr('fill', function(d,i){\n        return colors.regions[d.region];\n    })\n\n    // DEATHS\n    barGroups.selectAll('.deaths_bar')\n    .data(function(d,i){ return d.region.filter(function(dd,ii){\n        return dd.region!='OTH';\n    })})\n    .enter()\n    .append('rect')\n    .attr('class', 'deaths_bar')\n    .attr('x', (barWidth*barSpacing))\n    .attr('y', function(d,i){\n        const totalNewDeaths = d3.select(this.parentNode).datum().total_new_deaths - d3.select(this.parentNode).datum().OTH.new_deaths;\n        let dp = 0;\n        if(i>0){\n            for(let ii=1;ii<=i;ii++){\n                if(options.timeline_type=='cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].cumulative_deaths;\n                if(options.timeline_type=='non-cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].new_deaths;\n                if(options.timeline_type=='stacked') dp += d3.select(this.parentNode).datum().region[ii-1].new_deaths;\n            }\n        }\n        if(options.timeline_type=='cumulative') return (140-yScaleDeaths(d.cumulative_deaths)-(yScaleDeaths(dp))+170)\n        if(options.timeline_type=='non-cumulative') return (140-yScaleDeaths(d.new_deaths)-(yScaleDeaths(dp))+170)\n        if(options.timeline_type=='stacked') return (140-(140*(d.new_deaths/totalNewDeaths))-((140*(dp/totalNewDeaths)))+170)\n    })\n    .attr('width', barWidth-(barWidth*barSpacing*2))\n    .attr('height', function(d,i){\n        const totalNewDeaths = d3.select(this.parentNode).datum().total_new_deaths - d3.select(this.parentNode).datum().OTH.new_deaths;\n        if(options.timeline_type=='cumulative') return yScaleDeaths(d.cumulative_deaths);\n        if(options.timeline_type=='non-cumulative') return yScaleDeaths(d.new_deaths);\n        if(options.timeline_type=='stacked') return (140*(d.new_deaths/totalNewDeaths));\n\n    })\n    .attr('fill', function(d,i){\n        return colors.regions[d.region];\n    })\n\n    // 10\n\n    // 0.1\n\n    // 1 - 8 - 1\n    \n    // draw x-axis\n\n\n    // draw y-axis\n\n}\n\nexport function updateTimechart(data) {\n\n    console.log('update timechart');\n\n}\n\nexport default drawTimechart;\n"]},"metadata":{},"sourceType":"module"}