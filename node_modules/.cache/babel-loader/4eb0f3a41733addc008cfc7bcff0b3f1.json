{"ast":null,"code":"import * as d3 from \"d3\";\nimport moment from 'moment';\nimport colors from './colors';\nimport { nFormatter } from './HelperFunctions';\nlet yScaleCases;\nlet yScaleDeaths;\nlet yScaleVaccines;\nlet yAxisCases;\nlet yAxisDeaths;\nlet yAxisVaccines;\nlet yScaleCasesAxis;\nlet yScaleDeathsAxis;\nlet yScaleVaccinesAxis;\nexport function drawTimechart(data, options) {\n  const regions = ['AF', 'ME', 'AP', 'EU', 'AM', 'OTH'];\n  const groupedData = [];\n  data.who_data.forEach(function (d, i) {\n    if (!groupedData[d[options.timeline_frequency + 'Total']]) groupedData[d[options.timeline_frequency + 'Total']] = {};\n    if (options.timeline_frequency === 'day') groupedData[d[options.timeline_frequency + 'Total']].date = d.date;\n    if (options.timeline_frequency === 'week') groupedData[d[options.timeline_frequency + 'Total']].date = moment(d.date).startOf('isoWeek').toDate();\n    if (options.timeline_frequency === 'month') groupedData[d[options.timeline_frequency + 'Total']].date = moment(d.date).startOf('month').toDate();\n    if (!groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region]) groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region] = {\n      new_cases: 0,\n      new_deaths: 0,\n      cumulative_cases: 0,\n      cumulative_deaths: 0\n    };\n    groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].new_cases += d.new_cases;\n    groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].new_deaths += d.new_deaths;\n    groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].cumulative_cases = 0;\n  }); // totals by date\n\n  groupedData.forEach(function (d, i) {\n    regions.forEach(function (dd, ii) {\n      // if(dd!=='OTH') d.region.push({'region': dd, 'new_cases': d[dd].new_cases, 'new_deaths': d[dd].new_deaths, 'cumulative_cases': d[dd].cumulative_cases, 'cumulative_deaths': d[dd].cumulative_deaths});\n      if (i > 0) {\n        d[dd].cumulative_cases = groupedData[i][dd].new_cases + groupedData[i - 1][dd].cumulative_cases;\n        d[dd].cumulative_deaths = groupedData[i][dd].new_deaths + groupedData[i - 1][dd].cumulative_deaths;\n      } else {\n        d[dd].cumulative_cases = groupedData[i][dd].new_cases;\n        d[dd].cumulative_deaths = groupedData[i][dd].new_deaths;\n      }\n    });\n    d.total_new_cases = d.AF.new_cases + d.AP.new_cases + d.AM.new_cases + d.EU.new_cases + d.ME.new_cases + d.OTH.new_cases;\n    d.total_cumulative_cases = d.AF.cumulative_cases + d.AP.cumulative_cases + d.AM.cumulative_cases + d.EU.cumulative_cases + d.ME.cumulative_cases + d.OTH.cumulative_cases;\n    d.total_new_deaths = d.AF.new_deaths + d.AP.new_deaths + d.AM.new_deaths + d.EU.new_deaths + d.ME.new_deaths + d.OTH.new_deaths;\n    d.total_cumulative_deaths = d.AF.cumulative_deaths + d.AP.cumulative_deaths + d.AM.cumulative_deaths + d.EU.cumulative_deaths + d.ME.cumulative_deaths + d.OTH.cumulative_deaths;\n    d.region = [];\n    regions.forEach(function (dd, ii) {\n      d.region.push({\n        'region': dd,\n        'new_cases': d[dd].new_cases,\n        'new_deaths': d[dd].new_deaths,\n        'cumulative_cases': d[dd].cumulative_cases,\n        'cumulative_deaths': d[dd].cumulative_deaths\n      });\n    });\n  });\n  let vgroupedData = [];\n\n  if (options.timeline_type != 'cumulative') {\n    // cumulative and stacked\n    console.log('thisiQWERQ');\n    data.vaccines_data = data.vaccines_data_daily;\n    data.vaccines_data.forEach(function (d, i) {\n      if (!vgroupedData[d[options.timeline_frequency + 'Total']]) vgroupedData[d[options.timeline_frequency + 'Total']] = {};\n      if (options.timeline_frequency === 'day') vgroupedData[d[options.timeline_frequency + 'Total']].date = d.date;\n      if (options.timeline_frequency === 'week') vgroupedData[d[options.timeline_frequency + 'Total']].date = moment(d.date).startOf('isoWeek').toDate();\n      if (options.timeline_frequency === 'month') vgroupedData[d[options.timeline_frequency + 'Total']].date = moment(d.date).startOf('month').toDate();\n      if (!vgroupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region]) vgroupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region] = {\n        new_vaccines: 0\n      };\n      vgroupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].new_vaccines += d.daily_vaccinations;\n    }); // totals by date\n\n    vgroupedData.forEach(function (d, i) {\n      regions.forEach(function (dd, ii) {\n        if (!d[dd]) {\n          d[dd] = {\n            new_vaccines: 0,\n            cumulative_vaccines: 0\n          };\n        }\n      });\n      d.total_new_vaccines = d.AF.new_vaccines + d.AP.new_vaccines + d.AM.new_vaccines + d.EU.new_vaccines + d.ME.new_vaccines + d.OTH.new_vaccines;\n      d.region = [];\n      regions.forEach(function (dd, ii) {\n        d.region.push({\n          'region': dd,\n          'new_vaccines': d[dd].new_vaccines\n        });\n      });\n    });\n  } else {\n    // cumulative only\n    data.vaccines_data = [];\n\n    if (options.timeline_frequency === 'day') {\n      data.vaccines_data = data.vaccines_data_cumulative;\n    }\n\n    if (options.timeline_frequency === 'week') {\n      data.vaccines_data_cumulative.forEach(function (d, i) {\n        var endOfWeekDate = moment(d.date).endOf('isoWeek').startOf('day').unix();\n        var date = moment(d.date).startOf('day').unix();\n\n        if (date == endOfWeekDate || d.date == options.maxDate) {\n          data.vaccines_data.push(d);\n        }\n      });\n    }\n\n    if (options.timeline_frequency === 'month') {\n      data.vaccines_data_cumulative.forEach(function (d, i) {\n        var endOfMonthDate = moment(d.date).endOf('month').startOf('day').unix();\n        var date = moment(d.date).startOf('day').unix();\n\n        if (date == endOfMonthDate || d.date == options.maxDate) {\n          data.vaccines_data.push(d);\n        }\n      });\n    }\n\n    console.log('qwerqwerqew');\n    console.log(data.vaccines_data);\n    data.vaccines_data.forEach(function (d, i) {\n      if (!vgroupedData[d[options.timeline_frequency + 'Total']]) vgroupedData[d[options.timeline_frequency + 'Total']] = {};\n      if (options.timeline_frequency === 'day') vgroupedData[d[options.timeline_frequency + 'Total']].date = d.date;\n      if (options.timeline_frequency === 'week') vgroupedData[d[options.timeline_frequency + 'Total']].date = moment(d.date).startOf('isoWeek').toDate();\n      if (options.timeline_frequency === 'month') vgroupedData[d[options.timeline_frequency + 'Total']].date = moment(d.date).startOf('month').toDate();\n      if (!vgroupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region]) vgroupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region] = {\n        cumulative_vaccines: 0\n      };\n      vgroupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].cumulative_vaccines += d.total_vaccinations;\n    }); // totals by date\n\n    vgroupedData.forEach(function (d, i) {\n      regions.forEach(function (dd, ii) {\n        if (!d[dd]) {\n          d[dd] = {\n            cumulative_vaccines: 0\n          };\n        }\n      });\n      d.total_cumulative_vaccines = d.AF.cumulative_vaccines + d.AP.cumulative_vaccines + d.AM.cumulative_vaccines + d.EU.cumulative_vaccines + d.ME.cumulative_vaccines + d.OTH.cumulative_vaccines;\n      d.region = [];\n      regions.forEach(function (dd, ii) {\n        d.region.push({\n          'region': dd,\n          'cumulative_vaccines': d[dd].cumulative_vaccines\n        });\n      });\n    });\n  }\n\n  vgroupedData = vgroupedData.filter(function (el) {\n    return el;\n  });\n  console.log('vgroupedData');\n  console.log(vgroupedData);\n  const numIntervals = d3.max(data.who_data, function (d, i) {\n    return d[options.timeline_frequency + 'Total'];\n  });\n  const maxCases = d3.max(groupedData, function (d, i) {\n    if (options.timeline_type === 'non-cumulative') return d.total_new_cases;\n    if (options.timeline_type === 'cumulative') return d.total_cumulative_cases;\n    if (options.timeline_type === 'stacked') return 100;\n  });\n  const maxDeaths = d3.max(groupedData, function (d, i) {\n    if (options.timeline_type === 'non-cumulative') return d.total_new_deaths;\n    if (options.timeline_type === 'cumulative') return d.total_cumulative_deaths;\n    if (options.timeline_type === 'stacked') return 100;\n  });\n  const maxVaccines = d3.max(vgroupedData, function (d, i) {\n    if (d) {\n      if (options.timeline_type === 'non-cumulative') return d.total_new_vaccines;\n      if (options.timeline_type === 'cumulative') return d.total_cumulative_vaccines;\n      if (options.timeline_type === 'stacked') return 100;\n    }\n  }); // define date range\n  // const minDate = groupedData[0].date;\n  // const maxDate = groupedData[numIntervals].date;\n\n  const minDate = groupedData[0].date;\n  const maxDate = options.maxDate;\n  let md = moment(maxDate);\n  if (options.timeline_frequency === 'month') md = md.add(1, 'months');\n  if (options.timeline_frequency === 'week') md = md.add(1, 'weeks');\n  if (options.timeline_frequency === 'day') md = md.add(1, 'days');\n  const svg = d3.select('#timechart_svg');\n  svg.selectAll('g').remove();\n  d3.selectAll('#layout .yAxis').remove();\n  const width = 2000;\n  const barWidth = width / numIntervals;\n  let barSpacing = 0.04;\n  if (options.timeline_frequency === 'month') barSpacing = 0.03;\n  if (options.timeline_frequency === 'day') barSpacing = 0; // define scales\n\n  const xScale = d3.scaleTime().range([0, width]).domain([minDate, md]);\n  yScaleCases = d3.scaleLinear().range([0, 140]).domain([0, maxCases]);\n  yScaleCasesAxis = d3.scaleLinear().range([140, 0]).domain([0, maxCases]);\n  yScaleDeaths = d3.scaleLinear().range([0, 140]).domain([0, maxDeaths]);\n  yScaleDeathsAxis = d3.scaleLinear().range([140, 0]).domain([0, maxDeaths]);\n  yScaleVaccines = d3.scaleLinear().range([0, 140]).domain([0, maxVaccines]);\n  yScaleVaccinesAxis = d3.scaleLinear().range([140, 0]).domain([0, maxVaccines]); // define axi\n\n  yAxisCases = d3.axisRight().scale(yScaleCasesAxis).ticks(3).tickSize(3).tickPadding(3).tickFormat(function (d) {\n    if (options.timeline_type == 'stacked') return nFormatter(d) + '%';\n    return nFormatter(d);\n  });\n  yAxisDeaths = d3.axisRight().scale(yScaleDeathsAxis).ticks(3).tickSize(3).tickPadding(3).tickFormat(function (d) {\n    if (options.timeline_type == 'stacked') return nFormatter(d) + '%';\n    return nFormatter(d);\n  });\n  yAxisVaccines = d3.axisRight().scale(yScaleVaccinesAxis).ticks(2).tickSize(3).tickPadding(3).tickFormat(function (d) {\n    if (options.timeline_type == 'stacked') return nFormatter(d) + '%';\n    return nFormatter(d);\n  }); // y-axis cases\n\n  var yAxisCasesText = d3.select('#layout').append(\"g\").attr(\"class\", \"yAxis axis\").attr(\"id\", \"casesAxis\").attr('transform', 'translate(620,363)').call(yAxisCases); // y-axis deaths\n\n  var yAxisDeathsText = d3.select('#layout').append(\"g\").attr(\"class\", \"yAxis axis\").attr(\"id\", \"deathsAxis\").attr('transform', 'translate(620,534)').call(yAxisDeaths); // y-axis vaccines\n\n  var yAxisVaccinesText = d3.select('#layout').append(\"g\").attr(\"class\", \"yAxis axis\").attr(\"id\", \"VaccinesAxis\").attr('transform', 'translate(620,707.5)').call(yAxisVaccines); // CASES\n  // loop through groupedData and draw bars\n\n  const barGroups = svg.selectAll('.bar_group').data(groupedData).enter().append('g').attr('data-date', function (d) {\n    return d.date;\n  }).attr('transform', function (d, i) {\n    return 'translate(' + xScale(d.date) + ')';\n  }); // CASES\n\n  barGroups.selectAll('.cases_bar').data(function (d, i) {\n    return d.region.filter(function (dd, ii) {\n      return dd.region !== 'OTH';\n    });\n  }).enter().append('rect').attr('class', 'timeBar cases_bar').attr('x', barWidth * barSpacing).attr('y', function (d, i) {\n    const totalNewCases = d3.select(this.parentNode).datum().total_new_cases - d3.select(this.parentNode).datum().OTH.new_cases;\n    let dp = 0;\n\n    if (i > 0) {\n      for (let ii = 1; ii <= i; ii++) {\n        if (options.timeline_type === 'cumulative') dp += d3.select(this.parentNode).datum().region[ii - 1].cumulative_cases;\n        if (options.timeline_type === 'non-cumulative') dp += d3.select(this.parentNode).datum().region[ii - 1].new_cases;\n        if (options.timeline_type === 'stacked') dp += d3.select(this.parentNode).datum().region[ii - 1].new_cases;\n      }\n    }\n\n    let y = 0;\n    if (options.timeline_type === 'cumulative') y = 140 - yScaleCases(d.cumulative_cases) - yScaleCases(dp);\n    if (options.timeline_type === 'non-cumulative') y = 140 - yScaleCases(d.new_cases) - yScaleCases(dp);\n    if (options.timeline_type === 'stacked') y = 140 - 140 * (d.new_cases / totalNewCases) - 140 * (dp / totalNewCases);\n\n    if (y) {\n      return y;\n    } else {\n      return 0;\n    }\n\n    ;\n  }).attr('width', barWidth - barWidth * barSpacing * 2).attr('height', function (d, i) {\n    const totalNewCases = d3.select(this.parentNode).datum().total_new_cases - d3.select(this.parentNode).datum().OTH.new_cases;\n    let y = 0;\n    if (options.timeline_type === 'cumulative') y = yScaleCases(d.cumulative_cases);\n    if (options.timeline_type === 'non-cumulative') y = yScaleCases(d.new_cases);\n    if (options.timeline_type === 'stacked') y = 140 * (d.new_cases / totalNewCases);\n\n    if (y) {\n      return y;\n    } else {\n      return 0;\n    }\n\n    ;\n  }).attr('fill', function (d, i) {\n    return colors.regions[d.region];\n  }); // DEATHS\n\n  barGroups.selectAll('.deaths_bar').data(function (d, i) {\n    return d.region.filter(function (dd, ii) {\n      return dd.region !== 'OTH';\n    });\n  }).enter().append('rect').attr('class', 'timeBar deaths_bar').attr('x', barWidth * barSpacing).attr('y', function (d, i) {\n    const totalNewDeaths = d3.select(this.parentNode).datum().total_new_deaths - d3.select(this.parentNode).datum().OTH.new_deaths;\n    let dp = 0;\n\n    if (i > 0) {\n      for (let ii = 1; ii <= i; ii++) {\n        if (options.timeline_type === 'cumulative') dp += d3.select(this.parentNode).datum().region[ii - 1].cumulative_deaths;\n        if (options.timeline_type === 'non-cumulative') dp += d3.select(this.parentNode).datum().region[ii - 1].new_deaths;\n        if (options.timeline_type === 'stacked') dp += d3.select(this.parentNode).datum().region[ii - 1].new_deaths;\n      }\n    }\n\n    let y = 0;\n    if (options.timeline_type === 'cumulative') y = 140 - yScaleDeaths(d.cumulative_deaths) - yScaleDeaths(dp) + 170;\n    if (options.timeline_type === 'non-cumulative') y = 140 - yScaleDeaths(d.new_deaths) - yScaleDeaths(dp) + 170;\n    if (options.timeline_type === 'stacked') y = 140 - 140 * (d.new_deaths / totalNewDeaths) - 140 * (dp / totalNewDeaths) + 170;\n\n    if (y) {\n      return y;\n    } else {\n      return 0;\n    }\n\n    ;\n  }).attr('width', barWidth - barWidth * barSpacing * 2).attr('height', function (d, i) {\n    const totalNewDeaths = d3.select(this.parentNode).datum().total_new_deaths - d3.select(this.parentNode).datum().OTH.new_deaths;\n    let y = 0;\n    if (options.timeline_type === 'cumulative') y = yScaleDeaths(d.cumulative_deaths);\n    if (options.timeline_type === 'non-cumulative') y = yScaleDeaths(d.new_deaths);\n    if (options.timeline_type === 'stacked') y = 140 * (d.new_deaths / totalNewDeaths);\n\n    if (y) {\n      return y;\n    } else {\n      return 0;\n    }\n\n    ;\n  }).attr('fill', function (d, i) {\n    return colors.regions[d.region];\n  }); // bar size tweak for spacing\n\n  if (options.timeline_frequency === 'month') {\n    barGroups.selectAll(\".timeBar\").attr(\"width\", function (d) {\n      var date = d3.select(this.parentNode).datum().date;\n      var next = d3.timeMonth.offset(date, 1);\n      return (xScale(next) - xScale(date)) * (1 - barSpacing);\n    }).attr(\"x\", function (d) {\n      var date = d3.select(this.parentNode).datum().date;\n      var next = d3.timeMonth.offset(date, 1);\n      return (xScale(next) - xScale(date)) * (barSpacing / 2);\n    });\n  } // VACCINES\n\n\n  const vbarGroups = svg.selectAll('.vbar_group').data(vgroupedData).enter().append('g').attr('class', 'vbar_group').attr('data-date', function (d) {\n    return d.date;\n  }).attr('transform', function (d, i) {\n    return 'translate(' + xScale(d.date) + ', 344)';\n  });\n  vbarGroups.selectAll('.vaccines_bar').data(function (d, i) {\n    return d.region.filter(function (dd, ii) {\n      return dd.region !== 'OTH';\n    });\n  }).enter().append('rect').attr('class', 'timeBar vaccines_bar').attr('x', barWidth * barSpacing).attr('y', function (d, i) {\n    const totalNewVaccines = d3.select(this.parentNode).datum().total_new_vaccines - d3.select(this.parentNode).datum().OTH.new_vaccines;\n    let dp = 0;\n\n    if (i > 0) {\n      for (let ii = 1; ii <= i; ii++) {\n        if (options.timeline_type === 'cumulative') dp += d3.select(this.parentNode).datum().region[ii - 1].cumulative_vaccines;\n        if (options.timeline_type === 'non-cumulative') dp += d3.select(this.parentNode).datum().region[ii - 1].new_vaccines;\n        if (options.timeline_type === 'stacked') dp += d3.select(this.parentNode).datum().region[ii - 1].new_vaccines;\n      }\n    }\n\n    let y = 0;\n    if (options.timeline_type === 'cumulative') y = 140 - yScaleVaccines(d.cumulative_vaccines) - yScaleVaccines(dp);\n    if (options.timeline_type === 'non-cumulative') y = 140 - yScaleVaccines(d.new_vaccines) - yScaleVaccines(dp);\n    if (options.timeline_type === 'stacked') y = 140 - 140 * (d.new_vaccines / totalNewVaccines) - 140 * (dp / totalNewVaccines);\n\n    if (y) {\n      return y;\n    } else {\n      return 0;\n    }\n\n    ;\n  }).attr('width', barWidth - barWidth * barSpacing * 2).attr('height', function (d, i) {\n    const totalNewVaccines = d3.select(this.parentNode).datum().total_new_vaccines - d3.select(this.parentNode).datum().OTH.new_vaccines;\n    let y = 0;\n    if (options.timeline_type === 'cumulative') y = yScaleVaccines(d.cumulative_vaccines);\n    if (options.timeline_type === 'non-cumulative') y = yScaleVaccines(d.new_vaccines);\n    if (options.timeline_type === 'stacked') y = 140 * (d.new_vaccines / totalNewVaccines);\n\n    if (y) {\n      return y;\n    } else {\n      return 0;\n    }\n\n    ;\n  }).attr('fill', function (d, i) {\n    return colors.regions[d.region];\n  });\n\n  if (options.timeline_frequency === 'month') {\n    vbarGroups.selectAll(\".timeBar\").attr(\"width\", function (d) {\n      var date = d3.select(this.parentNode).datum().date;\n      var next = d3.timeMonth.offset(date, 1);\n      return (xScale(next) - xScale(date)) * (1 - barSpacing);\n    }).attr(\"x\", function (d) {\n      var date = d3.select(this.parentNode).datum().date;\n      var next = d3.timeMonth.offset(date, 1);\n      return (xScale(next) - xScale(date)) * (barSpacing / 2);\n    });\n  } // bar size tweak for spacing\n\n\n  if (options.timeline_frequency === 'month') {\n    barGroups.selectAll(\".timeBar\").attr(\"width\", function (d) {\n      var date = d3.select(this.parentNode).datum().date;\n      var next = d3.timeMonth.offset(date, 1);\n      return (xScale(next) - xScale(date)) * (1 - barSpacing);\n    }).attr(\"x\", function (d) {\n      var date = d3.select(this.parentNode).datum().date;\n      var next = d3.timeMonth.offset(date, 1);\n      return (xScale(next) - xScale(date)) * (barSpacing / 2);\n    });\n  } // 10\n  // 0.1\n  // 1 - 8 - 1\n  // draw x-axis\n  // draw y-axis\n\n}\nexport function updateTimechart(data) {\n  console.log('update timechart');\n}\nexport default drawTimechart;","map":{"version":3,"sources":["/Users/matthewsmawfield/www/ifrc-covid-dataviz/src/Timechart.js"],"names":["d3","moment","colors","nFormatter","yScaleCases","yScaleDeaths","yScaleVaccines","yAxisCases","yAxisDeaths","yAxisVaccines","yScaleCasesAxis","yScaleDeathsAxis","yScaleVaccinesAxis","drawTimechart","data","options","regions","groupedData","who_data","forEach","d","i","timeline_frequency","date","startOf","toDate","ifrc_region","new_cases","new_deaths","cumulative_cases","cumulative_deaths","dd","ii","total_new_cases","AF","AP","AM","EU","ME","OTH","total_cumulative_cases","total_new_deaths","total_cumulative_deaths","region","push","vgroupedData","timeline_type","console","log","vaccines_data","vaccines_data_daily","new_vaccines","daily_vaccinations","cumulative_vaccines","total_new_vaccines","vaccines_data_cumulative","endOfWeekDate","endOf","unix","maxDate","endOfMonthDate","total_vaccinations","total_cumulative_vaccines","filter","el","numIntervals","max","maxCases","maxDeaths","maxVaccines","minDate","md","add","svg","select","selectAll","remove","width","barWidth","barSpacing","xScale","scaleTime","range","domain","scaleLinear","axisRight","scale","ticks","tickSize","tickPadding","tickFormat","yAxisCasesText","append","attr","call","yAxisDeathsText","yAxisVaccinesText","barGroups","enter","totalNewCases","parentNode","datum","dp","y","totalNewDeaths","next","timeMonth","offset","vbarGroups","totalNewVaccines","updateTimechart"],"mappings":"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","sourcesContent":["import * as d3 from \"d3\";\nimport moment from 'moment';\nimport colors from './colors';\nimport {nFormatter} from './HelperFunctions';\n\nlet yScaleCases;\nlet yScaleDeaths;\nlet yScaleVaccines;\nlet yAxisCases;\nlet yAxisDeaths;\nlet yAxisVaccines;\nlet yScaleCasesAxis;\nlet yScaleDeathsAxis;\nlet yScaleVaccinesAxis;\n\nexport function drawTimechart(data, options) {\n\n    const regions = ['AF', 'ME', 'AP', 'EU', 'AM', 'OTH'];\n\n    const groupedData = [];\n\n    data.who_data.forEach(function(d,i){\n        if(!groupedData[d[options.timeline_frequency+'Total']])groupedData[d[options.timeline_frequency+'Total']] = {};\n        if(options.timeline_frequency==='day') groupedData[d[options.timeline_frequency+'Total']].date = d.date;\n        if(options.timeline_frequency==='week') groupedData[d[options.timeline_frequency+'Total']].date = moment(d.date).startOf('isoWeek').toDate();\n        if(options.timeline_frequency==='month') groupedData[d[options.timeline_frequency+'Total']].date = moment(d.date).startOf('month').toDate();\n        if(!groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region]) groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region] = {new_cases: 0, new_deaths: 0, cumulative_cases: 0, cumulative_deaths: 0};\n        groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].new_cases += d.new_cases;\n        groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].new_deaths += d.new_deaths;\n        groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].cumulative_cases = 0;\n    });\n\n    // totals by date\n    groupedData.forEach(function(d,i){\n        regions.forEach(function(dd,ii){\n            // if(dd!=='OTH') d.region.push({'region': dd, 'new_cases': d[dd].new_cases, 'new_deaths': d[dd].new_deaths, 'cumulative_cases': d[dd].cumulative_cases, 'cumulative_deaths': d[dd].cumulative_deaths});\n            if(i>0){\n                d[dd].cumulative_cases = groupedData[i][dd].new_cases + groupedData[i-1][dd].cumulative_cases;\n                d[dd].cumulative_deaths = groupedData[i][dd].new_deaths + groupedData[i-1][dd].cumulative_deaths;\n            } else {\n                d[dd].cumulative_cases = groupedData[i][dd].new_cases;\n                d[dd].cumulative_deaths = groupedData[i][dd].new_deaths;\n            }\n        })\n\n        d.total_new_cases = d.AF.new_cases + d.AP.new_cases + d.AM.new_cases + d.EU.new_cases + d.ME.new_cases + d.OTH.new_cases; \n        d.total_cumulative_cases = d.AF.cumulative_cases + d.AP.cumulative_cases + d.AM.cumulative_cases + d.EU.cumulative_cases + d.ME.cumulative_cases + d.OTH.cumulative_cases; \n        d.total_new_deaths = d.AF.new_deaths + d.AP.new_deaths + d.AM.new_deaths + d.EU.new_deaths + d.ME.new_deaths + d.OTH.new_deaths; \n        d.total_cumulative_deaths = d.AF.cumulative_deaths + d.AP.cumulative_deaths + d.AM.cumulative_deaths + d.EU.cumulative_deaths + d.ME.cumulative_deaths + d.OTH.cumulative_deaths; \n        d.region = [];\n\n        regions.forEach(function(dd,ii){\n            d.region.push({'region': dd, 'new_cases': d[dd].new_cases, 'new_deaths': d[dd].new_deaths, 'cumulative_cases': d[dd].cumulative_cases, 'cumulative_deaths': d[dd].cumulative_deaths});\n        })\n\n    });\n\n    let vgroupedData = [];\n\n    if(options.timeline_type!='cumulative'){ // cumulative and stacked\n        console.log('thisiQWERQ');\n        data.vaccines_data = data.vaccines_data_daily;\n        data.vaccines_data.forEach(function(d,i){\n            if(!vgroupedData[d[options.timeline_frequency+'Total']])vgroupedData[d[options.timeline_frequency+'Total']] = {};\n            if(options.timeline_frequency==='day') vgroupedData[d[options.timeline_frequency+'Total']].date = d.date;\n            if(options.timeline_frequency==='week') vgroupedData[d[options.timeline_frequency+'Total']].date = moment(d.date).startOf('isoWeek').toDate();\n            if(options.timeline_frequency==='month') vgroupedData[d[options.timeline_frequency+'Total']].date = moment(d.date).startOf('month').toDate();\n            if(!vgroupedData[d[options.timeline_frequency+'Total']][d.ifrc_region]) vgroupedData[d[options.timeline_frequency+'Total']][d.ifrc_region] = {new_vaccines: 0};\n            vgroupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].new_vaccines += d.daily_vaccinations;\n        });\n        // totals by date\n        vgroupedData.forEach(function(d,i){\n            regions.forEach(function(dd,ii){\n                if(!d[dd]){\n                    d[dd] = {new_vaccines: 0, cumulative_vaccines: 0}\n                }\n            });\n            d.total_new_vaccines = d.AF.new_vaccines + d.AP.new_vaccines + d.AM.new_vaccines + d.EU.new_vaccines + d.ME.new_vaccines + d.OTH.new_vaccines; \n            d.region = [];\n            regions.forEach(function(dd,ii){\n                d.region.push({'region': dd, 'new_vaccines': d[dd].new_vaccines});\n            })\n        });\n\n    } else{ // cumulative only\n        data.vaccines_data = [];\n        if(options.timeline_frequency==='day') {\n            data.vaccines_data = data.vaccines_data_cumulative;\n        }\n        if(options.timeline_frequency==='week') {\n            data.vaccines_data_cumulative.forEach(function(d,i){\n                var endOfWeekDate = moment(d.date).endOf('isoWeek').startOf('day').unix();\n                var date = moment(d.date).startOf('day').unix();\n                if((date==endOfWeekDate)||(d.date==options.maxDate)){\n                    data.vaccines_data.push(d);\n                }\n            })\n        }\n        if(options.timeline_frequency==='month') {\n            data.vaccines_data_cumulative.forEach(function(d,i){\n                var endOfMonthDate = moment(d.date).endOf('month').startOf('day').unix();\n                var date = moment(d.date).startOf('day').unix();\n                if((date==endOfMonthDate)||(d.date==options.maxDate)){\n                    data.vaccines_data.push(d);\n                }\n            })\n        }\n        console.log('qwerqwerqew')\n        console.log( data.vaccines_data );\n\n        data.vaccines_data.forEach(function(d,i){\n            if(!vgroupedData[d[options.timeline_frequency+'Total']])vgroupedData[d[options.timeline_frequency+'Total']] = {};\n            if(options.timeline_frequency==='day') vgroupedData[d[options.timeline_frequency+'Total']].date = d.date;\n            if(options.timeline_frequency==='week') vgroupedData[d[options.timeline_frequency+'Total']].date = moment(d.date).startOf('isoWeek').toDate();\n            if(options.timeline_frequency==='month') vgroupedData[d[options.timeline_frequency+'Total']].date = moment(d.date).startOf('month').toDate();\n            if(!vgroupedData[d[options.timeline_frequency+'Total']][d.ifrc_region]) vgroupedData[d[options.timeline_frequency+'Total']][d.ifrc_region] = {cumulative_vaccines: 0};\n            vgroupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].cumulative_vaccines += d.total_vaccinations;\n        });\n        // totals by date\n        vgroupedData.forEach(function(d,i){\n            regions.forEach(function(dd,ii){\n                if(!d[dd]){\n                    d[dd] = {cumulative_vaccines: 0}\n                }\n            });\n            d.total_cumulative_vaccines = d.AF.cumulative_vaccines + d.AP.cumulative_vaccines + d.AM.cumulative_vaccines + d.EU.cumulative_vaccines + d.ME.cumulative_vaccines + d.OTH.cumulative_vaccines; \n            d.region = [];\n            regions.forEach(function(dd,ii){\n                d.region.push({'region': dd, 'cumulative_vaccines': d[dd].cumulative_vaccines});\n            })\n        });\n    }\n\n    vgroupedData = vgroupedData.filter(function(el) { return el; });\n\n    console.log('vgroupedData');\n    console.log(vgroupedData);\n\n    const numIntervals = d3.max(data.who_data, function(d,i){\n        return d[options.timeline_frequency+'Total'];\n    });\n\n    const maxCases = d3.max(groupedData, function(d,i){\n        if(options.timeline_type==='non-cumulative') return d.total_new_cases;\n        if(options.timeline_type==='cumulative') return d.total_cumulative_cases;\n        if(options.timeline_type==='stacked') return 100;\n    })\n\n    const maxDeaths = d3.max(groupedData, function(d,i){\n        if(options.timeline_type==='non-cumulative') return d.total_new_deaths;\n        if(options.timeline_type==='cumulative') return d.total_cumulative_deaths;\n        if(options.timeline_type==='stacked') return 100;\n    })\n\n    const maxVaccines = d3.max(vgroupedData, function(d,i){\n        if(d){\n            if(options.timeline_type==='non-cumulative') return d.total_new_vaccines;\n            if(options.timeline_type==='cumulative') return d.total_cumulative_vaccines;\n            if(options.timeline_type==='stacked') return 100;\n        }\n    })\n\n    // define date range\n    // const minDate = groupedData[0].date;\n    // const maxDate = groupedData[numIntervals].date;\n    const minDate = groupedData[0].date;\n    const maxDate = options.maxDate;\n    let md = moment(maxDate);\n\n    if(options.timeline_frequency==='month') md = md.add(1, 'months');\n    if(options.timeline_frequency==='week') md = md.add(1, 'weeks');\n    if(options.timeline_frequency==='day') md = md.add(1, 'days');\n\n    const svg = d3.select('#timechart_svg');\n    svg.selectAll('g').remove();\n    d3.selectAll('#layout .yAxis').remove();\n\n    const width = 2000;\n    const barWidth = width/numIntervals;\n\n    let barSpacing = 0.04; \n    if(options.timeline_frequency==='month') barSpacing = 0.03;\n    if(options.timeline_frequency==='day') barSpacing = 0;\n\n    // define scales\n\n    const xScale = d3.scaleTime()\n    .range([0,width])\n    .domain([minDate,md]);\n\n    yScaleCases = d3.scaleLinear()\n    .range([0,140])\n    .domain([0,maxCases]);\n\n    yScaleCasesAxis = d3.scaleLinear()\n    .range([140,0])\n    .domain([0,maxCases]);\n\n    yScaleDeaths = d3.scaleLinear()\n    .range([0,140])\n    .domain([0,maxDeaths]);\n\n    yScaleDeathsAxis = d3.scaleLinear()\n    .range([140,0])\n    .domain([0,maxDeaths]);\n\n    yScaleVaccines = d3.scaleLinear()\n    .range([0,140])\n    .domain([0,maxVaccines]);\n\n    yScaleVaccinesAxis = d3.scaleLinear()\n    .range([140,0])\n    .domain([0,maxVaccines]);\n\n    // define axi\n    \n    yAxisCases = d3.axisRight()\n    .scale(yScaleCasesAxis)\n    .ticks(3)\n    .tickSize(3)\n    .tickPadding(3)\n    .tickFormat(function(d){\n        if(options.timeline_type=='stacked') return nFormatter(d)+'%';\n        return nFormatter(d);\n    })\n\n    yAxisDeaths = d3.axisRight()\n    .scale(yScaleDeathsAxis)\n    .ticks(3)\n    .tickSize(3)\n    .tickPadding(3)\n    .tickFormat(function(d){\n        if(options.timeline_type=='stacked') return nFormatter(d)+'%';\n        return nFormatter(d);\n    })\n\n    yAxisVaccines = d3.axisRight()\n    .scale(yScaleVaccinesAxis)\n    .ticks(2)\n    .tickSize(3)\n    .tickPadding(3)\n    .tickFormat(function(d){\n        if(options.timeline_type=='stacked') return nFormatter(d)+'%';\n        return nFormatter(d);\n    })\n\n    // y-axis cases\n    var yAxisCasesText = d3.select('#layout').append(\"g\")\n    .attr(\"class\", \"yAxis axis\")\n    .attr(\"id\", \"casesAxis\")\n    .attr('transform', 'translate(620,363)')\n    .call(yAxisCases);\n\n    // y-axis deaths\n    var yAxisDeathsText = d3.select('#layout').append(\"g\")\n    .attr(\"class\", \"yAxis axis\")\n    .attr(\"id\", \"deathsAxis\")\n    .attr('transform', 'translate(620,534)')\n    .call(yAxisDeaths);\n\n    // y-axis vaccines\n    var yAxisVaccinesText = d3.select('#layout').append(\"g\")\n    .attr(\"class\", \"yAxis axis\")\n    .attr(\"id\", \"VaccinesAxis\")\n    .attr('transform', 'translate(620,707.5)')\n    .call(yAxisVaccines);\n\n    // CASES\n    // loop through groupedData and draw bars\n    const barGroups = svg.selectAll('.bar_group')\n    .data(groupedData)\n    .enter()\n    .append('g')\n    .attr('data-date', function(d){ return d.date})\n    .attr('transform', function(d,i){ \n        return 'translate('+xScale(d.date)+')'\n    })\n\n    // CASES\n    barGroups.selectAll('.cases_bar')\n    .data(function(d,i){ return d.region.filter(function(dd,ii){\n        return dd.region!=='OTH';\n    })})\n    .enter()\n    .append('rect')\n    .attr('class', 'timeBar cases_bar')\n    .attr('x', (barWidth*barSpacing))\n    .attr('y', function(d,i){\n        const totalNewCases = d3.select(this.parentNode).datum().total_new_cases - d3.select(this.parentNode).datum().OTH.new_cases;\n        let dp = 0;\n        if(i>0){\n            for(let ii=1;ii<=i;ii++){\n                if(options.timeline_type==='cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].cumulative_cases;\n                if(options.timeline_type==='non-cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].new_cases;\n                if(options.timeline_type==='stacked') dp += d3.select(this.parentNode).datum().region[ii-1].new_cases;\n            }\n        }\n        let y = 0;\n        if(options.timeline_type==='cumulative') y = (140-yScaleCases(d.cumulative_cases)-(yScaleCases(dp)))\n        if(options.timeline_type==='non-cumulative') y = (140-yScaleCases(d.new_cases)-(yScaleCases(dp)))\n        if(options.timeline_type==='stacked') y = (140-(140*(d.new_cases/totalNewCases))-((140*(dp/totalNewCases))))\n        if(y){ return y; } else { return 0};\n    })\n    .attr('width', barWidth-(barWidth*barSpacing*2))\n    .attr('height', function(d,i){\n        const totalNewCases = d3.select(this.parentNode).datum().total_new_cases - d3.select(this.parentNode).datum().OTH.new_cases;\n        let y = 0;\n        if(options.timeline_type==='cumulative') y = yScaleCases(d.cumulative_cases);\n        if(options.timeline_type==='non-cumulative') y = yScaleCases(d.new_cases);\n        if(options.timeline_type==='stacked') y = (140*(d.new_cases/totalNewCases));\n        if(y){ return y; } else { return 0};\n    })\n    .attr('fill', function(d,i){\n        return colors.regions[d.region];\n    })\n\n    // DEATHS\n    barGroups.selectAll('.deaths_bar')\n    .data(function(d,i){ return d.region.filter(function(dd,ii){\n        return dd.region!=='OTH';\n    })})\n    .enter()\n    .append('rect')\n    .attr('class', 'timeBar deaths_bar')\n    .attr('x', (barWidth*barSpacing))\n    .attr('y', function(d,i){\n        const totalNewDeaths = d3.select(this.parentNode).datum().total_new_deaths - d3.select(this.parentNode).datum().OTH.new_deaths;\n        let dp = 0;\n        if(i>0){\n            for(let ii=1;ii<=i;ii++){\n                if(options.timeline_type==='cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].cumulative_deaths;\n                if(options.timeline_type==='non-cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].new_deaths;\n                if(options.timeline_type==='stacked') dp += d3.select(this.parentNode).datum().region[ii-1].new_deaths;\n            }\n        }\n        let y = 0;\n        if(options.timeline_type==='cumulative') y = (140-yScaleDeaths(d.cumulative_deaths)-(yScaleDeaths(dp))+170)\n        if(options.timeline_type==='non-cumulative') y = (140-yScaleDeaths(d.new_deaths)-(yScaleDeaths(dp))+170)\n        if(options.timeline_type==='stacked') y = (140-(140*(d.new_deaths/totalNewDeaths))-((140*(dp/totalNewDeaths)))+170)\n        if(y){ return y; } else { return 0};\n    })\n    .attr('width', barWidth-(barWidth*barSpacing*2))\n    .attr('height', function(d,i){\n        const totalNewDeaths = d3.select(this.parentNode).datum().total_new_deaths - d3.select(this.parentNode).datum().OTH.new_deaths;\n        let y = 0;\n        if(options.timeline_type==='cumulative') y = yScaleDeaths(d.cumulative_deaths);\n        if(options.timeline_type==='non-cumulative') y = yScaleDeaths(d.new_deaths);\n        if(options.timeline_type==='stacked') y = (140*(d.new_deaths/totalNewDeaths));\n        if(y){ return y; } else { return 0};\n    })\n    .attr('fill', function(d,i){\n        return colors.regions[d.region];\n    });\n\n    // bar size tweak for spacing\n    if(options.timeline_frequency==='month'){\n        barGroups.selectAll(\".timeBar\")\n        .attr(\"width\", function(d) {\n            var date = d3.select(this.parentNode).datum().date;\n            var next = d3.timeMonth.offset(date, 1);\n            return (xScale(next)- xScale(date))*(1-barSpacing);\n            })\n        .attr(\"x\", function(d) {\n            var date = d3.select(this.parentNode).datum().date;\n            var next = d3.timeMonth.offset(date, 1);\n            return (xScale(next)- xScale(date))*(barSpacing/2);\n            })\n        }\n\n    // VACCINES\n\n    const vbarGroups = svg.selectAll('.vbar_group')\n    .data(vgroupedData)\n    .enter()\n    .append('g')\n    .attr('class', 'vbar_group')\n    .attr('data-date', function(d){ return d.date})\n    .attr('transform', function(d,i){ \n        return 'translate('+xScale(d.date)+', 344)'\n    })\n\n    vbarGroups.selectAll('.vaccines_bar')\n    .data(function(d,i){ return d.region.filter(function(dd,ii){\n        return dd.region!=='OTH';\n    })})\n    .enter()\n    .append('rect')\n    .attr('class', 'timeBar vaccines_bar')\n    .attr('x', (barWidth*barSpacing))\n    .attr('y', function(d,i){\n        const totalNewVaccines = d3.select(this.parentNode).datum().total_new_vaccines - d3.select(this.parentNode).datum().OTH.new_vaccines;\n        let dp = 0;\n        if(i>0){\n            for(let ii=1;ii<=i;ii++){\n                if(options.timeline_type==='cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].cumulative_vaccines;\n                if(options.timeline_type==='non-cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].new_vaccines;\n                if(options.timeline_type==='stacked') dp += d3.select(this.parentNode).datum().region[ii-1].new_vaccines;\n            }\n        }\n        let y = 0;\n        if(options.timeline_type==='cumulative') y = (140-yScaleVaccines(d.cumulative_vaccines)-(yScaleVaccines(dp)))\n        if(options.timeline_type==='non-cumulative') y = (140-yScaleVaccines(d.new_vaccines)-(yScaleVaccines(dp)))\n        if(options.timeline_type==='stacked') y = (140-(140*(d.new_vaccines/totalNewVaccines))-((140*(dp/totalNewVaccines))))\n        if(y){ return y; } else { return 0};\n    })\n    .attr('width', barWidth-(barWidth*barSpacing*2))\n    .attr('height', function(d,i){\n        const totalNewVaccines = d3.select(this.parentNode).datum().total_new_vaccines - d3.select(this.parentNode).datum().OTH.new_vaccines;\n        let y = 0;\n        if(options.timeline_type==='cumulative') y = yScaleVaccines(d.cumulative_vaccines);\n        if(options.timeline_type==='non-cumulative') y = yScaleVaccines(d.new_vaccines);\n        if(options.timeline_type==='stacked') y = (140*(d.new_vaccines/totalNewVaccines));\n        if(y){ return y; } else { return 0};\n    })\n    .attr('fill', function(d,i){\n        return colors.regions[d.region];\n    });\n\n    if(options.timeline_frequency==='month'){\n    vbarGroups.selectAll(\".timeBar\")\n    .attr(\"width\", function(d) {\n        var date = d3.select(this.parentNode).datum().date;\n        var next = d3.timeMonth.offset(date, 1);\n        return (xScale(next)- xScale(date))*(1-barSpacing);\n        })\n    .attr(\"x\", function(d) {\n        var date = d3.select(this.parentNode).datum().date;\n        var next = d3.timeMonth.offset(date, 1);\n        return (xScale(next)- xScale(date))*(barSpacing/2);\n        })\n    }\n\n    // bar size tweak for spacing\n    if(options.timeline_frequency==='month'){\n        barGroups.selectAll(\".timeBar\")\n        .attr(\"width\", function(d) {\n            var date = d3.select(this.parentNode).datum().date;\n            var next = d3.timeMonth.offset(date, 1);\n            return (xScale(next)- xScale(date))*(1-barSpacing);\n          })\n        .attr(\"x\", function(d) {\n            var date = d3.select(this.parentNode).datum().date;\n            var next = d3.timeMonth.offset(date, 1);\n            return (xScale(next)- xScale(date))*(barSpacing/2);\n          })\n        }\n\n    // 10\n\n    // 0.1\n\n    // 1 - 8 - 1\n    \n    // draw x-axis\n\n\n    // draw y-axis\n\n}\n\nexport function updateTimechart(data) {\n\n    console.log('update timechart');\n\n}\n\nexport default drawTimechart;\n"]},"metadata":{},"sourceType":"module"}