{"ast":null,"code":"import { min, max, group, flatGroup } from \"d3\";\nimport moment from 'moment';\nimport clone from 'just-clone';\nimport { data } from \"jquery\";\nexport function ParseData2(data, options) {\n  //*********************\n  // create regions\n  //*********************\n  data.regions = [{\n    'code': 'AF',\n    'population': 0\n  }, {\n    'code': 'ME',\n    'population': 0\n  }, {\n    'code': 'AP',\n    'population': 0\n  }, {\n    'code': 'EU',\n    'population': 0\n  }, {\n    'code': 'AM',\n    'population': 0\n  }, {\n    'code': 'OTH',\n    'population': 0\n  }]; //*********************\n  // clean up country data\n  //*********************\n\n  data.country = data.equity_data;\n  data.country.forEach(function (d, i) {\n    // if not an IFRC region then set to OTH\n    if (d.ifrc_region != 'AF' && d.ifrc_region != 'ME' && d.ifrc_region != 'AP' && d.ifrc_region != 'EU' && d.ifrc_region != 'AM') {\n      d.ifrc_region = 'OTH';\n    } // parse country population\n\n\n    d.population = parseInt(d.population);\n    var pop = 0;\n    if (d.population > 0) pop = d.population; // sum up ifrc region population \n\n    data.regions.forEach(function (dd, ii) {\n      if (dd.code == d.ifrc_region) {\n        dd.population += pop;\n      }\n    }); // get WHO vaccine data (vaccine types used, vaccines_per_100\n\n    d.vaccines_used = [];\n    d.avg_tests_per_1000 = parseFloat(d.avg_tests_per_1000) || 0;\n    d.number_vaccine_types_used = 0;\n    d.vaccines_per_100 = 0;\n    d.number_vaccine_types_used = parseInt(d.avg_tests_per_1000);\n    data.vaccines_who_data.forEach(function (dd, ii) {\n      if (d.country_iso3 == dd.ISO3) {\n        d.data_updated = moment(dd.DATE_UPDATED).startOf('day').toDate();\n        d.number_vaccine_types_used = parseInt(dd.NUMBER_VACCINES_TYPES_USED);\n        d.vaccines_per_100 = parseFloat(dd.TOTAL_VACCINATIONS_PER100);\n        if (isNaN(d.vaccines_per_100)) d.vaccines_per_100 = 0;\n        d.vaccines_used = dd.VACCINES_USED.split(',').map(function (item) {\n          return item.trim();\n        });\n      }\n    }); // get ns involvement in activities\n\n    d.ns_involvement = 0;\n    data.self_assessment.forEach(function (dd, ii) {\n      if (d.country_iso3 == dd.ISO3) {\n        if (dd['Final involvement'] == 'Yes') d.ns_involvement = 1;\n      }\n    }); // get vaccine acceptance\n\n    data.vaccine_acceptance.forEach(function (dd, ii) {\n      if (d.country_iso3 == dd.iso3) {\n        // if(dd['Final involvement']=='Yes') d.ns_involvement = 1;\n        d.country_code = d.country_iso2;\n        d.vaccine_acceptance_percent = parseFloat(dd.indicator_value) * 100;\n        d.vaccine_acceptance_population = parseInt(dd.population_size);\n      }\n    }); // get contrat tracing\n\n    if (d.contract_tracing.toLowerCase() == 'all' || d.contract_tracing.toLowerCase() == 'some') {\n      d.contract_tracing = 1;\n    } else {\n      d.contract_tracing = 0;\n    } // parse equity data inform/hdi indexes\n\n\n    if (d.hdi_category.match(/very high/i)) {\n      d.hdi_category = 'very-high';\n    } else if (d.hdi_category.match(/high/i)) {\n      d.hdi_category = 'high';\n    } else if (d.hdi_category.match(/medium/i)) {\n      d.hdi_category = 'medium';\n    } else if (d.hdi_category.match(/low/i)) {\n      d.hdi_category = 'low';\n    }\n\n    if (d.inform_severity.match(/very high/i)) {\n      d.inform_severity = 'very-high';\n    } else if (d.inform_severity.match(/high/i)) {\n      d.inform_severity = 'high';\n    } else if (d.inform_severity.match(/medium/i)) {\n      d.inform_severity = 'medium';\n    } else if (d.inform_severity.match(/low/i)) {\n      d.inform_severity = 'low';\n    } else if (d.inform_severity.match(/no/i)) {\n      d.inform_severity = 'no-score';\n    }\n  }); //*********************\n  // get min/max dates\n  //*********************\n  // get min and max dates from daily who data\n\n  let maxDate = moment(new Date(max(data.who_data, function (d) {\n    return d.Date_reported;\n  }))).startOf('day'); // override min date to week start\n\n  data.min_date = moment('2019-12-31').startOf('day').toDate();\n  let maxDateVaccines = moment(new Date(max(data.vaccines_data, function (d) {\n    return d.date;\n  }))).startOf('day');\n  data.min_vaccine_date = moment(new Date(min(data.vaccines_data, function (d) {\n    return d.date;\n  }))).startOf('day').toDate();\n\n  if (maxDateVaccines.unix() > maxDate.unix()) {\n    maxDate = maxDateVaccines;\n  }\n\n  data.max_date = maxDate.toDate(); //*********************\n  // parse who data\n  //*********************\n\n  data.who_data.sort(function (a, b) {\n    return new Date(a.Date_reported) - new Date(b.Date_reported);\n  }); // set count for incremental day/week/month numbers\n\n  let dayTotal = -1;\n  let dayCheck = 0;\n  let weekTotal = -1;\n  let weekCheck = -1;\n  let monthTotal = 0;\n  let monthCheck = 0; // parse and clean up WHO data\n\n  let whoCountryCodes = [];\n  data.who_data.forEach(function (d, i) {\n    // parse dates\n    d.date = moment(d.Date_reported).startOf('day').toDate();\n    d.dayOfYear = moment(d.date).dayOfYear();\n    d.week = moment(d.date).isoWeek();\n    if (d.week !== weekCheck) weekTotal++;\n    d.weekTotal = weekTotal;\n    d.month = d.date.getMonth();\n    if (d.month !== monthCheck) monthTotal++;\n    d.monthTotal = monthTotal;\n    d.year = d.date.getFullYear();\n    d.week_start = new Date(moment(d.date).startOf('isoWeek').startOf('day').toDate());\n    d.month_start = new Date(moment(d.date).startOf('month').startOf('day').toDate()); // parse cases and deaths\n\n    d.cumulative_deaths = parseInt(d.Cumulative_deaths);\n    d.cumulative_cases = parseInt(d.Cumulative_cases);\n    d.new_cases = parseInt(d.New_cases);\n    d.new_deaths = parseInt(d.New_deaths); // set negative values to zero for new cases/deaths\n\n    if (d.new_deaths < 0) d.new_deaths = 0;\n    if (d.new_cases < 0) d.new_cases = 0; // override country name and code\n\n    d.country_code = d.Country_code;\n    d.country_name = null;\n    data.country.forEach(function (dd, ii) {\n      if (dd.country_iso2 === d.Country_code) {\n        d.ifrc_region = dd.ifrc_region;\n        d.country_name = dd.country_name;\n      }\n    });\n    if (d.ifrc_region == undefined) d.ifrc_region = 'OTH'; // add country code to array so we know it is used\n\n    if (!whoCountryCodes.includes(d.country_code)) {\n      whoCountryCodes.push(d.country_code);\n    } // delete old unused keys\n\n\n    delete d.Date_reported;\n    delete d.Country;\n    delete d.New_cases;\n    delete d.New_deaths;\n    delete d.Country_code;\n    delete d.Cumulative_deaths;\n    delete d.Cumulative_cases;\n    delete d.Country_code;\n    delete d.WHO_region;\n    delete d.Country; // set incremental count\n\n    dayCheck = d.dayOfYear;\n    weekCheck = d.week;\n    monthCheck = d.month;\n  }); //*********************\n  // add most recent who data record to data.country\n  //*********************\n  // group who data by country\n\n  var whoDataByCountry = flatGroup(data.who_data, d => d.country_code);\n  data.country.forEach(function (d, i) {\n    whoDataByCountry.forEach(function (dd, ii) {\n      if (dd[0] == d.country_code) {\n        d.who_daily_latest = dd[1][dd[1].length - 1];\n      }\n    });\n  }); //*********************\n  // parse vaccine cumulative data\n  //*********************\n  // clean up values\n\n  data.vaccines_data.forEach(function (d, i) {\n    d.date = moment(d.date).startOf('day').toDate();\n  });\n  data.vaccines_data.sort(function (a, b) {\n    return new Date(a.date) - new Date(b.date);\n  }); // reset count for incremental day/week/month numbers\n\n  dayTotal = -1;\n  dayCheck = 0;\n  weekTotal = -1;\n  weekCheck = -1;\n  monthTotal = 0;\n  monthCheck = 0; // filter out vaccine data to only include records with ISO3 country codes\n\n  data.vaccines_data = data.vaccines_data.filter(function (d, i) {\n    return d.iso_code.length === 3 && d.total_vaccinations > 0;\n  });\n  var whoDataByCountry = flatGroup(data.vaccines_data, d => d.iso_code); // fill out missing vaccinations date records (extend cumulative from last data date)\n\n  var newDays = [];\n  var hasDays = [];\n  var lastRecord = {};\n  var vDataFlat = [];\n  whoDataByCountry.forEach(function (d, i) {\n    var minDt = new Date(data.min_date);\n    var maxDt = new Date(data.max_date);\n    hasDays = [];\n    newDays = []; // reset country name and code using country table\n\n    data.country.forEach(function (dd, ii) {\n      if (dd.country_iso3 === d[0]) {\n        d.ifrc_region = dd.ifrc_region;\n        d.country_name = dd.country_name;\n        d.country_code = dd.country_iso2;\n      }\n    }); // set the last recorded date fo this country\n\n    d.lastDate = moment(max(d[1], function (d, i) {\n      return d.date;\n    })).startOf('day').toDate(); // loop through all date records for this country and add to hasDays array\n\n    d[1].forEach(function (dd, ii) {\n      hasDays.push(dd.date.getTime());\n    });\n    console.log(d); // fill in missing dates\n\n    d[1].forEach(function (dd, ii) {\n      dd.total_vaccinations = parseInt(dd.total_vaccinations);\n\n      for (var day = data.min_vaccine_date; day <= data.max_date; day.setDate(day.getDate() + 1)) {\n        var newDay = day.getTime();\n        console.log(newDay);\n\n        if (!hasDays.includes(newDay)) {\n          newDays.push({\n            date: day,\n            total_vaccinations: null\n          });\n        }\n      }\n    });\n    if (d.country_code == 'VE') console.log(hasDays);\n    if (d.country_code == 'VE') console.log(newDays);\n    d[1].push(...newDays);\n    d[1].sort(function (a, b) {\n      return new Date(a.date) - new Date(b.date);\n    }); // loop through dates and set cumulative values\n\n    var totalVac = 0;\n    var totalVac100 = 0;\n    var people_vaccinated_per_hundred = 0;\n    var people_fully_vaccinated_per_hundred = 0;\n    d[1].forEach(function (dd, ii) {\n      if (dd.total_vaccinations) {\n        totalVac = dd.total_vaccinations;\n      } else {\n        dd.total_vaccinations = totalVac;\n      }\n\n      if (dd.total_vaccinations_per_hundred) {\n        totalVac100 = dd.total_vaccinations_per_hundred;\n      } else {\n        dd.total_vaccinations_per_hundred = totalVac100;\n      }\n\n      if (dd.people_vaccinated_per_hundred) {\n        people_vaccinated_per_hundred = dd.people_vaccinated_per_hundred;\n      } else {\n        dd.people_vaccinated_per_hundred = people_vaccinated_per_hundred;\n      }\n\n      if (dd.people_fully_vaccinated_per_hundred) {\n        people_fully_vaccinated_per_hundred = dd.people_fully_vaccinated_per_hundred;\n      } else {\n        dd.people_fully_vaccinated_per_hundred = people_fully_vaccinated_per_hundred;\n      }\n\n      var countryName;\n\n      if (d.country_name == null) {\n        countryName = d[0];\n      } else {\n        countryName = d.country_name;\n      }\n\n      vDataFlat.push({\n        date: new Date(dd.date),\n        lastDate: d.lastDate,\n        total_vaccinations_per_hundred: parseFloat(totalVac100),\n        people_vaccinated_per_hundred: people_vaccinated_per_hundred,\n        people_fully_vaccinated_per_hundred: people_fully_vaccinated_per_hundred,\n        iso_code: d[0],\n        ifrc_region: d.ifrc_region,\n        country_name: countryName,\n        country_code: d.country_code,\n        total_vaccinations: totalVac\n      });\n    });\n  });\n  data.vaccines_data_cumulative = vDataFlat; // data2.vaccines_data_cumulative.sort(function(a,b){\n  //     return new Date(a.date) - new Date(b.date);\n  // });\n  // data2.vaccines_data_cumulative.forEach(function(d,i){\n  //     if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n  //     d.dayOfYear =  moment(d.date).dayOfYear();\n  //     if(d.dayOfYear!==dayCheck) dayTotal++;\n  //     d.dayTotal = dayTotal;\n  //     d.week = moment(d.date).isoWeek();\n  //     if(d.week!==weekCheck) weekTotal++;\n  //     d.weekTotal = weekTotal;\n  //     d.month = d.date.getMonth();\n  //     if(d.month!==monthCheck) monthTotal++;\n  //     d.monthTotal = monthTotal;\n  //     d.year = d.date.getFullYear();\n  //     dayCheck = d.dayOfYear;\n  //     weekCheck = d.week;\n  //     monthCheck = d.month;\n  //     d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n  //     d.month_start = new Date(moment(d.date).startOf('month').toDate());\n  // })\n  // // parse vaccine daily data\n  // dayTotal = -1;\n  // dayCheck = 0;\n  // weekTotal = -1;\n  // weekCheck = -1;\n  // monthTotal = 0;\n  // monthCheck = 0;\n  // // filter out vaccine data on only include records with ISO3 country codes\n  // data2.vaccines_data_daily = data2.vaccines_data.filter(function(d,i){\n  //     return d.iso_code.length===3 && d.daily_vaccinations > 0;\n  // })\n  // // fill out missing vaccinations date records (extend cumulative)\n  // var vGroup = flatGroup(data2.vaccines_data_daily, d => d.iso_code);\n  // var newDates = [];\n  // var hasDays = [];\n  // var initDate = 0;\n  // var lastRecord = {};\n  // var vDataFlat = [];\n  // vGroup.forEach(function(d,i){\n  //     var minDt = new Date(minDateVaccines);\n  //     var maxDt = new Date(maxDateVaccines);\n  //     var hasDays = [];\n  //     var newDays = [];\n  //     var newDays = [];\n  //     data2.equity_data.forEach(function(dd,ii){\n  //         if(dd.country_iso3===d[0]){\n  //             d.ifrc_region = dd.ifrc_region;\n  //             d.country_name = dd.country_name;\n  //             d.country_code = dd.country_iso2;\n  //         }\n  //     })\n  //     d[1].forEach(function(dd,ii){\n  //         hasDays.push(new Date(dd.date).getTime());\n  //     })\n  //     // if((i<1)||(d[0] =='BFA')||(d[0] =='RWA')){\n  //     d[1].forEach(function(dd,ii){\n  //         dd.daily_vaccinations = parseInt(dd.daily_vaccinations);\n  //         for (var day = minDt;day <= maxDt; day.setDate(day.getDate() + 1)) {\n  //             var newDay = day.getTime();\n  //             if(!hasDays.includes(newDay)){\n  //                 newDays.push({date: new Date(day), daily_vaccinations: null})\n  //             }\n  //         }\n  //     });\n  //     d[1].push(...newDays);\n  //     d[1].sort(function(a,b){\n  //         return new Date(a.date) - new Date(b.date);\n  //     });\n  //     var daily_vaccinations = 0;\n  //     d[1].forEach(function(dd,ii){\n  //         if(dd.daily_vaccinations){\n  //             daily_vaccinations = dd.daily_vaccinations;\n  //         } else {\n  //             dd.daily_vaccinations = daily_vaccinations;\n  //         }\n  //         var countryName;\n  //         if(d.country_name==null) { countryName = d[0];\n  //         } else {\n  //             countryName = d.country_name\n  //         }\n  //         vDataFlat.push({\n  //             date: new Date(dd.date),\n  //             iso_code: d[0], \n  //             ifrc_region: d.ifrc_region,\n  //             country_name: countryName,\n  //             country_code: d.country_code, \n  //             daily_vaccinations: daily_vaccinations \n  //         })\n  //     })\n  // });\n  // data.vaccines_data_daily = vDataFlat;\n  // data2.vaccines_data_daily.sort(function(a,b){\n  //     return new Date(a.date) - new Date(b.date);\n  // });\n  // data2.vaccines_data_daily.forEach(function(d,i){\n  //     if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n  //     d.dayOfYear =  moment(d.date).dayOfYear();\n  //     if(d.dayOfYear!==dayCheck) dayTotal++;\n  //     d.dayTotal = dayTotal;\n  //     d.week = moment(d.date).isoWeek();\n  //     if(d.week!==weekCheck) weekTotal++;\n  //     d.weekTotal = weekTotal;\n  //     d.month = d.date.getMonth();\n  //     if(d.month!==monthCheck) monthTotal++;\n  //     d.monthTotal = monthTotal;\n  //     d.year = d.date.getFullYear();\n  //     dayCheck = d.dayOfYear;\n  //     weekCheck = d.week;\n  //     monthCheck = d.month;\n  //     d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n  //     d.month_start = new Date(moment(d.date).startOf('month').toDate());\n  // });\n  // data2.equity_data = data2.equity_data.filter(function(d,i){\n  //    return whoCountryCodes.includes(d.country_iso2)\n  // })\n  // data2.original = clone(data2);\n\n  console.log(data);\n  console.log(data.country);\n  console.log(data.country[42]);\n}\n_c = ParseData2;\nexport default ParseData2;\n\nvar _c;\n\n$RefreshReg$(_c, \"ParseData2\");","map":{"version":3,"sources":["/Users/matthewsmawfield/www/ifrc-covid-dataviz/src/ParseData2.js"],"names":["min","max","group","flatGroup","moment","clone","data","ParseData2","options","regions","country","equity_data","forEach","d","i","ifrc_region","population","parseInt","pop","dd","ii","code","vaccines_used","avg_tests_per_1000","parseFloat","number_vaccine_types_used","vaccines_per_100","vaccines_who_data","country_iso3","ISO3","data_updated","DATE_UPDATED","startOf","toDate","NUMBER_VACCINES_TYPES_USED","TOTAL_VACCINATIONS_PER100","isNaN","VACCINES_USED","split","map","item","trim","ns_involvement","self_assessment","vaccine_acceptance","iso3","country_code","country_iso2","vaccine_acceptance_percent","indicator_value","vaccine_acceptance_population","population_size","contract_tracing","toLowerCase","hdi_category","match","inform_severity","maxDate","Date","who_data","Date_reported","min_date","maxDateVaccines","vaccines_data","date","min_vaccine_date","unix","max_date","sort","a","b","dayTotal","dayCheck","weekTotal","weekCheck","monthTotal","monthCheck","whoCountryCodes","dayOfYear","week","isoWeek","month","getMonth","year","getFullYear","week_start","month_start","cumulative_deaths","Cumulative_deaths","cumulative_cases","Cumulative_cases","new_cases","New_cases","new_deaths","New_deaths","Country_code","country_name","undefined","includes","push","Country","WHO_region","whoDataByCountry","who_daily_latest","length","filter","iso_code","total_vaccinations","newDays","hasDays","lastRecord","vDataFlat","minDt","maxDt","lastDate","getTime","console","log","day","setDate","getDate","newDay","totalVac","totalVac100","people_vaccinated_per_hundred","people_fully_vaccinated_per_hundred","total_vaccinations_per_hundred","countryName","vaccines_data_cumulative"],"mappings":"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","sourcesContent":["import {min,max,group,flatGroup} from \"d3\";\nimport moment from 'moment';\nimport clone from 'just-clone';\nimport { data } from \"jquery\";\n\nexport function ParseData2(data, options) {\n\n    //*********************\n    // create regions\n    //*********************\n    data.regions = [\n        {'code': 'AF', 'population': 0},\n        {'code': 'ME', 'population': 0},\n        {'code': 'AP', 'population': 0},\n        {'code': 'EU', 'population': 0},\n        {'code': 'AM', 'population': 0},\n        {'code': 'OTH', 'population': 0}\n    ]\n\n    //*********************\n    // clean up country data\n    //*********************\n    data.country = data.equity_data;\n    data.country.forEach(function(d,i){\n\n        // if not an IFRC region then set to OTH\n        if((d.ifrc_region!='AF')&&(d.ifrc_region!='ME')&&(d.ifrc_region!='AP')&&(d.ifrc_region!='EU')&&(d.ifrc_region!='AM')){\n            d.ifrc_region = 'OTH';\n        }\n        \n        // parse country population\n        d.population = parseInt(d.population);\n        var pop = 0;\n        if(d.population>0) pop = d.population;\n\n        // sum up ifrc region population \n        data.regions.forEach(function(dd,ii){\n            if(dd.code==d.ifrc_region){\n                dd.population += pop\n            }\n        });\n\n        // get WHO vaccine data (vaccine types used, vaccines_per_100\n        d.vaccines_used = [];\n        d.avg_tests_per_1000 = parseFloat(d.avg_tests_per_1000)||0;\n        d.number_vaccine_types_used = 0;\n        d.vaccines_per_100 = 0;\n        d.number_vaccine_types_used = parseInt(d.avg_tests_per_1000);\n        data.vaccines_who_data.forEach(function(dd,ii){\n            if(d.country_iso3==dd.ISO3){\n                d.data_updated = moment(dd.DATE_UPDATED).startOf('day').toDate();\n                d.number_vaccine_types_used = parseInt(dd.NUMBER_VACCINES_TYPES_USED);\n                d.vaccines_per_100 = parseFloat(dd.TOTAL_VACCINATIONS_PER100);\n                if(isNaN(d.vaccines_per_100))d.vaccines_per_100 = 0;\n                d.vaccines_used = dd.VACCINES_USED.split(',').map(function(item) {\n                    return item.trim();\n                  });\n            }\n        })\n\n        // get ns involvement in activities\n        d.ns_involvement = 0;\n        data.self_assessment.forEach(function(dd,ii){\n            if(d.country_iso3==dd.ISO3){\n                if(dd['Final involvement']=='Yes') d.ns_involvement = 1;\n            }\n        })\n\n        // get vaccine acceptance\n        data.vaccine_acceptance.forEach(function(dd,ii){\n            if(d.country_iso3==dd.iso3){\n                // if(dd['Final involvement']=='Yes') d.ns_involvement = 1;\n                d.country_code = d.country_iso2;\n                d.vaccine_acceptance_percent = parseFloat(dd.indicator_value)*100;\n                d.vaccine_acceptance_population = parseInt(dd.population_size);\n            }\n        })\n\n        // get contrat tracing\n        if((d.contract_tracing.toLowerCase()=='all')||(d.contract_tracing.toLowerCase()=='some')){\n            d.contract_tracing = 1;\n        } else {\n            d.contract_tracing = 0\n        }\n\n        // parse equity data inform/hdi indexes\n        if(d.hdi_category.match(/very high/i)){\n            d.hdi_category = 'very-high'\n        }\n        else if(d.hdi_category.match(/high/i)){\n            d.hdi_category = 'high'\n        }\n        else if(d.hdi_category.match(/medium/i)){\n            d.hdi_category = 'medium'\n        }\n        else if(d.hdi_category.match(/low/i)){\n            d.hdi_category = 'low'\n        }\n        if(d.inform_severity.match(/very high/i)){\n            d.inform_severity = 'very-high'\n        }\n        else if(d.inform_severity.match(/high/i)){\n            d.inform_severity = 'high'\n        }\n        else if(d.inform_severity.match(/medium/i)){\n            d.inform_severity = 'medium'\n        }\n        else if(d.inform_severity.match(/low/i)){\n            d.inform_severity = 'low'\n        }\n        else if(d.inform_severity.match(/no/i)){\n            d.inform_severity = 'no-score'\n        }\n\n    });\n\n    //*********************\n    // get min/max dates\n    //*********************\n\n    // get min and max dates from daily who data\n    let maxDate = moment(new Date(max(data.who_data, function(d){\n        return d.Date_reported;\n    }))).startOf('day');\n\n    // override min date to week start\n    data.min_date = moment('2019-12-31').startOf('day').toDate();\n\n    let maxDateVaccines = moment(new Date(max(data.vaccines_data, function(d){\n        return d.date;\n    }))).startOf('day');\n\n    data.min_vaccine_date = moment(new Date(min(data.vaccines_data, function(d){\n        return d.date;\n    }))).startOf('day').toDate();\n\n\n    if(maxDateVaccines.unix()>maxDate.unix()) {\n        maxDate = maxDateVaccines;\n    }\n\n    data.max_date = maxDate.toDate();\n\n    //*********************\n    // parse who data\n    //*********************\n\n    data.who_data.sort(function(a,b){\n        return new Date(a.Date_reported) - new Date(b.Date_reported);\n    });\n\n    // set count for incremental day/week/month numbers\n    let dayTotal = -1;\n    let dayCheck = 0;\n    let weekTotal = -1;\n    let weekCheck = -1;\n    let monthTotal = 0;\n    let monthCheck = 0;\n\n    // parse and clean up WHO data\n    let whoCountryCodes = [];\n    data.who_data.forEach(function(d,i){\n        // parse dates\n        d.date = moment(d.Date_reported).startOf('day').toDate();\n        d.dayOfYear =  moment(d.date).dayOfYear();\n        d.week = moment(d.date).isoWeek();\n        if(d.week!==weekCheck) weekTotal++;\n        d.weekTotal = weekTotal;\n        d.month = d.date.getMonth();\n        if(d.month!==monthCheck) monthTotal++;\n        d.monthTotal = monthTotal;\n        d.year = d.date.getFullYear();\n        d.week_start = new Date(moment(d.date).startOf('isoWeek').startOf('day').toDate());\n        d.month_start = new Date(moment(d.date).startOf('month').startOf('day').toDate());\n\n        // parse cases and deaths\n        d.cumulative_deaths = parseInt(d.Cumulative_deaths);\n        d.cumulative_cases = parseInt(d.Cumulative_cases);\n        d.new_cases = parseInt(d.New_cases);\n        d.new_deaths = parseInt(d.New_deaths);\n\n        // set negative values to zero for new cases/deaths\n        if(d.new_deaths<0)d.new_deaths = 0;\n        if(d.new_cases<0)d.new_cases = 0;\n\n        // override country name and code\n        d.country_code = d.Country_code;\n        d.country_name = null;\n        data.country.forEach(function(dd,ii){\n            if(dd.country_iso2===d.Country_code){\n                d.ifrc_region = dd.ifrc_region;\n                d.country_name = dd.country_name;\n            }\n        })\n        if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n\n        // add country code to array so we know it is used\n        if(!whoCountryCodes.includes(d.country_code)) {\n            whoCountryCodes.push(d.country_code);\n        }\n\n        // delete old unused keys\n        delete d.Date_reported;\n        delete d.Country;\n        delete d.New_cases;\n        delete d.New_deaths;\n        delete d.Country_code;\n        delete d.Cumulative_deaths;\n        delete d.Cumulative_cases;\n        delete d.Country_code;\n        delete d.WHO_region;\n        delete d.Country;\n        \n        // set incremental count\n        dayCheck = d.dayOfYear;\n        weekCheck = d.week;\n        monthCheck = d.month;\n    })\n\n    //*********************\n    // add most recent who data record to data.country\n    //*********************\n\n    // group who data by country\n    var whoDataByCountry = flatGroup(data.who_data, d => d.country_code);\n\n    data.country.forEach(function(d,i){\n        whoDataByCountry.forEach(function(dd,ii){\n            if(dd[0]==d.country_code){\n                d.who_daily_latest = dd[1][dd[1].length-1];\n            }\n        })\n    })\n\n    //*********************\n    // parse vaccine cumulative data\n    //*********************\n\n    // clean up values\n    data.vaccines_data.forEach(function(d,i){\n        d.date = moment(d.date).startOf('day').toDate();\n    });\n    \n    data.vaccines_data.sort(function(a,b){\n        return new Date(a.date) - new Date(b.date);\n    });\n\n    // reset count for incremental day/week/month numbers\n    dayTotal = -1;\n    dayCheck = 0;\n    weekTotal = -1;\n    weekCheck = -1;\n    monthTotal = 0;\n    monthCheck = 0;\n\n    // filter out vaccine data to only include records with ISO3 country codes\n    data.vaccines_data = data.vaccines_data.filter(function(d,i){\n        return d.iso_code.length===3 && d.total_vaccinations > 0;\n    })\n\n    var whoDataByCountry = flatGroup(data.vaccines_data, d => d.iso_code);\n\n    // fill out missing vaccinations date records (extend cumulative from last data date)\n    var newDays = [];\n    var hasDays = [];\n    var lastRecord = {};\n    var vDataFlat = [];\n\n    whoDataByCountry.forEach(function(d,i){\n\n        var minDt = new Date(data.min_date);\n        var maxDt = new Date(data.max_date);\n\n        hasDays = [];\n        newDays = [];\n\n        // reset country name and code using country table\n        data.country.forEach(function(dd,ii){\n            if(dd.country_iso3===d[0]){\n                d.ifrc_region = dd.ifrc_region;\n                d.country_name = dd.country_name;\n                d.country_code = dd.country_iso2;\n            }\n        })\n\n        // set the last recorded date fo this country\n        d.lastDate = moment(max(d[1], function(d,i){ return d.date })).startOf('day').toDate();\n\n        // loop through all date records for this country and add to hasDays array\n        d[1].forEach(function(dd,ii){\n            hasDays.push(dd.date.getTime());\n        })\n\n        console.log(d);\n        // fill in missing dates\n        d[1].forEach(function(dd,ii){\n            dd.total_vaccinations = parseInt(dd.total_vaccinations);\n            for (var day = data.min_vaccine_date;day <= data.max_date; day.setDate(day.getDate() + 1)) {\n                var newDay = (day).getTime();\n                console.log(newDay);\n\n                if(!hasDays.includes(newDay)){\n                    newDays.push({date: (day), total_vaccinations: null})\n                }\n            }\n        });\n\n        if(d.country_code=='VE')console.log(hasDays);\n        if(d.country_code=='VE')console.log(newDays);\n\n        d[1].push(...newDays);\n        d[1].sort(function(a,b){\n            return new Date(a.date) - new Date(b.date);\n        });\n\n        // loop through dates and set cumulative values\n        var totalVac = 0;\n        var totalVac100 = 0;\n        var people_vaccinated_per_hundred = 0;\n        var people_fully_vaccinated_per_hundred = 0;\n        d[1].forEach(function(dd,ii){\n            if(dd.total_vaccinations){\n                totalVac = dd.total_vaccinations;\n            } else {\n                dd.total_vaccinations = totalVac;\n            }\n            if(dd.total_vaccinations_per_hundred){\n                totalVac100 = dd.total_vaccinations_per_hundred\n            } else {\n                dd.total_vaccinations_per_hundred = totalVac100;\n            }\n            if(dd.people_vaccinated_per_hundred){\n                people_vaccinated_per_hundred = dd.people_vaccinated_per_hundred;\n            } else {\n                dd.people_vaccinated_per_hundred = people_vaccinated_per_hundred;\n            }\n            if(dd.people_fully_vaccinated_per_hundred){\n                people_fully_vaccinated_per_hundred = dd.people_fully_vaccinated_per_hundred;\n            } else {\n                dd.people_fully_vaccinated_per_hundred = people_fully_vaccinated_per_hundred;\n            }\n\n            var countryName;\n            if(d.country_name==null) { countryName = d[0];\n            } else {\n                countryName = d.country_name\n            }\n\n            vDataFlat.push({\n                date: new Date(dd.date),\n                lastDate: d.lastDate,\n                total_vaccinations_per_hundred: parseFloat(totalVac100),\n                people_vaccinated_per_hundred: people_vaccinated_per_hundred,\n                people_fully_vaccinated_per_hundred: people_fully_vaccinated_per_hundred,\n                iso_code: d[0], \n                ifrc_region: d.ifrc_region,\n                country_name: countryName,\n                country_code: d.country_code, \n                total_vaccinations: totalVac \n            })\n        })\n    });\n\n    data.vaccines_data_cumulative = vDataFlat;\n\n    // data2.vaccines_data_cumulative.sort(function(a,b){\n    //     return new Date(a.date) - new Date(b.date);\n    // });\n\n    // data2.vaccines_data_cumulative.forEach(function(d,i){\n    //     if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n    //     d.dayOfYear =  moment(d.date).dayOfYear();\n    //     if(d.dayOfYear!==dayCheck) dayTotal++;\n    //     d.dayTotal = dayTotal;\n    //     d.week = moment(d.date).isoWeek();\n    //     if(d.week!==weekCheck) weekTotal++;\n    //     d.weekTotal = weekTotal;\n    //     d.month = d.date.getMonth();\n    //     if(d.month!==monthCheck) monthTotal++;\n    //     d.monthTotal = monthTotal;\n    //     d.year = d.date.getFullYear();\n    //     dayCheck = d.dayOfYear;\n    //     weekCheck = d.week;\n    //     monthCheck = d.month;\n    //     d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n    //     d.month_start = new Date(moment(d.date).startOf('month').toDate());\n    // })\n\n    // // parse vaccine daily data\n\n    // dayTotal = -1;\n    // dayCheck = 0;\n\n    // weekTotal = -1;\n    // weekCheck = -1;\n    // monthTotal = 0;\n    // monthCheck = 0;\n\n    // // filter out vaccine data on only include records with ISO3 country codes\n    // data2.vaccines_data_daily = data2.vaccines_data.filter(function(d,i){\n    //     return d.iso_code.length===3 && d.daily_vaccinations > 0;\n    // })\n\n    // // fill out missing vaccinations date records (extend cumulative)\n    // var vGroup = flatGroup(data2.vaccines_data_daily, d => d.iso_code);\n\n    // var newDates = [];\n    // var hasDays = [];\n    // var initDate = 0;\n    // var lastRecord = {};\n    // var vDataFlat = [];\n    // vGroup.forEach(function(d,i){\n\n    //     var minDt = new Date(minDateVaccines);\n    //     var maxDt = new Date(maxDateVaccines);\n    //     var hasDays = [];\n    //     var newDays = [];\n    //     var newDays = [];\n\n    //     data2.equity_data.forEach(function(dd,ii){\n    //         if(dd.country_iso3===d[0]){\n    //             d.ifrc_region = dd.ifrc_region;\n    //             d.country_name = dd.country_name;\n    //             d.country_code = dd.country_iso2;\n    //         }\n    //     })\n\n    //     d[1].forEach(function(dd,ii){\n    //         hasDays.push(new Date(dd.date).getTime());\n    //     })\n\n    //     // if((i<1)||(d[0] =='BFA')||(d[0] =='RWA')){\n    //     d[1].forEach(function(dd,ii){\n    //         dd.daily_vaccinations = parseInt(dd.daily_vaccinations);\n    //         for (var day = minDt;day <= maxDt; day.setDate(day.getDate() + 1)) {\n    //             var newDay = day.getTime();\n    //             if(!hasDays.includes(newDay)){\n    //                 newDays.push({date: new Date(day), daily_vaccinations: null})\n    //             }\n    //         }\n    //     });\n\n    //     d[1].push(...newDays);\n\n    //     d[1].sort(function(a,b){\n    //         return new Date(a.date) - new Date(b.date);\n    //     });\n\n    //     var daily_vaccinations = 0;\n\n    //     d[1].forEach(function(dd,ii){\n    //         if(dd.daily_vaccinations){\n    //             daily_vaccinations = dd.daily_vaccinations;\n    //         } else {\n    //             dd.daily_vaccinations = daily_vaccinations;\n    //         }\n    //         var countryName;\n    //         if(d.country_name==null) { countryName = d[0];\n    //         } else {\n    //             countryName = d.country_name\n    //         }\n    //         vDataFlat.push({\n    //             date: new Date(dd.date),\n    //             iso_code: d[0], \n    //             ifrc_region: d.ifrc_region,\n    //             country_name: countryName,\n    //             country_code: d.country_code, \n    //             daily_vaccinations: daily_vaccinations \n    //         })\n    //     })\n    // });\n\n    // data.vaccines_data_daily = vDataFlat;\n\n    // data2.vaccines_data_daily.sort(function(a,b){\n    //     return new Date(a.date) - new Date(b.date);\n    // });\n\n    // data2.vaccines_data_daily.forEach(function(d,i){\n    //     if(d.ifrc_region==undefined) d.ifrc_region = 'OTH';\n    //     d.dayOfYear =  moment(d.date).dayOfYear();\n    //     if(d.dayOfYear!==dayCheck) dayTotal++;\n    //     d.dayTotal = dayTotal;\n    //     d.week = moment(d.date).isoWeek();\n    //     if(d.week!==weekCheck) weekTotal++;\n    //     d.weekTotal = weekTotal;\n    //     d.month = d.date.getMonth();\n    //     if(d.month!==monthCheck) monthTotal++;\n    //     d.monthTotal = monthTotal;\n    //     d.year = d.date.getFullYear();\n    //     dayCheck = d.dayOfYear;\n    //     weekCheck = d.week;\n    //     monthCheck = d.month;\n    //     d.week_start = new Date(moment(d.date).startOf('isoWeek').toDate());\n    //     d.month_start = new Date(moment(d.date).startOf('month').toDate());\n    // });\n\n\n    \n\n    // data2.equity_data = data2.equity_data.filter(function(d,i){\n    //    return whoCountryCodes.includes(d.country_iso2)\n    // })\n    // data2.original = clone(data2);\n    console.log(data);\n    console.log(data.country);\n    console.log(data.country[42]);\n}\n\nexport default ParseData2;\n"]},"metadata":{},"sourceType":"module"}