{"ast":null,"code":"import * as d3 from \"d3\";\nimport moment from 'moment';\nimport colors from './colors';\nlet yScalecases;\nlet yScaleDeaths;\nlet yScaleVaccines;\nlet yAxisCases;\nlet yAxisDeaths;\nlet yAxisVaccines;\nexport function drawTimechart(data, options) {\n  const regions = ['AF', 'ME', 'AP', 'EU', 'AM', 'OTH'];\n  const groupedData = [];\n  data.who_data.forEach(function (d, i) {\n    if (!groupedData[d[options.timeline_frequency + 'Total']]) groupedData[d[options.timeline_frequency + 'Total']] = {};\n    if (options.timeline_frequency === 'day') groupedData[d[options.timeline_frequency + 'Total']].date = d.date;\n    if (options.timeline_frequency === 'week') groupedData[d[options.timeline_frequency + 'Total']].date = moment(d.date).startOf('isoWeek').toDate();\n    if (options.timeline_frequency === 'month') groupedData[d[options.timeline_frequency + 'Total']].date = moment(d.date).startOf('month').toDate();\n    if (!groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region]) groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region] = {\n      new_cases: 0,\n      new_deaths: 0,\n      cumulative_cases: 0,\n      cumulative_deaths: 0\n    };\n    groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].new_cases += d.new_cases;\n    groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].new_deaths += d.new_deaths;\n    groupedData[d[options.timeline_frequency + 'Total']][d.ifrc_region].cumulative_cases = 0;\n  }); // totals by date\n\n  groupedData.forEach(function (d, i) {\n    regions.forEach(function (dd, ii) {\n      // if(dd!=='OTH') d.region.push({'region': dd, 'new_cases': d[dd].new_cases, 'new_deaths': d[dd].new_deaths, 'cumulative_cases': d[dd].cumulative_cases, 'cumulative_deaths': d[dd].cumulative_deaths});\n      if (i > 0) {\n        d[dd].cumulative_cases = groupedData[i][dd].new_cases + groupedData[i - 1][dd].cumulative_cases;\n        d[dd].cumulative_deaths = groupedData[i][dd].new_deaths + groupedData[i - 1][dd].cumulative_deaths;\n      } else {\n        d[dd].cumulative_cases = groupedData[i][dd].new_cases;\n        d[dd].cumulative_deaths = groupedData[i][dd].new_deaths;\n      }\n    });\n    d.total_new_cases = d.AF.new_cases + d.AP.new_cases + d.AM.new_cases + d.EU.new_cases + d.ME.new_cases + d.OTH.new_cases;\n    d.total_cumulative_cases = d.AF.cumulative_cases + d.AP.cumulative_cases + d.AM.cumulative_cases + d.EU.cumulative_cases + d.ME.cumulative_cases + d.OTH.cumulative_cases;\n    d.total_new_deaths = d.AF.new_deaths + d.AP.new_deaths + d.AM.new_deaths + d.EU.new_deaths + d.ME.new_deaths + d.OTH.new_deaths;\n    d.total_cumulative_deaths = d.AF.cumulative_deaths + d.AP.cumulative_deaths + d.AM.cumulative_deaths + d.EU.cumulative_deaths + d.ME.cumulative_deaths + d.OTH.cumulative_deaths;\n    d.region = [];\n    regions.forEach(function (dd, ii) {\n      d.region.push({\n        'region': dd,\n        'new_cases': d[dd].new_cases,\n        'new_deaths': d[dd].new_deaths,\n        'cumulative_cases': d[dd].cumulative_cases,\n        'cumulative_deaths': d[dd].cumulative_deaths\n      });\n    });\n  });\n  const numIntervals = d3.max(data.who_data, function (d, i) {\n    return d[options.timeline_frequency + 'Total'];\n  });\n  const maxCases = d3.max(groupedData, function (d, i) {\n    if (options.timeline_type === 'non-cumulative') return d.total_new_cases;\n    if (options.timeline_type === 'cumulative') return d.total_cumulative_cases;\n    if (options.timeline_type === 'stacked') return 100;\n  });\n  const maxDeaths = d3.max(groupedData, function (d, i) {\n    if (options.timeline_type === 'non-cumulative') return d.total_new_deaths;\n    if (options.timeline_type === 'cumulative') return d.total_cumulative_deaths;\n    if (options.timeline_type === 'stacked') return 100;\n  }); // define date range\n\n  const minDate = groupedData[0].date;\n  const maxDate = groupedData[numIntervals].date;\n  const svg = d3.select('#timechart_svg');\n  svg.selectAll('g').remove();\n  const width = 2000;\n  const barWidth = width / numIntervals;\n  let barSpacing = 0.04;\n  if (options.timeline_frequency === 'month') barSpacing = 0.03;\n  if (options.timeline_frequency === 'day') barSpacing = 0; // define scales\n\n  const xScale = d3.scaleLinear().range([0, width]).domain([0, numIntervals]);\n  yScaleCases = d3.scaleLinear().range([0, 140]).domain([0, maxCases]);\n  yScaleDeaths = d3.scaleLinear().range([0, 140]).domain([0, maxDeaths]); // yScaleVaccines = d3.scaleLinear()\n  // .range([0,140])\n  // .domain([0,maxDeaths]);\n  // define axi\n\n  yAxisCases = d3.axisRight().scale(yScaleCases).ticks(3).tickSize(0).tickPadding(8);\n  yAxisDeaths = d3.axisRight().scale(yScaleDeaths).ticks(3).tickSize(0).tickPadding(8); // yAxisVaccines = d3.axisRight()\n  // .scale(yScaleVaccines)\n  // .ticks(3)\n  // .tickSize(0)\n  // .tickPadding(8);\n  // y-axis\n\n  var yAxisText = svgBg.append(\"g\").attr(\"class\", \"yAxis axis\").attr(\"id\", \"timechartyAxis\").attr('transform', 'translate(' + (margin.left - 1) + ',' + margin.top + ')').call(timechartyAxis).style('font-size', options.yAxis.font.values.size); // CASES\n  // loop through groupedData and draw bars\n\n  const barGroups = svg.selectAll('.bar_group').data(groupedData).enter().append('g').attr('transform', function (d, i) {\n    return 'translate(' + xScale(i) + ')';\n  }); // CASES\n\n  barGroups.selectAll('.cases_bar').data(function (d, i) {\n    return d.region.filter(function (dd, ii) {\n      return dd.region !== 'OTH';\n    });\n  }).enter().append('rect').attr('class', 'cases_bar').attr('x', barWidth * barSpacing).attr('y', function (d, i) {\n    const totalNewCases = d3.select(this.parentNode).datum().total_new_cases - d3.select(this.parentNode).datum().OTH.new_cases;\n    let dp = 0;\n\n    if (i > 0) {\n      for (let ii = 1; ii <= i; ii++) {\n        if (options.timeline_type === 'cumulative') dp += d3.select(this.parentNode).datum().region[ii - 1].cumulative_cases;\n        if (options.timeline_type === 'non-cumulative') dp += d3.select(this.parentNode).datum().region[ii - 1].new_cases;\n        if (options.timeline_type === 'stacked') dp += d3.select(this.parentNode).datum().region[ii - 1].new_cases;\n      }\n    }\n\n    let y = 0;\n    if (options.timeline_type === 'cumulative') y = 140 - yScaleCases(d.cumulative_cases) - yScaleCases(dp);\n    if (options.timeline_type === 'non-cumulative') y = 140 - yScaleCases(d.new_cases) - yScaleCases(dp);\n    if (options.timeline_type === 'stacked') y = 140 - 140 * (d.new_cases / totalNewCases) - 140 * (dp / totalNewCases);\n\n    if (y) {\n      return y;\n    } else {\n      return 0;\n    }\n\n    ;\n  }).attr('width', barWidth - barWidth * barSpacing * 2).attr('height', function (d, i) {\n    const totalNewCases = d3.select(this.parentNode).datum().total_new_cases - d3.select(this.parentNode).datum().OTH.new_cases;\n    let y = 0;\n    if (options.timeline_type === 'cumulative') y = yScaleCases(d.cumulative_cases);\n    if (options.timeline_type === 'non-cumulative') y = yScaleCases(d.new_cases);\n    if (options.timeline_type === 'stacked') y = 140 * (d.new_cases / totalNewCases);\n\n    if (y) {\n      return y;\n    } else {\n      return 0;\n    }\n\n    ;\n  }).attr('fill', function (d, i) {\n    return colors.regions[d.region];\n  }); // DEATHS\n\n  barGroups.selectAll('.deaths_bar').data(function (d, i) {\n    return d.region.filter(function (dd, ii) {\n      return dd.region !== 'OTH';\n    });\n  }).enter().append('rect').attr('class', 'deaths_bar').attr('x', barWidth * barSpacing).attr('y', function (d, i) {\n    const totalNewDeaths = d3.select(this.parentNode).datum().total_new_deaths - d3.select(this.parentNode).datum().OTH.new_deaths;\n    let dp = 0;\n\n    if (i > 0) {\n      for (let ii = 1; ii <= i; ii++) {\n        if (options.timeline_type === 'cumulative') dp += d3.select(this.parentNode).datum().region[ii - 1].cumulative_deaths;\n        if (options.timeline_type === 'non-cumulative') dp += d3.select(this.parentNode).datum().region[ii - 1].new_deaths;\n        if (options.timeline_type === 'stacked') dp += d3.select(this.parentNode).datum().region[ii - 1].new_deaths;\n      }\n    }\n\n    let y = 0;\n    if (options.timeline_type === 'cumulative') y = 140 - yScaleDeaths(d.cumulative_deaths) - yScaleDeaths(dp) + 170;\n    if (options.timeline_type === 'non-cumulative') y = 140 - yScaleDeaths(d.new_deaths) - yScaleDeaths(dp) + 170;\n    if (options.timeline_type === 'stacked') y = 140 - 140 * (d.new_deaths / totalNewDeaths) - 140 * (dp / totalNewDeaths) + 170;\n\n    if (y) {\n      return y;\n    } else {\n      return 0;\n    }\n\n    ;\n  }).attr('width', barWidth - barWidth * barSpacing * 2).attr('height', function (d, i) {\n    const totalNewDeaths = d3.select(this.parentNode).datum().total_new_deaths - d3.select(this.parentNode).datum().OTH.new_deaths;\n    let y = 0;\n    if (options.timeline_type === 'cumulative') y = yScaleDeaths(d.cumulative_deaths);\n    if (options.timeline_type === 'non-cumulative') y = yScaleDeaths(d.new_deaths);\n    if (options.timeline_type === 'stacked') y = 140 * (d.new_deaths / totalNewDeaths);\n\n    if (y) {\n      return y;\n    } else {\n      return 0;\n    }\n\n    ;\n  }).attr('fill', function (d, i) {\n    return colors.regions[d.region];\n  }); // 10\n  // 0.1\n  // 1 - 8 - 1\n  // draw x-axis\n  // draw y-axis\n}\nexport function updateTimechart(data) {\n  console.log('update timechart');\n}\nexport default drawTimechart;","map":{"version":3,"sources":["/Users/matthewsmawfield/www/ifrc-covid-dataviz/src/Timechart.js"],"names":["d3","moment","colors","yScalecases","yScaleDeaths","yScaleVaccines","yAxisCases","yAxisDeaths","yAxisVaccines","drawTimechart","data","options","regions","groupedData","who_data","forEach","d","i","timeline_frequency","date","startOf","toDate","ifrc_region","new_cases","new_deaths","cumulative_cases","cumulative_deaths","dd","ii","total_new_cases","AF","AP","AM","EU","ME","OTH","total_cumulative_cases","total_new_deaths","total_cumulative_deaths","region","push","numIntervals","max","maxCases","timeline_type","maxDeaths","minDate","maxDate","svg","select","selectAll","remove","width","barWidth","barSpacing","xScale","scaleLinear","range","domain","yScaleCases","axisRight","scale","ticks","tickSize","tickPadding","yAxisText","svgBg","append","attr","margin","left","top","call","timechartyAxis","style","yAxis","font","values","size","barGroups","enter","filter","totalNewCases","parentNode","datum","dp","y","totalNewDeaths","updateTimechart","console","log"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,IAAIC,WAAJ;AACA,IAAIC,YAAJ;AACA,IAAIC,cAAJ;AACA,IAAIC,UAAJ;AACA,IAAIC,WAAJ;AACA,IAAIC,aAAJ;AAEA,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,OAA7B,EAAsC;AAEzC,QAAMC,OAAO,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,KAA/B,CAAhB;AAEA,QAAMC,WAAW,GAAG,EAApB;AAEAH,EAAAA,IAAI,CAACI,QAAL,CAAcC,OAAd,CAAsB,UAASC,CAAT,EAAWC,CAAX,EAAa;AAC/B,QAAG,CAACJ,WAAW,CAACG,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAf,EAAuDL,WAAW,CAACG,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAX,GAAqD,EAArD;AACvD,QAAGP,OAAO,CAACO,kBAAR,KAA6B,KAAhC,EAAuCL,WAAW,CAACG,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAX,CAAmDC,IAAnD,GAA0DH,CAAC,CAACG,IAA5D;AACvC,QAAGR,OAAO,CAACO,kBAAR,KAA6B,MAAhC,EAAwCL,WAAW,CAACG,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAX,CAAmDC,IAAnD,GAA0DlB,MAAM,CAACe,CAAC,CAACG,IAAH,CAAN,CAAeC,OAAf,CAAuB,SAAvB,EAAkCC,MAAlC,EAA1D;AACxC,QAAGV,OAAO,CAACO,kBAAR,KAA6B,OAAhC,EAAyCL,WAAW,CAACG,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAX,CAAmDC,IAAnD,GAA0DlB,MAAM,CAACe,CAAC,CAACG,IAAH,CAAN,CAAeC,OAAf,CAAuB,OAAvB,EAAgCC,MAAhC,EAA1D;AACzC,QAAG,CAACR,WAAW,CAACG,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAX,CAAmDF,CAAC,CAACM,WAArD,CAAJ,EAAuET,WAAW,CAACG,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAX,CAAmDF,CAAC,CAACM,WAArD,IAAoE;AAACC,MAAAA,SAAS,EAAE,CAAZ;AAAeC,MAAAA,UAAU,EAAE,CAA3B;AAA8BC,MAAAA,gBAAgB,EAAE,CAAhD;AAAmDC,MAAAA,iBAAiB,EAAE;AAAtE,KAApE;AACvEb,IAAAA,WAAW,CAACG,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAX,CAAmDF,CAAC,CAACM,WAArD,EAAkEC,SAAlE,IAA+EP,CAAC,CAACO,SAAjF;AACAV,IAAAA,WAAW,CAACG,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAX,CAAmDF,CAAC,CAACM,WAArD,EAAkEE,UAAlE,IAAgFR,CAAC,CAACQ,UAAlF;AACAX,IAAAA,WAAW,CAACG,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAF,CAAX,CAAmDF,CAAC,CAACM,WAArD,EAAkEG,gBAAlE,GAAqF,CAArF;AACH,GATD,EANyC,CAiBzC;;AACAZ,EAAAA,WAAW,CAACE,OAAZ,CAAoB,UAASC,CAAT,EAAWC,CAAX,EAAa;AAC7BL,IAAAA,OAAO,CAACG,OAAR,CAAgB,UAASY,EAAT,EAAYC,EAAZ,EAAe;AAC3B;AACA,UAAGX,CAAC,GAAC,CAAL,EAAO;AACHD,QAAAA,CAAC,CAACW,EAAD,CAAD,CAAMF,gBAAN,GAAyBZ,WAAW,CAACI,CAAD,CAAX,CAAeU,EAAf,EAAmBJ,SAAnB,GAA+BV,WAAW,CAACI,CAAC,GAAC,CAAH,CAAX,CAAiBU,EAAjB,EAAqBF,gBAA7E;AACAT,QAAAA,CAAC,CAACW,EAAD,CAAD,CAAMD,iBAAN,GAA0Bb,WAAW,CAACI,CAAD,CAAX,CAAeU,EAAf,EAAmBH,UAAnB,GAAgCX,WAAW,CAACI,CAAC,GAAC,CAAH,CAAX,CAAiBU,EAAjB,EAAqBD,iBAA/E;AACH,OAHD,MAGO;AACHV,QAAAA,CAAC,CAACW,EAAD,CAAD,CAAMF,gBAAN,GAAyBZ,WAAW,CAACI,CAAD,CAAX,CAAeU,EAAf,EAAmBJ,SAA5C;AACAP,QAAAA,CAAC,CAACW,EAAD,CAAD,CAAMD,iBAAN,GAA0Bb,WAAW,CAACI,CAAD,CAAX,CAAeU,EAAf,EAAmBH,UAA7C;AACH;AACJ,KATD;AAWAR,IAAAA,CAAC,CAACa,eAAF,GAAoBb,CAAC,CAACc,EAAF,CAAKP,SAAL,GAAiBP,CAAC,CAACe,EAAF,CAAKR,SAAtB,GAAkCP,CAAC,CAACgB,EAAF,CAAKT,SAAvC,GAAmDP,CAAC,CAACiB,EAAF,CAAKV,SAAxD,GAAoEP,CAAC,CAACkB,EAAF,CAAKX,SAAzE,GAAqFP,CAAC,CAACmB,GAAF,CAAMZ,SAA/G;AACAP,IAAAA,CAAC,CAACoB,sBAAF,GAA2BpB,CAAC,CAACc,EAAF,CAAKL,gBAAL,GAAwBT,CAAC,CAACe,EAAF,CAAKN,gBAA7B,GAAgDT,CAAC,CAACgB,EAAF,CAAKP,gBAArD,GAAwET,CAAC,CAACiB,EAAF,CAAKR,gBAA7E,GAAgGT,CAAC,CAACkB,EAAF,CAAKT,gBAArG,GAAwHT,CAAC,CAACmB,GAAF,CAAMV,gBAAzJ;AACAT,IAAAA,CAAC,CAACqB,gBAAF,GAAqBrB,CAAC,CAACc,EAAF,CAAKN,UAAL,GAAkBR,CAAC,CAACe,EAAF,CAAKP,UAAvB,GAAoCR,CAAC,CAACgB,EAAF,CAAKR,UAAzC,GAAsDR,CAAC,CAACiB,EAAF,CAAKT,UAA3D,GAAwER,CAAC,CAACkB,EAAF,CAAKV,UAA7E,GAA0FR,CAAC,CAACmB,GAAF,CAAMX,UAArH;AACAR,IAAAA,CAAC,CAACsB,uBAAF,GAA4BtB,CAAC,CAACc,EAAF,CAAKJ,iBAAL,GAAyBV,CAAC,CAACe,EAAF,CAAKL,iBAA9B,GAAkDV,CAAC,CAACgB,EAAF,CAAKN,iBAAvD,GAA2EV,CAAC,CAACiB,EAAF,CAAKP,iBAAhF,GAAoGV,CAAC,CAACkB,EAAF,CAAKR,iBAAzG,GAA6HV,CAAC,CAACmB,GAAF,CAAMT,iBAA/J;AACAV,IAAAA,CAAC,CAACuB,MAAF,GAAW,EAAX;AAEA3B,IAAAA,OAAO,CAACG,OAAR,CAAgB,UAASY,EAAT,EAAYC,EAAZ,EAAe;AAC3BZ,MAAAA,CAAC,CAACuB,MAAF,CAASC,IAAT,CAAc;AAAC,kBAAUb,EAAX;AAAe,qBAAaX,CAAC,CAACW,EAAD,CAAD,CAAMJ,SAAlC;AAA6C,sBAAcP,CAAC,CAACW,EAAD,CAAD,CAAMH,UAAjE;AAA6E,4BAAoBR,CAAC,CAACW,EAAD,CAAD,CAAMF,gBAAvG;AAAyH,6BAAqBT,CAAC,CAACW,EAAD,CAAD,CAAMD;AAApJ,OAAd;AACH,KAFD;AAIH,GAtBD;AAwBA,QAAMe,YAAY,GAAGzC,EAAE,CAAC0C,GAAH,CAAOhC,IAAI,CAACI,QAAZ,EAAsB,UAASE,CAAT,EAAWC,CAAX,EAAa;AACpD,WAAOD,CAAC,CAACL,OAAO,CAACO,kBAAR,GAA2B,OAA5B,CAAR;AACH,GAFoB,CAArB;AAIA,QAAMyB,QAAQ,GAAG3C,EAAE,CAAC0C,GAAH,CAAO7B,WAAP,EAAoB,UAASG,CAAT,EAAWC,CAAX,EAAa;AAC9C,QAAGN,OAAO,CAACiC,aAAR,KAAwB,gBAA3B,EAA6C,OAAO5B,CAAC,CAACa,eAAT;AAC7C,QAAGlB,OAAO,CAACiC,aAAR,KAAwB,YAA3B,EAAyC,OAAO5B,CAAC,CAACoB,sBAAT;AACzC,QAAGzB,OAAO,CAACiC,aAAR,KAAwB,SAA3B,EAAsC,OAAO,GAAP;AACzC,GAJgB,CAAjB;AAMA,QAAMC,SAAS,GAAG7C,EAAE,CAAC0C,GAAH,CAAO7B,WAAP,EAAoB,UAASG,CAAT,EAAWC,CAAX,EAAa;AAC/C,QAAGN,OAAO,CAACiC,aAAR,KAAwB,gBAA3B,EAA6C,OAAO5B,CAAC,CAACqB,gBAAT;AAC7C,QAAG1B,OAAO,CAACiC,aAAR,KAAwB,YAA3B,EAAyC,OAAO5B,CAAC,CAACsB,uBAAT;AACzC,QAAG3B,OAAO,CAACiC,aAAR,KAAwB,SAA3B,EAAsC,OAAO,GAAP;AACzC,GAJiB,CAAlB,CApDyC,CA0DzC;;AACA,QAAME,OAAO,GAAGjC,WAAW,CAAC,CAAD,CAAX,CAAeM,IAA/B;AACA,QAAM4B,OAAO,GAAGlC,WAAW,CAAC4B,YAAD,CAAX,CAA0BtB,IAA1C;AAEA,QAAM6B,GAAG,GAAGhD,EAAE,CAACiD,MAAH,CAAU,gBAAV,CAAZ;AACAD,EAAAA,GAAG,CAACE,SAAJ,CAAc,GAAd,EAAmBC,MAAnB;AAEA,QAAMC,KAAK,GAAG,IAAd;AACA,QAAMC,QAAQ,GAAGD,KAAK,GAACX,YAAvB;AAEA,MAAIa,UAAU,GAAG,IAAjB;AACA,MAAG3C,OAAO,CAACO,kBAAR,KAA6B,OAAhC,EAAyCoC,UAAU,GAAG,IAAb;AACzC,MAAG3C,OAAO,CAACO,kBAAR,KAA6B,KAAhC,EAAuCoC,UAAU,GAAG,CAAb,CAtEE,CAwEzC;;AAEA,QAAMC,MAAM,GAAGvD,EAAE,CAACwD,WAAH,GACdC,KADc,CACR,CAAC,CAAD,EAAGL,KAAH,CADQ,EAEdM,MAFc,CAEP,CAAC,CAAD,EAAGjB,YAAH,CAFO,CAAf;AAIAkB,EAAAA,WAAW,GAAG3D,EAAE,CAACwD,WAAH,GACbC,KADa,CACP,CAAC,CAAD,EAAG,GAAH,CADO,EAEbC,MAFa,CAEN,CAAC,CAAD,EAAGf,QAAH,CAFM,CAAd;AAIAvC,EAAAA,YAAY,GAAGJ,EAAE,CAACwD,WAAH,GACdC,KADc,CACR,CAAC,CAAD,EAAG,GAAH,CADQ,EAEdC,MAFc,CAEP,CAAC,CAAD,EAAGb,SAAH,CAFO,CAAf,CAlFyC,CAsFzC;AACA;AACA;AAEA;;AAEAvC,EAAAA,UAAU,GAAGN,EAAE,CAAC4D,SAAH,GACZC,KADY,CACNF,WADM,EAEZG,KAFY,CAEN,CAFM,EAGZC,QAHY,CAGH,CAHG,EAIZC,WAJY,CAIA,CAJA,CAAb;AAMAzD,EAAAA,WAAW,GAAGP,EAAE,CAAC4D,SAAH,GACbC,KADa,CACPzD,YADO,EAEb0D,KAFa,CAEP,CAFO,EAGbC,QAHa,CAGJ,CAHI,EAIbC,WAJa,CAID,CAJC,CAAd,CAlGyC,CAwGzC;AACA;AACA;AACA;AACA;AAEA;;AACA,MAAIC,SAAS,GAAGC,KAAK,CAACC,MAAN,CAAa,GAAb,EACfC,IADe,CACV,OADU,EACD,YADC,EAEfA,IAFe,CAEV,IAFU,EAEJ,gBAFI,EAGfA,IAHe,CAGV,WAHU,EAGG,gBAAcC,MAAM,CAACC,IAAP,GAAY,CAA1B,IAA6B,GAA7B,GAAiCD,MAAM,CAACE,GAAxC,GAA4C,GAH/C,EAIfC,IAJe,CAIVC,cAJU,EAKfC,KALe,CAKT,WALS,EAKI/D,OAAO,CAACgE,KAAR,CAAcC,IAAd,CAAmBC,MAAnB,CAA0BC,IAL9B,CAAhB,CA/GyC,CAsHzC;AACA;;AACA,QAAMC,SAAS,GAAG/B,GAAG,CAACE,SAAJ,CAAc,YAAd,EACjBxC,IADiB,CACZG,WADY,EAEjBmE,KAFiB,GAGjBb,MAHiB,CAGV,GAHU,EAIjBC,IAJiB,CAIZ,WAJY,EAIC,UAASpD,CAAT,EAAWC,CAAX,EAAa;AAC5B,WAAO,eAAasC,MAAM,CAACtC,CAAD,CAAnB,GAAuB,GAA9B;AACH,GANiB,CAAlB,CAxHyC,CAgIzC;;AACA8D,EAAAA,SAAS,CAAC7B,SAAV,CAAoB,YAApB,EACCxC,IADD,CACM,UAASM,CAAT,EAAWC,CAAX,EAAa;AAAE,WAAOD,CAAC,CAACuB,MAAF,CAAS0C,MAAT,CAAgB,UAAStD,EAAT,EAAYC,EAAZ,EAAe;AACvD,aAAOD,EAAE,CAACY,MAAH,KAAY,KAAnB;AACH,KAF2B,CAAP;AAElB,GAHH,EAICyC,KAJD,GAKCb,MALD,CAKQ,MALR,EAMCC,IAND,CAMM,OANN,EAMe,WANf,EAOCA,IAPD,CAOM,GAPN,EAOYf,QAAQ,GAACC,UAPrB,EAQCc,IARD,CAQM,GARN,EAQW,UAASpD,CAAT,EAAWC,CAAX,EAAa;AACpB,UAAMiE,aAAa,GAAGlF,EAAE,CAACiD,MAAH,CAAU,KAAKkC,UAAf,EAA2BC,KAA3B,GAAmCvD,eAAnC,GAAqD7B,EAAE,CAACiD,MAAH,CAAU,KAAKkC,UAAf,EAA2BC,KAA3B,GAAmCjD,GAAnC,CAAuCZ,SAAlH;AACA,QAAI8D,EAAE,GAAG,CAAT;;AACA,QAAGpE,CAAC,GAAC,CAAL,EAAO;AACH,WAAI,IAAIW,EAAE,GAAC,CAAX,EAAaA,EAAE,IAAEX,CAAjB,EAAmBW,EAAE,EAArB,EAAwB;AACpB,YAAGjB,OAAO,CAACiC,aAAR,KAAwB,YAA3B,EAAyCyC,EAAE,IAAIrF,EAAE,CAACiD,MAAH,CAAU,KAAKkC,UAAf,EAA2BC,KAA3B,GAAmC7C,MAAnC,CAA0CX,EAAE,GAAC,CAA7C,EAAgDH,gBAAtD;AACzC,YAAGd,OAAO,CAACiC,aAAR,KAAwB,gBAA3B,EAA6CyC,EAAE,IAAIrF,EAAE,CAACiD,MAAH,CAAU,KAAKkC,UAAf,EAA2BC,KAA3B,GAAmC7C,MAAnC,CAA0CX,EAAE,GAAC,CAA7C,EAAgDL,SAAtD;AAC7C,YAAGZ,OAAO,CAACiC,aAAR,KAAwB,SAA3B,EAAsCyC,EAAE,IAAIrF,EAAE,CAACiD,MAAH,CAAU,KAAKkC,UAAf,EAA2BC,KAA3B,GAAmC7C,MAAnC,CAA0CX,EAAE,GAAC,CAA7C,EAAgDL,SAAtD;AACzC;AACJ;;AACD,QAAI+D,CAAC,GAAG,CAAR;AACA,QAAG3E,OAAO,CAACiC,aAAR,KAAwB,YAA3B,EAAyC0C,CAAC,GAAI,MAAI3B,WAAW,CAAC3C,CAAC,CAACS,gBAAH,CAAf,GAAqCkC,WAAW,CAAC0B,EAAD,CAArD;AACzC,QAAG1E,OAAO,CAACiC,aAAR,KAAwB,gBAA3B,EAA6C0C,CAAC,GAAI,MAAI3B,WAAW,CAAC3C,CAAC,CAACO,SAAH,CAAf,GAA8BoC,WAAW,CAAC0B,EAAD,CAA9C;AAC7C,QAAG1E,OAAO,CAACiC,aAAR,KAAwB,SAA3B,EAAsC0C,CAAC,GAAI,MAAK,OAAKtE,CAAC,CAACO,SAAF,GAAY2D,aAAjB,CAAL,GAAwC,OAAKG,EAAE,GAACH,aAAR,CAA7C;;AACtC,QAAGI,CAAH,EAAK;AAAE,aAAOA,CAAP;AAAW,KAAlB,MAAwB;AAAE,aAAO,CAAP;AAAS;;AAAA;AACtC,GAvBD,EAwBClB,IAxBD,CAwBM,OAxBN,EAwBef,QAAQ,GAAEA,QAAQ,GAACC,UAAT,GAAoB,CAxB7C,EAyBCc,IAzBD,CAyBM,QAzBN,EAyBgB,UAASpD,CAAT,EAAWC,CAAX,EAAa;AACzB,UAAMiE,aAAa,GAAGlF,EAAE,CAACiD,MAAH,CAAU,KAAKkC,UAAf,EAA2BC,KAA3B,GAAmCvD,eAAnC,GAAqD7B,EAAE,CAACiD,MAAH,CAAU,KAAKkC,UAAf,EAA2BC,KAA3B,GAAmCjD,GAAnC,CAAuCZ,SAAlH;AACA,QAAI+D,CAAC,GAAG,CAAR;AACA,QAAG3E,OAAO,CAACiC,aAAR,KAAwB,YAA3B,EAAyC0C,CAAC,GAAG3B,WAAW,CAAC3C,CAAC,CAACS,gBAAH,CAAf;AACzC,QAAGd,OAAO,CAACiC,aAAR,KAAwB,gBAA3B,EAA6C0C,CAAC,GAAG3B,WAAW,CAAC3C,CAAC,CAACO,SAAH,CAAf;AAC7C,QAAGZ,OAAO,CAACiC,aAAR,KAAwB,SAA3B,EAAsC0C,CAAC,GAAI,OAAKtE,CAAC,CAACO,SAAF,GAAY2D,aAAjB,CAAL;;AACtC,QAAGI,CAAH,EAAK;AAAE,aAAOA,CAAP;AAAW,KAAlB,MAAwB;AAAE,aAAO,CAAP;AAAS;;AAAA;AACtC,GAhCD,EAiCClB,IAjCD,CAiCM,MAjCN,EAiCc,UAASpD,CAAT,EAAWC,CAAX,EAAa;AACvB,WAAOf,MAAM,CAACU,OAAP,CAAeI,CAAC,CAACuB,MAAjB,CAAP;AACH,GAnCD,EAjIyC,CAsKzC;;AACAwC,EAAAA,SAAS,CAAC7B,SAAV,CAAoB,aAApB,EACCxC,IADD,CACM,UAASM,CAAT,EAAWC,CAAX,EAAa;AAAE,WAAOD,CAAC,CAACuB,MAAF,CAAS0C,MAAT,CAAgB,UAAStD,EAAT,EAAYC,EAAZ,EAAe;AACvD,aAAOD,EAAE,CAACY,MAAH,KAAY,KAAnB;AACH,KAF2B,CAAP;AAElB,GAHH,EAICyC,KAJD,GAKCb,MALD,CAKQ,MALR,EAMCC,IAND,CAMM,OANN,EAMe,YANf,EAOCA,IAPD,CAOM,GAPN,EAOYf,QAAQ,GAACC,UAPrB,EAQCc,IARD,CAQM,GARN,EAQW,UAASpD,CAAT,EAAWC,CAAX,EAAa;AACpB,UAAMsE,cAAc,GAAGvF,EAAE,CAACiD,MAAH,CAAU,KAAKkC,UAAf,EAA2BC,KAA3B,GAAmC/C,gBAAnC,GAAsDrC,EAAE,CAACiD,MAAH,CAAU,KAAKkC,UAAf,EAA2BC,KAA3B,GAAmCjD,GAAnC,CAAuCX,UAApH;AACA,QAAI6D,EAAE,GAAG,CAAT;;AACA,QAAGpE,CAAC,GAAC,CAAL,EAAO;AACH,WAAI,IAAIW,EAAE,GAAC,CAAX,EAAaA,EAAE,IAAEX,CAAjB,EAAmBW,EAAE,EAArB,EAAwB;AACpB,YAAGjB,OAAO,CAACiC,aAAR,KAAwB,YAA3B,EAAyCyC,EAAE,IAAIrF,EAAE,CAACiD,MAAH,CAAU,KAAKkC,UAAf,EAA2BC,KAA3B,GAAmC7C,MAAnC,CAA0CX,EAAE,GAAC,CAA7C,EAAgDF,iBAAtD;AACzC,YAAGf,OAAO,CAACiC,aAAR,KAAwB,gBAA3B,EAA6CyC,EAAE,IAAIrF,EAAE,CAACiD,MAAH,CAAU,KAAKkC,UAAf,EAA2BC,KAA3B,GAAmC7C,MAAnC,CAA0CX,EAAE,GAAC,CAA7C,EAAgDJ,UAAtD;AAC7C,YAAGb,OAAO,CAACiC,aAAR,KAAwB,SAA3B,EAAsCyC,EAAE,IAAIrF,EAAE,CAACiD,MAAH,CAAU,KAAKkC,UAAf,EAA2BC,KAA3B,GAAmC7C,MAAnC,CAA0CX,EAAE,GAAC,CAA7C,EAAgDJ,UAAtD;AACzC;AACJ;;AACD,QAAI8D,CAAC,GAAG,CAAR;AACA,QAAG3E,OAAO,CAACiC,aAAR,KAAwB,YAA3B,EAAyC0C,CAAC,GAAI,MAAIlF,YAAY,CAACY,CAAC,CAACU,iBAAH,CAAhB,GAAuCtB,YAAY,CAACiF,EAAD,CAAnD,GAAyD,GAA9D;AACzC,QAAG1E,OAAO,CAACiC,aAAR,KAAwB,gBAA3B,EAA6C0C,CAAC,GAAI,MAAIlF,YAAY,CAACY,CAAC,CAACQ,UAAH,CAAhB,GAAgCpB,YAAY,CAACiF,EAAD,CAA5C,GAAkD,GAAvD;AAC7C,QAAG1E,OAAO,CAACiC,aAAR,KAAwB,SAA3B,EAAsC0C,CAAC,GAAI,MAAK,OAAKtE,CAAC,CAACQ,UAAF,GAAa+D,cAAlB,CAAL,GAA0C,OAAKF,EAAE,GAACE,cAAR,CAA1C,GAAoE,GAAzE;;AACtC,QAAGD,CAAH,EAAK;AAAE,aAAOA,CAAP;AAAW,KAAlB,MAAwB;AAAE,aAAO,CAAP;AAAS;;AAAA;AACtC,GAvBD,EAwBClB,IAxBD,CAwBM,OAxBN,EAwBef,QAAQ,GAAEA,QAAQ,GAACC,UAAT,GAAoB,CAxB7C,EAyBCc,IAzBD,CAyBM,QAzBN,EAyBgB,UAASpD,CAAT,EAAWC,CAAX,EAAa;AACzB,UAAMsE,cAAc,GAAGvF,EAAE,CAACiD,MAAH,CAAU,KAAKkC,UAAf,EAA2BC,KAA3B,GAAmC/C,gBAAnC,GAAsDrC,EAAE,CAACiD,MAAH,CAAU,KAAKkC,UAAf,EAA2BC,KAA3B,GAAmCjD,GAAnC,CAAuCX,UAApH;AACA,QAAI8D,CAAC,GAAG,CAAR;AACA,QAAG3E,OAAO,CAACiC,aAAR,KAAwB,YAA3B,EAAyC0C,CAAC,GAAGlF,YAAY,CAACY,CAAC,CAACU,iBAAH,CAAhB;AACzC,QAAGf,OAAO,CAACiC,aAAR,KAAwB,gBAA3B,EAA6C0C,CAAC,GAAGlF,YAAY,CAACY,CAAC,CAACQ,UAAH,CAAhB;AAC7C,QAAGb,OAAO,CAACiC,aAAR,KAAwB,SAA3B,EAAsC0C,CAAC,GAAI,OAAKtE,CAAC,CAACQ,UAAF,GAAa+D,cAAlB,CAAL;;AACtC,QAAGD,CAAH,EAAK;AAAE,aAAOA,CAAP;AAAW,KAAlB,MAAwB;AAAE,aAAO,CAAP;AAAS;;AAAA;AACtC,GAhCD,EAiCClB,IAjCD,CAiCM,MAjCN,EAiCc,UAASpD,CAAT,EAAWC,CAAX,EAAa;AACvB,WAAOf,MAAM,CAACU,OAAP,CAAeI,CAAC,CAACuB,MAAjB,CAAP;AACH,GAnCD,EAvKyC,CA4MzC;AAEA;AAEA;AAEA;AAGA;AAEH;AAED,OAAO,SAASiD,eAAT,CAAyB9E,IAAzB,EAA+B;AAElC+E,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AAEH;AAED,eAAejF,aAAf","sourcesContent":["import * as d3 from \"d3\";\nimport moment from 'moment';\nimport colors from './colors';\n\nlet yScalecases;\nlet yScaleDeaths;\nlet yScaleVaccines;\nlet yAxisCases;\nlet yAxisDeaths;\nlet yAxisVaccines;\n\nexport function drawTimechart(data, options) {\n\n    const regions = ['AF', 'ME', 'AP', 'EU', 'AM', 'OTH'];\n\n    const groupedData = [];\n\n    data.who_data.forEach(function(d,i){\n        if(!groupedData[d[options.timeline_frequency+'Total']])groupedData[d[options.timeline_frequency+'Total']] = {};\n        if(options.timeline_frequency==='day') groupedData[d[options.timeline_frequency+'Total']].date = d.date;\n        if(options.timeline_frequency==='week') groupedData[d[options.timeline_frequency+'Total']].date = moment(d.date).startOf('isoWeek').toDate();\n        if(options.timeline_frequency==='month') groupedData[d[options.timeline_frequency+'Total']].date = moment(d.date).startOf('month').toDate();\n        if(!groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region]) groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region] = {new_cases: 0, new_deaths: 0, cumulative_cases: 0, cumulative_deaths: 0};\n        groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].new_cases += d.new_cases;\n        groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].new_deaths += d.new_deaths;\n        groupedData[d[options.timeline_frequency+'Total']][d.ifrc_region].cumulative_cases = 0;\n    });\n\n    // totals by date\n    groupedData.forEach(function(d,i){\n        regions.forEach(function(dd,ii){\n            // if(dd!=='OTH') d.region.push({'region': dd, 'new_cases': d[dd].new_cases, 'new_deaths': d[dd].new_deaths, 'cumulative_cases': d[dd].cumulative_cases, 'cumulative_deaths': d[dd].cumulative_deaths});\n            if(i>0){\n                d[dd].cumulative_cases = groupedData[i][dd].new_cases + groupedData[i-1][dd].cumulative_cases;\n                d[dd].cumulative_deaths = groupedData[i][dd].new_deaths + groupedData[i-1][dd].cumulative_deaths;\n            } else {\n                d[dd].cumulative_cases = groupedData[i][dd].new_cases;\n                d[dd].cumulative_deaths = groupedData[i][dd].new_deaths;\n            }\n        })\n\n        d.total_new_cases = d.AF.new_cases + d.AP.new_cases + d.AM.new_cases + d.EU.new_cases + d.ME.new_cases + d.OTH.new_cases; \n        d.total_cumulative_cases = d.AF.cumulative_cases + d.AP.cumulative_cases + d.AM.cumulative_cases + d.EU.cumulative_cases + d.ME.cumulative_cases + d.OTH.cumulative_cases; \n        d.total_new_deaths = d.AF.new_deaths + d.AP.new_deaths + d.AM.new_deaths + d.EU.new_deaths + d.ME.new_deaths + d.OTH.new_deaths; \n        d.total_cumulative_deaths = d.AF.cumulative_deaths + d.AP.cumulative_deaths + d.AM.cumulative_deaths + d.EU.cumulative_deaths + d.ME.cumulative_deaths + d.OTH.cumulative_deaths; \n        d.region = [];\n\n        regions.forEach(function(dd,ii){\n            d.region.push({'region': dd, 'new_cases': d[dd].new_cases, 'new_deaths': d[dd].new_deaths, 'cumulative_cases': d[dd].cumulative_cases, 'cumulative_deaths': d[dd].cumulative_deaths});\n        })\n\n    })\n\n    const numIntervals = d3.max(data.who_data, function(d,i){\n        return d[options.timeline_frequency+'Total'];\n    });\n\n    const maxCases = d3.max(groupedData, function(d,i){\n        if(options.timeline_type==='non-cumulative') return d.total_new_cases;\n        if(options.timeline_type==='cumulative') return d.total_cumulative_cases;\n        if(options.timeline_type==='stacked') return 100;\n    })\n\n    const maxDeaths = d3.max(groupedData, function(d,i){\n        if(options.timeline_type==='non-cumulative') return d.total_new_deaths;\n        if(options.timeline_type==='cumulative') return d.total_cumulative_deaths;\n        if(options.timeline_type==='stacked') return 100;\n    })\n\n    // define date range\n    const minDate = groupedData[0].date;\n    const maxDate = groupedData[numIntervals].date;\n\n    const svg = d3.select('#timechart_svg');\n    svg.selectAll('g').remove();\n\n    const width = 2000;\n    const barWidth = width/numIntervals;\n\n    let barSpacing = 0.04; \n    if(options.timeline_frequency==='month') barSpacing = 0.03;\n    if(options.timeline_frequency==='day') barSpacing = 0;\n\n    // define scales\n\n    const xScale = d3.scaleLinear()\n    .range([0,width])\n    .domain([0,numIntervals]);\n\n    yScaleCases = d3.scaleLinear()\n    .range([0,140])\n    .domain([0,maxCases]);\n\n    yScaleDeaths = d3.scaleLinear()\n    .range([0,140])\n    .domain([0,maxDeaths]);\n\n    // yScaleVaccines = d3.scaleLinear()\n    // .range([0,140])\n    // .domain([0,maxDeaths]);\n\n    // define axi\n    \n    yAxisCases = d3.axisRight()\n    .scale(yScaleCases)\n    .ticks(3)\n    .tickSize(0)\n    .tickPadding(8);\n\n    yAxisDeaths = d3.axisRight()\n    .scale(yScaleDeaths)\n    .ticks(3)\n    .tickSize(0)\n    .tickPadding(8);\n\n    // yAxisVaccines = d3.axisRight()\n    // .scale(yScaleVaccines)\n    // .ticks(3)\n    // .tickSize(0)\n    // .tickPadding(8);\n\n    // y-axis\n    var yAxisText = svgBg.append(\"g\")\n    .attr(\"class\", \"yAxis axis\")\n    .attr(\"id\", \"timechartyAxis\")\n    .attr('transform', 'translate('+(margin.left-1)+','+margin.top+')')\n    .call(timechartyAxis)\n    .style('font-size', options.yAxis.font.values.size);\n\n    // CASES\n    // loop through groupedData and draw bars\n    const barGroups = svg.selectAll('.bar_group')\n    .data(groupedData)\n    .enter()\n    .append('g')\n    .attr('transform', function(d,i){ \n        return 'translate('+xScale(i)+')'\n    })\n\n    // CASES\n    barGroups.selectAll('.cases_bar')\n    .data(function(d,i){ return d.region.filter(function(dd,ii){\n        return dd.region!=='OTH';\n    })})\n    .enter()\n    .append('rect')\n    .attr('class', 'cases_bar')\n    .attr('x', (barWidth*barSpacing))\n    .attr('y', function(d,i){\n        const totalNewCases = d3.select(this.parentNode).datum().total_new_cases - d3.select(this.parentNode).datum().OTH.new_cases;\n        let dp = 0;\n        if(i>0){\n            for(let ii=1;ii<=i;ii++){\n                if(options.timeline_type==='cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].cumulative_cases;\n                if(options.timeline_type==='non-cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].new_cases;\n                if(options.timeline_type==='stacked') dp += d3.select(this.parentNode).datum().region[ii-1].new_cases;\n            }\n        }\n        let y = 0;\n        if(options.timeline_type==='cumulative') y = (140-yScaleCases(d.cumulative_cases)-(yScaleCases(dp)))\n        if(options.timeline_type==='non-cumulative') y = (140-yScaleCases(d.new_cases)-(yScaleCases(dp)))\n        if(options.timeline_type==='stacked') y = (140-(140*(d.new_cases/totalNewCases))-((140*(dp/totalNewCases))))\n        if(y){ return y; } else { return 0};\n    })\n    .attr('width', barWidth-(barWidth*barSpacing*2))\n    .attr('height', function(d,i){\n        const totalNewCases = d3.select(this.parentNode).datum().total_new_cases - d3.select(this.parentNode).datum().OTH.new_cases;\n        let y = 0;\n        if(options.timeline_type==='cumulative') y = yScaleCases(d.cumulative_cases);\n        if(options.timeline_type==='non-cumulative') y = yScaleCases(d.new_cases);\n        if(options.timeline_type==='stacked') y = (140*(d.new_cases/totalNewCases));\n        if(y){ return y; } else { return 0};\n    })\n    .attr('fill', function(d,i){\n        return colors.regions[d.region];\n    })\n\n    // DEATHS\n    barGroups.selectAll('.deaths_bar')\n    .data(function(d,i){ return d.region.filter(function(dd,ii){\n        return dd.region!=='OTH';\n    })})\n    .enter()\n    .append('rect')\n    .attr('class', 'deaths_bar')\n    .attr('x', (barWidth*barSpacing))\n    .attr('y', function(d,i){\n        const totalNewDeaths = d3.select(this.parentNode).datum().total_new_deaths - d3.select(this.parentNode).datum().OTH.new_deaths;\n        let dp = 0;\n        if(i>0){\n            for(let ii=1;ii<=i;ii++){\n                if(options.timeline_type==='cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].cumulative_deaths;\n                if(options.timeline_type==='non-cumulative') dp += d3.select(this.parentNode).datum().region[ii-1].new_deaths;\n                if(options.timeline_type==='stacked') dp += d3.select(this.parentNode).datum().region[ii-1].new_deaths;\n            }\n        }\n        let y = 0;\n        if(options.timeline_type==='cumulative') y = (140-yScaleDeaths(d.cumulative_deaths)-(yScaleDeaths(dp))+170)\n        if(options.timeline_type==='non-cumulative') y = (140-yScaleDeaths(d.new_deaths)-(yScaleDeaths(dp))+170)\n        if(options.timeline_type==='stacked') y = (140-(140*(d.new_deaths/totalNewDeaths))-((140*(dp/totalNewDeaths)))+170)\n        if(y){ return y; } else { return 0};\n    })\n    .attr('width', barWidth-(barWidth*barSpacing*2))\n    .attr('height', function(d,i){\n        const totalNewDeaths = d3.select(this.parentNode).datum().total_new_deaths - d3.select(this.parentNode).datum().OTH.new_deaths;\n        let y = 0;\n        if(options.timeline_type==='cumulative') y = yScaleDeaths(d.cumulative_deaths);\n        if(options.timeline_type==='non-cumulative') y = yScaleDeaths(d.new_deaths);\n        if(options.timeline_type==='stacked') y = (140*(d.new_deaths/totalNewDeaths));\n        if(y){ return y; } else { return 0};\n    })\n    .attr('fill', function(d,i){\n        return colors.regions[d.region];\n    })\n\n    // 10\n\n    // 0.1\n\n    // 1 - 8 - 1\n    \n    // draw x-axis\n\n\n    // draw y-axis\n\n}\n\nexport function updateTimechart(data) {\n\n    console.log('update timechart');\n\n}\n\nexport default drawTimechart;\n"]},"metadata":{},"sourceType":"module"}