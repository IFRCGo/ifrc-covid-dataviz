{"ast":null,"code":"import * as d3 from \"d3\";\nimport moment from 'moment';\nimport colors from './colors';\nimport { addCommas } from './HelperFunctions';\nimport { filter } from './App';\nlet maxCases;\nlet maxDeaths;\nlet maxVaccinations;\nlet xScaleCases;\nlet xScaleDeaths;\nlet xScaleVaccines;\nlet labelWidth;\nconst margin = {\n  left: 20,\n  top: 0,\n  right: 58\n};\nlet rcSize;\nlet groupedData = [];\nexport function drawRegionchart(data, options, filter) {\n  const barSpacing = 0.1;\n  data.regions.forEach(function (d, i) {\n    d = {\n      code: d.code,\n      cumulative_cases: 0,\n      cumulative_deaths: 0,\n      cumulative_vaccines: 0,\n      population: 0\n    };\n  });\n  data.country.forEach(function (d, i) {\n    if (i < 10) console.log(d);\n    data.regions.forEach(function (dd, ii) {\n      if (dd.code == d.ifrc_region) {\n        // remove OTH\n        if (d.population > 0 && d.who_daily_latest) {\n          if (d.who_daily_latest.cumulative_cases > 0) dd.cumulative_cases += d.who_daily_latest.cumulative_cases;\n          if (d.who_daily_latest.cumulative_deaths > 0) dd.cumulative_deaths += d.who_daily_latest.cumulative_deaths || 0;\n          dd.population += d.population;\n        }\n\n        if (d.population > 0 && d.vaccine_daily_latest) {\n          dd.cumulative_vaccines += d.vaccine_daily_latest.total_vaccinations || 0;\n        }\n      }\n    });\n  });\n  data.regions.forEach(function (d, i) {\n    d.cumulative_cases_per_100k = d.cumulative_cases / (d.population / 100000);\n    d.cumulative_deaths_per_100k = d.cumulative_deaths / (d.population / 100000);\n    d.cumulative_vaccines_per_100k = d.cumulative_vaccines / (d.population / 100000);\n    if (!isFinite(d.cumulative_cases_per_100k)) d.cumulative_cases_per_100k = 0;\n    if (!isFinite(d.cumulative_deaths_per_100k)) d.cumulative_deaths_per_100k = 0;\n    if (!isFinite(d.cumulative_vaccines_per_100k)) d.cumulative_vaccines_per_100k = 0;\n  });\n  data.regions.sort(function (a, b) {\n    return a.cumulative_cases_per_100k - b.cumulative_cases_per_100k;\n  });\n  console.log(data.regions);\n  maxVaccinations = d3.max(data.regions, function (d, i) {\n    return d.cumulative_vaccines_per_100k;\n  });\n  maxCases = d3.max(data.regions, function (d, i) {\n    return d.cumulative_cases_per_100k;\n  });\n  maxDeaths = d3.max(data.regions, function (d, i) {\n    return d.cumulative_deaths_per_100k;\n  }); // append region chart containerg\n\n  const regionChartContainer = d3.select('#layout #region_chart_container').attr('opacity', 0);\n  rcSize = {\n    x: regionChartContainer.attr('x'),\n    y: regionChartContainer.attr('y'),\n    width: regionChartContainer.attr('width'),\n    height: regionChartContainer.attr('height')\n  };\n  const svg = d3.select('#layout').append('g').attr('transform', 'translate(' + rcSize.x + ', ' + rcSize.y + ')').attr('id', 'region_chart');\n  var rowHeight = rcSize.height / (data.regions.length - 1); // remove OTH\n\n  var rows = svg.selectAll('.bar-row').data(data.regions.filter(d => d.code !== 'OTH')).enter().append('g').attr('class', 'bar-row').attr('transform', function (d, i) {\n    return 'translate(0,' + (i * rowHeight + margin.top) + ')';\n  });\n  data.cumulative_totals = data.regions;\n  var label = rows.append('text').attr('y', rowHeight / 2).attr('x', margin.left - 5).attr('class', function (d, i) {\n    return 'bar-labels bar-label-' + d.code;\n  }).style('alignment-baseline', 'middle').style('font-size', '11px').attr('opacity', 1).attr('fill', '#000').text(function (d, i) {\n    if (d.code === 'AM') return 'Americas';\n    if (d.code === 'EU') return 'Europe';\n    if (d.code === 'AF') return 'Africa';\n    if (d.code === 'ME') return 'Middle East and North Africa';\n    if (d.code === 'AP') return 'Asia-Pacific';\n  }).style('text-anchor', 'end');\n  labelWidth = rows.node().getBBox().width + margin.left;\n  label.attr('x', labelWidth + 89);\n  labelWidth = labelWidth + 94;\n  d3.selectAll('.timeBar').attr('opacity', 1);\n  var rowBg = rows.append('rect').attr('y', 0).attr('x', 0).attr('width', labelWidth).attr('height', rowHeight - 2).style('opacity', 0).attr('fill', 'grey').style('cursor', 'pointer').attr('class', function (d, i) {\n    return 'bar-bg-' + d.code;\n  }).attr('data-id', function (d, i) {\n    return d.code;\n  }).on('mouseover', function (d) {\n    d3.select(this).style('opacity', 0.1); // var dat = d3.select(this.parentNode).datum();\n    // d3.selectAll('.timeBar:not(.time_'+dat.region).transition().duration(500).attr('opacity', 0.3);\n    // d3.selectAll('.time_'+dat.region).attr('opacity', 1);\n  }).on('mouseout', function () {\n    d3.select(this).style('opacity', 0); // d3.selectAll('.timeBar').transition().duration(500).attr('opacity', 1);\n  }).on('click', function (d, i) {\n    var t = d3.select(this).attr('data-id');\n    filter([t], 'regionchart');\n  });\n  xScaleCases = d3.scaleLinear().range([0, rcSize.width - margin.right - labelWidth]).domain([0, maxCases]);\n  xScaleDeaths = d3.scaleLinear().range([0, rcSize.width - margin.right - labelWidth]).domain([0, maxDeaths]);\n  xScaleVaccines = d3.scaleLinear().range([labelWidth, rcSize.width - margin.right - labelWidth]).domain([0, maxVaccinations]);\n  var bars = rows.append('rect').attr('id', function (d, i) {\n    return 'bar-' + d.code;\n  }).attr('data-id', function (d, i) {\n    return d.code;\n  }).attr('class', 'region-bar').attr('width', function (d, i) {\n    if (options.region_chart_toggle == 'cases') return xScaleCases(d.cumulative_cases_per_100k);\n    if (options.region_chart_toggle == 'deaths') return xScaleDeaths(d.cumulative_deaths_per_100k);\n    if (options.region_chart_toggle == 'vaccines') return xScaleDeaths(d.cumulative_vaccines_per_100k);\n  }).attr('x', labelWidth).style('outline', 'none').style('cursor', 'pointer').attr('y', rowHeight * barSpacing - 1).attr('height', rowHeight - rowHeight * barSpacing * 2).style('fill', function (d) {\n    return colors.regions[d.code];\n  }).attr('opacity', 1).on('click', function (d, i) {\n    var t = d3.select(this).attr('data-id');\n    filter([t], 'regionchart');\n  }).on('mouseover', function (d) {\n    var dat = d3.select(this.parentNode).datum(); // d3.selectAll('.timeBar:not(.time_'+dat.region).transition().duration(500).attr('opacity', 0.3);\n    // d3.selectAll('.time_'+dat.region).attr('opacity', 1);\n  }).on('mouseout', function () {// d3.selectAll('.timeBar').transition().duration(500).attr('opacity', 1);\n  });\n  var dataLabel = rows.append('text').text(function (d) {\n    if (options.region_chart_toggle == 'cases') return addCommas(Math.round(d.cumulative_cases_per_100k));\n    if (options.region_chart_toggle == 'deaths') return addCommas(Math.round(d.cumulative_deaths_per_100k));\n    if (options.region_chart_toggle == 'vaccines') return addCommas(Math.round(d.cumulative_vaccines_per_100k));\n  }).attr('id', function (d, i) {\n    return 'data-label' + d.code;\n  }).attr('data-id', function (d, i) {\n    return d.code;\n  }).attr('class', 'data-label').attr('y', rowHeight / 2).style('alignment-baseline', 'middle').style('text-anchor', 'start').attr('x', function (d, i) {\n    if (options.region_chart_toggle == 'cases') return xScaleCases(d.cumulative_cases_per_100k) + labelWidth + 5;\n    if (options.region_chart_toggle == 'deaths') return xScaleDeaths(d.cumulative_deaths_per_100k) + labelWidth + 5;\n    if (options.region_chart_toggle == 'vaccines') return xScaleVaccines(d.cumulative_vaccines_per_100k) + labelWidth + 5;\n  }).attr('opacity', function (d, i) {\n    var val = 0;\n    if (options.region_chart_toggle == 'cases') val = d.cumulative_cases_per_100k;\n    if (options.region_chart_toggle == 'deaths') val = d.cumulative_deaths_per_100k;\n    if (options.region_chart_toggle == 'vaccines') val = d.cumulative_vaccines_per_100k;\n\n    if (val > 0) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }).style('fill', '#696969').style('font-weight', 'normal').style('font-size', '10px');\n}\nexport function updateRegionchart(options, data) {// groupedData = [];\n  // data.regions.forEach(function(d,i){\n  //     groupedData.push({ region: d.code, cumulative_cases: 0, cumulative_deaths: 0, cumulative_vaccines: 0, population: d.population});\n  // })\n  // data.who_data.forEach(function(d,i){\n  //     data.regions.forEach(function(dd,ii){\n  //         if((dd.code==d.ifrc_region)){ // remove OTH\n  //             groupedData[ii].cumulative_cases += d.new_cases;\n  //             groupedData[ii].cumulative_deaths += d.new_deaths;\n  //         }\n  //     });\n  // });\n  // // vaccinations max date records\n  // var vGroup = d3.flatGroup(data.vaccines_data_cumulative, d => d.date);\n  // var vacGrouped = vGroup[vGroup.length-1];\n  // var vData = [];\n  // vacGrouped[1].forEach(function(d,i){\n  //     regions.forEach(function(dd,ii){\n  //         if((dd==d.ifrc_region)&&(dd!='OTH')){ // remove OTH\n  //             groupedData[ii].cumulative_vaccines += d.total_vaccinations;\n  //         }\n  //     })\n  // });\n  // groupedData.forEach(function(d,i){\n  //     d.cumulative_cases_per_100k = d.cumulative_cases/(d.population/100000)\n  //     d.cumulative_deaths_per_100k = d.cumulative_deaths/(d.population/100000);\n  //     d.cumulative_vaccines_per_100k = d.cumulative_vaccines/(d.population/100000);\n  //     if(!isFinite(d.cumulative_cases_per_100k)) d.cumulative_cases_per_100k = 0;\n  //     if(!isFinite(d.cumulative_deaths_per_100k)) d.cumulative_deaths_per_100k = 0;\n  //     if(!isFinite(d.cumulative_vaccines_per_100k)) d.cumulative_vaccines_per_100k = 0;\n  // })\n  // groupedData.sort(function(a,b){\n  //     if(options.region_chart_toggle == 'cases') return (b.cumulative_cases_per_100k) - (a.cumulative_cases_per_100k);\n  //     if(options.region_chart_toggle == 'deaths') return (b.cumulative_deaths_per_100k) - (a.cumulative_deaths_per_100k);\n  //     if(options.region_chart_toggle == 'vaccines') return (b.cumulative_vaccines_per_100k) - (a.cumulative_vaccines_per_100k); \n  // });\n  // maxVaccinations = d3.max(groupedData, function(d,i){\n  //     return d.cumulative_vaccines_per_100k;\n  // })\n  // maxCases = d3.max(groupedData, function(d,i){\n  //     return d.cumulative_cases_per_100k;\n  // })\n  // maxDeaths = d3.max(groupedData, function(d,i){\n  //     return d.cumulative_deaths_per_100k;\n  // });\n  // xScaleCases = d3.scaleLinear()\n  // .range([0, rcSize.width - margin.right - labelWidth])\n  // .domain([0, maxCases]);\n  // xScaleDeaths = d3.scaleLinear()\n  // .range([0, rcSize.width - margin.right - labelWidth])\n  // .domain([0, maxDeaths]);\n  // xScaleVaccines = d3.scaleLinear()\n  // .range([0, rcSize.width - margin.right - labelWidth])\n  // .domain([0, maxVaccinations]);\n  // if((maxVaccinations==0)&&(maxCases==0)&&(maxDeaths==0)){\n  //     d3.selectAll('.region-bar')\n  //     .transition().duration(500)\n  //     .attr('width', 0);\n  //     d3.selectAll('.data-label')\n  //     .transition()\n  //       .duration(500) \n  //       .attr('x', labelWidth)\n  //       .attr('opacity', 0);\n  // } else {\n  //     d3.selectAll('.region-bar')\n  //     .transition().duration(500)\n  //     .attr('width', function(d,i){\n  //         var id = d3.select(this).attr('data-id');\n  //         var d;\n  //         groupedData.forEach(function(dd,ii){\n  //             if(dd.code == id){\n  //                 d = dd;\n  //             }\n  //         })\n  //         var val = 0;\n  //         if(options.region_chart_toggle == 'cases') val = xScaleCases(d.cumulative_cases_per_100k);\n  //         if(options.region_chart_toggle == 'deaths') val = xScaleDeaths(d.cumulative_deaths_per_100k);\n  //         if(options.region_chart_toggle == 'vaccines') val = xScaleVaccines(d.cumulative_vaccines_per_100k);\n  //         if(!isNaN(val)) { return parseFloat(val) } else { return 0}\n  //     })   \n  //     d3.selectAll('.data-label')\n  //     .transition()\n  //       .duration(500)\n  //       .tween(\"text\", function(d,i) {\n  //         var end = 0;\n  //         var id = d3.select(this).attr('data-id');\n  //         var d;\n  //         groupedData.forEach(function(dd,ii){\n  //             if(dd.code == id){\n  //                 d = dd;\n  //             }\n  //         })\n  //         if(options.region_chart_toggle == 'cases') end = (d.cumulative_cases_per_100k);\n  //         if(options.region_chart_toggle == 'deaths') end = (d.cumulative_deaths_per_100k);  \n  //         if(options.region_chart_toggle == 'vaccines') end = (d.cumulative_vaccines_per_100k);  \n  //         var i = d3.interpolate(Math.floor((Math.random() * 2346) + 9345), end);\n  //         return function(t) {\n  //           d3.select(this).text(addCommas(Math.round(i(t))));\n  //         };\n  //       })\n  //     .attr('x', function(d,i){\n  //         var id = d3.select(this).attr('data-id');\n  //         var d;\n  //         groupedData.forEach(function(dd,ii){\n  //             if(dd.code == id){\n  //                 d = dd;\n  //             }\n  //         })\n  //         if(options.region_chart_toggle == 'cases') return xScaleCases(d.cumulative_cases_per_100k)+labelWidth+5;\n  //         if(options.region_chart_toggle == 'deaths') return xScaleDeaths(d.cumulative_deaths_per_100k)+labelWidth+5;\n  //         if(options.region_chart_toggle == 'vaccines') return xScaleVaccines(d.cumulative_vaccines_per_100k)+labelWidth+5;\n  //     })\n  //     .attr('opacity', function(d,i){\n  //         var d;\n  //         var id = d3.select(this).attr('data-id');\n  //         groupedData.forEach(function(dd,ii){\n  //             if(dd.code == id){\n  //                 d = dd;\n  //             }\n  //         })\n  //         var val = 0;\n  //         if(options.region_chart_toggle == 'cases') val = (d.cumulative_cases_per_100k);\n  //         if(options.region_chart_toggle == 'deaths') val = (d.cumulative_deaths_per_100k);\n  //         if(options.region_chart_toggle == 'vaccines') val = (d.cumulative_vaccines_per_100k);\n  //         if(val>0){ return 1 } else { return 0}\n  //     })\n  // }\n}\nexport default drawRegionchart;","map":{"version":3,"sources":["/Users/matthewsmawfield/www/ifrc-covid-dataviz/src/Regionchart.js"],"names":["d3","moment","colors","addCommas","filter","maxCases","maxDeaths","maxVaccinations","xScaleCases","xScaleDeaths","xScaleVaccines","labelWidth","margin","left","top","right","rcSize","groupedData","drawRegionchart","data","options","barSpacing","regions","forEach","d","i","code","cumulative_cases","cumulative_deaths","cumulative_vaccines","population","country","console","log","dd","ii","ifrc_region","who_daily_latest","vaccine_daily_latest","total_vaccinations","cumulative_cases_per_100k","cumulative_deaths_per_100k","cumulative_vaccines_per_100k","isFinite","sort","a","b","max","regionChartContainer","select","attr","x","y","width","height","svg","append","rowHeight","length","rows","selectAll","enter","cumulative_totals","label","style","text","node","getBBox","rowBg","on","t","scaleLinear","range","domain","bars","region_chart_toggle","dat","parentNode","datum","dataLabel","Math","round","val","updateRegionchart"],"mappings":"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3BY,EA2BG,QA3BH,EA4BlBA,KA5BkB,CA4BZ,WA5BY,EA4BC,MA5BD,CAAhB;AA8BH;AAED,OAAO,SAASmB,iBAAT,CAA2B/D,OAA3B,EAAmCD,IAAnC,EAAyC,CAE5C;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACH;AACA;AAEG;AACH;AACA;AAEG;AACH;AACA;AAEG;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIH;AAED,eAAeD,eAAf","sourcesContent":["import * as d3 from \"d3\";\nimport moment from 'moment';\nimport colors from './colors';\nimport {addCommas} from './HelperFunctions';\nimport {filter} from './App';\n\nlet maxCases;\nlet maxDeaths;\nlet maxVaccinations;\nlet xScaleCases; \nlet xScaleDeaths;\nlet xScaleVaccines;\nlet labelWidth; \nconst margin = { left: 20, top: 0, right: 58 };\nlet rcSize; \nlet groupedData = [];\n\nexport function drawRegionchart(data, options, filter) {\n\n    const barSpacing = 0.1;\n\n    data.regions.forEach(function(d,i){\n        d = { code: d.code, cumulative_cases: 0, cumulative_deaths: 0, cumulative_vaccines: 0, population: 0};\n    })\n\n    data.country.forEach(function(d,i){\n        if(i<10)console.log(d);\n        data.regions.forEach(function(dd,ii){\n            if((dd.code==d.ifrc_region)){ // remove OTH\n                if((d.population>0)&&(d.who_daily_latest)){\n                    if(d.who_daily_latest.cumulative_cases>0)\n                    dd.cumulative_cases += d.who_daily_latest.cumulative_cases;\n                    if(d.who_daily_latest.cumulative_deaths>0)\n                    dd.cumulative_deaths += d.who_daily_latest.cumulative_deaths||0;\n                    dd.population += d.population;\n                }\n                if((d.population>0)&&(d.vaccine_daily_latest)){\n                    dd.cumulative_vaccines += (d.vaccine_daily_latest.total_vaccinations)||0;\n                }\n            }\n        });\n    });\n\n    data.regions.forEach(function(d,i){\n        d.cumulative_cases_per_100k = d.cumulative_cases/(d.population/100000)\n        d.cumulative_deaths_per_100k = d.cumulative_deaths/(d.population/100000);\n        d.cumulative_vaccines_per_100k = d.cumulative_vaccines/(d.population/100000);\n        if(!isFinite(d.cumulative_cases_per_100k)) d.cumulative_cases_per_100k = 0;\n        if(!isFinite(d.cumulative_deaths_per_100k)) d.cumulative_deaths_per_100k = 0;\n        if(!isFinite(d.cumulative_vaccines_per_100k)) d.cumulative_vaccines_per_100k = 0;\n    })\n\n    data.regions.sort(function(a,b){\n        return (a.cumulative_cases_per_100k) - (b.cumulative_cases_per_100k);\n    });\n\n    console.log(data.regions);\n\n\n    maxVaccinations = d3.max(data.regions, function(d,i){\n        return d.cumulative_vaccines_per_100k;\n    })\n\n    maxCases = d3.max(data.regions, function(d,i){\n        return d.cumulative_cases_per_100k;\n    })\n\n    maxDeaths = d3.max(data.regions, function(d,i){\n        return d.cumulative_deaths_per_100k;\n    });\n\n    // append region chart containerg\n    const regionChartContainer = d3.select('#layout #region_chart_container').attr('opacity', 0);\n    rcSize = {\n        x: regionChartContainer.attr('x'), y: regionChartContainer.attr('y'), width: regionChartContainer.attr('width'), height: regionChartContainer.attr('height')\n    }\n\n    const svg = d3.select('#layout').append('g').attr('transform', 'translate('+rcSize.x+', '+rcSize.y+')')\n    .attr('id', 'region_chart');\n\n\tvar rowHeight = rcSize.height/(data.regions.length-1); // remove OTH\n\n\n    var rows = svg.selectAll('.bar-row')\n\t.data(data.regions.filter(d=>d.code!=='OTH'))\n\t.enter()\n\t.append('g')\n\t.attr('class', 'bar-row')\n\t.attr('transform', function(d,i){\n\t\treturn 'translate(0,' + ((i*rowHeight) + margin.top) + ')';\n\t});\n\n    data.cumulative_totals = data.regions;\n    \n    var label = rows.append('text')\n\t.attr('y', rowHeight/2 )\n    .attr('x', margin.left-5)\n\t.attr('class', function(d,i){ return 'bar-labels bar-label-'+d.code })\n\t.style('alignment-baseline', 'middle')\n\t.style('font-size', '11px')\n    .attr('opacity', 1)\n\t.attr('fill', '#000')\n\t.text(function(d,i){\n\t\tif(d.code==='AM') return 'Americas';\n\t\tif(d.code==='EU') return 'Europe';\n\t\tif(d.code==='AF') return 'Africa';\n\t\tif(d.code==='ME') return 'Middle East and North Africa';\n\t\tif(d.code==='AP') return 'Asia-Pacific';\n\t}).style('text-anchor', 'end');\n\n    labelWidth = rows.node().getBBox().width + margin.left;\n\tlabel.attr('x', labelWidth+89);\n\tlabelWidth = labelWidth + 94;\n    d3.selectAll('.timeBar').attr('opacity',1);\n    \n    var rowBg = rows.append('rect')\n\t.attr('y', 0)\n\t.attr('x', 0)\n\t.attr('width', labelWidth)\n\t.attr('height', rowHeight-2)\n\t.style('opacity', 0)\n    .attr('fill', 'grey')\n\t.style('cursor', 'pointer')\n\t.attr('class', function(d,i){ return 'bar-bg-'+d.code })\n\t.attr('data-id', function(d,i){ return d.code })\n\t.on('mouseover', function(d){\n\t\td3.select(this).style('opacity', 0.1);\n        // var dat = d3.select(this.parentNode).datum();\n        // d3.selectAll('.timeBar:not(.time_'+dat.region).transition().duration(500).attr('opacity', 0.3);\n        // d3.selectAll('.time_'+dat.region).attr('opacity', 1);\n\t})\n\t.on('mouseout', function(){\n\t\td3.select(this).style('opacity', 0);\n        // d3.selectAll('.timeBar').transition().duration(500).attr('opacity', 1);\n\t})\n\t.on('click', function(d,i){\n        var t = d3.select(this).attr('data-id');\n        filter([t],'regionchart');\n    });\n\n    xScaleCases = d3.scaleLinear()\n\t.range([0, rcSize.width - margin.right - labelWidth])\n\t.domain([0, maxCases]);\n\n    xScaleDeaths = d3.scaleLinear()\n\t.range([0, rcSize.width - margin.right - labelWidth])\n\t.domain([0, maxDeaths]);\n\n    xScaleVaccines = d3.scaleLinear()\n\t.range([labelWidth, rcSize.width - margin.right - labelWidth])\n\t.domain([0, maxVaccinations]);\n\n    var bars = rows.append('rect')\n    .attr('id', function(d,i){\n        return 'bar-'+d.code;\n    })\n\t.attr('data-id', function(d,i){ return d.code })\n    .attr('class', 'region-bar')\n    .attr('width', function(d,i){\n        if(options.region_chart_toggle == 'cases') return xScaleCases(d.cumulative_cases_per_100k);\n        if(options.region_chart_toggle == 'deaths') return xScaleDeaths(d.cumulative_deaths_per_100k);\n        if(options.region_chart_toggle == 'vaccines') return xScaleDeaths(d.cumulative_vaccines_per_100k);\n    })\n    .attr('x', labelWidth)\n    .style('outline', 'none')\n    .style('cursor', 'pointer')\n    .attr('y', rowHeight*barSpacing - 1)\n    .attr('height', rowHeight-((rowHeight*barSpacing)*2))\n    .style('fill', function(d){\n        return colors.regions[d.code]\n    })\n    .attr('opacity',1)\n    .on('click', function(d,i){\n        var t = d3.select(this).attr('data-id');\n        filter([t],'regionchart');\n    })\n    .on('mouseover', function(d){\n        var dat = d3.select(this.parentNode).datum();\n        // d3.selectAll('.timeBar:not(.time_'+dat.region).transition().duration(500).attr('opacity', 0.3);\n        // d3.selectAll('.time_'+dat.region).attr('opacity', 1);\n\t})\n\t.on('mouseout', function(){\n        // d3.selectAll('.timeBar').transition().duration(500).attr('opacity', 1);\n\t})\n\n    var dataLabel = rows.append('text')\n\t.text(function(d){\n        if(options.region_chart_toggle == 'cases') return addCommas(Math.round(d.cumulative_cases_per_100k));\n        if(options.region_chart_toggle == 'deaths') return addCommas(Math.round(d.cumulative_deaths_per_100k));\n        if(options.region_chart_toggle == 'vaccines') return addCommas(Math.round(d.cumulative_vaccines_per_100k));\n    })\n\t.attr('id', function(d,i){\n\t\treturn 'data-label'+d.code;\n\t})\n    .attr('data-id', function(d,i){ return d.code })\n\t.attr('class', 'data-label')\n\t.attr('y', rowHeight/2)\n\t.style('alignment-baseline', 'middle')\n\t.style('text-anchor', 'start')\n\t.attr('x', function(d,i){\n        if(options.region_chart_toggle == 'cases') return xScaleCases(d.cumulative_cases_per_100k)+labelWidth+5;\n        if(options.region_chart_toggle == 'deaths') return xScaleDeaths(d.cumulative_deaths_per_100k)+labelWidth+5;\n        if(options.region_chart_toggle == 'vaccines') return xScaleVaccines(d.cumulative_vaccines_per_100k)+labelWidth+5;\n    })\n    .attr('opacity', function(d,i){\n        var val = 0;\n        if(options.region_chart_toggle == 'cases') val = (d.cumulative_cases_per_100k);\n        if(options.region_chart_toggle == 'deaths') val = (d.cumulative_deaths_per_100k);\n        if(options.region_chart_toggle == 'vaccines') val = (d.cumulative_vaccines_per_100k);\n        if(val>0){ return 1 } else { return 0}\n    })\n\t.style('fill', '#696969')\n\t.style('font-weight', 'normal')\n\t.style('font-size', '10px');\n\n}\n\nexport function updateRegionchart(options,data) {\n    \n    // groupedData = [];\n\n    // data.regions.forEach(function(d,i){\n    //     groupedData.push({ region: d.code, cumulative_cases: 0, cumulative_deaths: 0, cumulative_vaccines: 0, population: d.population});\n    // })\n\n    // data.who_data.forEach(function(d,i){\n    //     data.regions.forEach(function(dd,ii){\n    //         if((dd.code==d.ifrc_region)){ // remove OTH\n    //             groupedData[ii].cumulative_cases += d.new_cases;\n    //             groupedData[ii].cumulative_deaths += d.new_deaths;\n    //         }\n    //     });\n    // });\n\n    // // vaccinations max date records\n    // var vGroup = d3.flatGroup(data.vaccines_data_cumulative, d => d.date);\n\n    // var vacGrouped = vGroup[vGroup.length-1];\n\n    // var vData = [];\n    // vacGrouped[1].forEach(function(d,i){\n    //     regions.forEach(function(dd,ii){\n    //         if((dd==d.ifrc_region)&&(dd!='OTH')){ // remove OTH\n    //             groupedData[ii].cumulative_vaccines += d.total_vaccinations;\n    //         }\n    //     })\n    // });\n\n    // groupedData.forEach(function(d,i){\n    //     d.cumulative_cases_per_100k = d.cumulative_cases/(d.population/100000)\n    //     d.cumulative_deaths_per_100k = d.cumulative_deaths/(d.population/100000);\n    //     d.cumulative_vaccines_per_100k = d.cumulative_vaccines/(d.population/100000);\n    //     if(!isFinite(d.cumulative_cases_per_100k)) d.cumulative_cases_per_100k = 0;\n    //     if(!isFinite(d.cumulative_deaths_per_100k)) d.cumulative_deaths_per_100k = 0;\n    //     if(!isFinite(d.cumulative_vaccines_per_100k)) d.cumulative_vaccines_per_100k = 0;\n    // })\n\n    // groupedData.sort(function(a,b){\n    //     if(options.region_chart_toggle == 'cases') return (b.cumulative_cases_per_100k) - (a.cumulative_cases_per_100k);\n    //     if(options.region_chart_toggle == 'deaths') return (b.cumulative_deaths_per_100k) - (a.cumulative_deaths_per_100k);\n    //     if(options.region_chart_toggle == 'vaccines') return (b.cumulative_vaccines_per_100k) - (a.cumulative_vaccines_per_100k); \n    // });\n\n    // maxVaccinations = d3.max(groupedData, function(d,i){\n    //     return d.cumulative_vaccines_per_100k;\n    // })\n\n    // maxCases = d3.max(groupedData, function(d,i){\n    //     return d.cumulative_cases_per_100k;\n    // })\n\n    // maxDeaths = d3.max(groupedData, function(d,i){\n    //     return d.cumulative_deaths_per_100k;\n    // });\n\n    // xScaleCases = d3.scaleLinear()\n\t// .range([0, rcSize.width - margin.right - labelWidth])\n\t// .domain([0, maxCases]);\n\n    // xScaleDeaths = d3.scaleLinear()\n\t// .range([0, rcSize.width - margin.right - labelWidth])\n\t// .domain([0, maxDeaths]);\n\n    // xScaleVaccines = d3.scaleLinear()\n\t// .range([0, rcSize.width - margin.right - labelWidth])\n\t// .domain([0, maxVaccinations]);\n\n    // if((maxVaccinations==0)&&(maxCases==0)&&(maxDeaths==0)){\n    //     d3.selectAll('.region-bar')\n    //     .transition().duration(500)\n    //     .attr('width', 0);\n\n    //     d3.selectAll('.data-label')\n    //     .transition()\n    //       .duration(500) \n    //       .attr('x', labelWidth)\n    //       .attr('opacity', 0);\n    // } else {\n    //     d3.selectAll('.region-bar')\n    //     .transition().duration(500)\n    //     .attr('width', function(d,i){\n    //         var id = d3.select(this).attr('data-id');\n    //         var d;\n    //         groupedData.forEach(function(dd,ii){\n    //             if(dd.code == id){\n    //                 d = dd;\n    //             }\n    //         })\n    //         var val = 0;\n    //         if(options.region_chart_toggle == 'cases') val = xScaleCases(d.cumulative_cases_per_100k);\n    //         if(options.region_chart_toggle == 'deaths') val = xScaleDeaths(d.cumulative_deaths_per_100k);\n    //         if(options.region_chart_toggle == 'vaccines') val = xScaleVaccines(d.cumulative_vaccines_per_100k);\n    //         if(!isNaN(val)) { return parseFloat(val) } else { return 0}\n    //     })   \n    //     d3.selectAll('.data-label')\n    //     .transition()\n    //       .duration(500)\n    //       .tween(\"text\", function(d,i) {\n    //         var end = 0;\n    //         var id = d3.select(this).attr('data-id');\n    //         var d;\n    //         groupedData.forEach(function(dd,ii){\n    //             if(dd.code == id){\n    //                 d = dd;\n    //             }\n    //         })\n    //         if(options.region_chart_toggle == 'cases') end = (d.cumulative_cases_per_100k);\n    //         if(options.region_chart_toggle == 'deaths') end = (d.cumulative_deaths_per_100k);  \n    //         if(options.region_chart_toggle == 'vaccines') end = (d.cumulative_vaccines_per_100k);  \n    //         var i = d3.interpolate(Math.floor((Math.random() * 2346) + 9345), end);\n    //         return function(t) {\n    //           d3.select(this).text(addCommas(Math.round(i(t))));\n    //         };\n    //       })\n    //     .attr('x', function(d,i){\n    //         var id = d3.select(this).attr('data-id');\n    //         var d;\n    //         groupedData.forEach(function(dd,ii){\n    //             if(dd.code == id){\n    //                 d = dd;\n    //             }\n    //         })\n    //         if(options.region_chart_toggle == 'cases') return xScaleCases(d.cumulative_cases_per_100k)+labelWidth+5;\n    //         if(options.region_chart_toggle == 'deaths') return xScaleDeaths(d.cumulative_deaths_per_100k)+labelWidth+5;\n    //         if(options.region_chart_toggle == 'vaccines') return xScaleVaccines(d.cumulative_vaccines_per_100k)+labelWidth+5;\n    //     })\n    //     .attr('opacity', function(d,i){\n    //         var d;\n    //         var id = d3.select(this).attr('data-id');\n    //         groupedData.forEach(function(dd,ii){\n    //             if(dd.code == id){\n    //                 d = dd;\n    //             }\n    //         })\n    //         var val = 0;\n    //         if(options.region_chart_toggle == 'cases') val = (d.cumulative_cases_per_100k);\n    //         if(options.region_chart_toggle == 'deaths') val = (d.cumulative_deaths_per_100k);\n    //         if(options.region_chart_toggle == 'vaccines') val = (d.cumulative_vaccines_per_100k);\n    //         if(val>0){ return 1 } else { return 0}\n    //     })\n\n    // }\n\n   \n\n}\n\nexport default drawRegionchart;\n"]},"metadata":{},"sourceType":"module"}