import { __values } from "tslib";
export var timeout = 200;
var unicodePatterns = [
    { l: 'a', s: /[ⓐａẚàáâầấẫẩãāăằắẵẳȧǡäǟảåǻǎȁȃạậặḁąⱥɐ]/gi },
    { l: 'aa', s: /ꜳ/gi },
    { l: 'ae', s: /[æǽǣ]/gi },
    { l: 'ao', s: /ꜵ/gi },
    { l: 'au', s: /ꜷ/gi },
    { l: 'av', s: /[ꜹꜻ]/gi },
    { l: 'ay', s: /ꜽ/gi },
    { l: 'b', s: /[ⓑｂḃḅḇƀƃɓ]/gi },
    { l: 'c', s: /[ⓒｃćĉċčçḉƈȼꜿↄ]/gi },
    { l: 'd', s: /[ⓓｄḋďḍḑḓḏđƌɖɗꝺ]/gi },
    { l: 'dz', s: /[ǳǆ]/gi },
    { l: 'e', s: /[ⓔｅèéêềếễểẽēḕḗĕėëẻěȅȇẹệȩḝęḙḛɇɛǝ]/gi },
    { l: 'f', s: /[ⓕｆḟƒꝼ]/gi },
    { l: 'g', s: /[ⓖｇǵĝḡğġǧģǥɠꞡᵹꝿ]/gi },
    { l: 'h', s: /[ⓗｈĥḣḧȟḥḩḫẖħⱨⱶɥ]/gi },
    { l: 'hv', s: /ƕ/gi },
    { l: 'i', s: /[ⓘｉìíîĩīĭİïḯỉǐȉȋịįḭɨı]/gi },
    { l: 'j', s: /[ⓙｊĵǰɉ]/gi },
    { l: 'k', s: /[ⓚｋḱǩḳķḵƙⱪꝁꝃꝅꞣ]/gi },
    { l: 'l', s: /[ⓛｌŀĺľḷḹļḽḻſłƚɫⱡꝉꞁꝇꝆ]/gi },
    { l: 'lj', s: /ǉ/gi },
    { l: 'm', s: /[ⓜｍḿṁṃɱɯ]/gi },
    { l: 'n', s: /[ⓝｎǹńñṅňṇņṋṉƞɲŉꞑꞥ]/gi },
    { l: 'nj', s: /ǌ/gi },
    { l: 'o', s: /[ⓞｏòóôồốỗổõṍȭṏōṑṓŏȯȱöȫỏőǒȍȏơờớỡởợọộǫǭøǿɔƟꝋꝍɵ]/gi },
    { l: 'oi', s: /ƣ/gi },
    { l: 'oe', s: /œ/gi },
    { l: 'oo', s: /ꝏ/gi },
    { l: 'ou', s: /ȣ/gi },
    { l: 'p', s: /[ⓟｐṕṗƥᵽꝑꝓꝕ]/gi },
    { l: 'q', s: /[ⓠｑɋꝗꝙ]/gi },
    { l: 'r', s: /[ⓡｒŕṙřȑȓṛṝŗṟɍɽꝛꞧꞃ]/gi },
    { l: 's', s: /[ⓢｓßẞśṥŝṡšṧṣṩșşȿꞩꞅẛ]/gi },
    { l: 't', s: /[ⓣｔṫẗťṭțţṱṯŧƭʈⱦꞇ]/gi },
    { l: 'tz', s: /ꜩ/gi },
    { l: 'u', s: /[ⓤｕùúûũṹūṻŭüǜǘǖǚủůűǔȕȗưừứữửựụṳųṷṵʉ]/gi },
    { l: 'v', s: /[ⓥｖṽṿʋꝟʌ]/gi },
    { l: 'vy', s: /ꝡ/gi },
    { l: 'w', s: /[ⓦｗẁẃŵẇẅẘẉⱳ]/gi },
    { l: 'x', s: /[ⓧｘẋẍ]/gi },
    { l: 'y', s: /[ⓨｙỳýŷỹȳẏÿỷẙỵƴɏỿ]/gi },
    { l: 'z', s: /[ⓩｚźẑżžẓẕƶȥɀⱬꝣ]/gi }
];
function getScrollUpIndex(data, value) {
    var e_1, _a;
    var index = 0;
    try {
        for (var data_1 = __values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
            var groupOrOption = data_1_1.value;
            var options = groupOrOption.options;
            if (options) {
                index++;
                var valueIndex = options.findIndex(function (op) { return op.value === value; });
                if (valueIndex !== -1) {
                    return index + valueIndex;
                }
                else {
                    index += options.length;
                }
            }
            else {
                if (groupOrOption.value === value) {
                    return index;
                }
                else {
                    index++;
                }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return 0;
}
export function getOptionByValue(data, value) {
    var e_2, _a, e_3, _b;
    try {
        for (var data_2 = __values(data), data_2_1 = data_2.next(); !data_2_1.done; data_2_1 = data_2.next()) {
            var groupOrOption = data_2_1.value;
            var options = groupOrOption.options;
            if (options) {
                try {
                    for (var options_1 = (e_3 = void 0, __values(options)), options_1_1 = options_1.next(); !options_1_1.done; options_1_1 = options_1.next()) {
                        var option = options_1_1.value;
                        if (option.value === value) {
                            return option;
                        }
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (options_1_1 && !options_1_1.done && (_b = options_1.return)) _b.call(options_1);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            }
            else {
                if (groupOrOption.value === value) {
                    return groupOrOption;
                }
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (data_2_1 && !data_2_1.done && (_a = data_2.return)) _a.call(data_2);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return null;
}
export function getOptionsByValue(data, value, multiple) {
    var e_4, _a;
    if (multiple) {
        var values = Array.isArray(value) ? value : [];
        var result = [];
        try {
            for (var values_1 = __values(values), values_1_1 = values_1.next(); !values_1_1.done; values_1_1 = values_1.next()) {
                var v = values_1_1.value;
                var option = getOptionByValue(data, v);
                if (option) {
                    result.push(option);
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (values_1_1 && !values_1_1.done && (_a = values_1.return)) _a.call(values_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return result;
    }
    return getOptionByValue(data, value);
}
export function getFirstAvailableOption(data) {
    var e_5, _a, e_6, _b;
    try {
        for (var data_3 = __values(data), data_3_1 = data_3.next(); !data_3_1.done; data_3_1 = data_3.next()) {
            var groupOrOption = data_3_1.value;
            var options = groupOrOption.options;
            if (options) {
                try {
                    for (var options_2 = (e_6 = void 0, __values(options)), options_2_1 = options_2.next(); !options_2_1.done; options_2_1 = options_2.next()) {
                        var option = options_2_1.value;
                        if (!option.disabled) {
                            return option.value;
                        }
                    }
                }
                catch (e_6_1) { e_6 = { error: e_6_1 }; }
                finally {
                    try {
                        if (options_2_1 && !options_2_1.done && (_b = options_2.return)) _b.call(options_2);
                    }
                    finally { if (e_6) throw e_6.error; }
                }
            }
            else {
                var option = groupOrOption;
                if (!option.disabled) {
                    return option.value;
                }
            }
        }
    }
    catch (e_5_1) { e_5 = { error: e_5_1 }; }
    finally {
        try {
            if (data_3_1 && !data_3_1.done && (_a = data_3.return)) _a.call(data_3);
        }
        finally { if (e_5) throw e_5.error; }
    }
    return null;
}
function getOptionsCount(data) {
    var e_7, _a;
    var count = 0;
    try {
        for (var data_4 = __values(data), data_4_1 = data_4.next(); !data_4_1.done; data_4_1 = data_4.next()) {
            var groupOrOption = data_4_1.value;
            var options = groupOrOption.options;
            if (options) {
                count += options.length;
            }
            else {
                count++;
            }
        }
    }
    catch (e_7_1) { e_7 = { error: e_7_1 }; }
    finally {
        try {
            if (data_4_1 && !data_4_1.done && (_a = data_4.return)) _a.call(data_4);
        }
        finally { if (e_7) throw e_7.error; }
    }
    return count;
}
export function valueIsNotInFilteredData(filteredData, value) {
    var e_8, _a, e_9, _b;
    if (isNullOrUndefined(value)) {
        return true;
    }
    try {
        for (var filteredData_1 = __values(filteredData), filteredData_1_1 = filteredData_1.next(); !filteredData_1_1.done; filteredData_1_1 = filteredData_1.next()) {
            var groupOrOption = filteredData_1_1.value;
            var options = groupOrOption.options;
            if (options) {
                try {
                    for (var options_3 = (e_9 = void 0, __values(options)), options_3_1 = options_3.next(); !options_3_1.done; options_3_1 = options_3.next()) {
                        var option = options_3_1.value;
                        if (option.value === value) {
                            return false;
                        }
                    }
                }
                catch (e_9_1) { e_9 = { error: e_9_1 }; }
                finally {
                    try {
                        if (options_3_1 && !options_3_1.done && (_b = options_3.return)) _b.call(options_3);
                    }
                    finally { if (e_9) throw e_9.error; }
                }
            }
            else {
                if (groupOrOption.value === value) {
                    return false;
                }
            }
        }
    }
    catch (e_8_1) { e_8 = { error: e_8_1 }; }
    finally {
        try {
            if (filteredData_1_1 && !filteredData_1_1.done && (_a = filteredData_1.return)) _a.call(filteredData_1);
        }
        finally { if (e_8) throw e_8.error; }
    }
    return true;
}
export function getPreviousOption(filteredData, hoveringValue) {
    var findIt = isNullOrUndefined(hoveringValue);
    for (var i = filteredData.length - 1; i >= 0; i--) {
        var groupOrOption = filteredData[i];
        var options = groupOrOption.options;
        if (options) {
            for (var j = options.length - 1; j >= 0; j--) {
                var option = options[j];
                if (findIt && !option.disabled) {
                    return option.value;
                }
                findIt = option.value === hoveringValue;
            }
        }
        else {
            var option = groupOrOption;
            if (findIt && !option.disabled) {
                return option.value;
            }
            findIt = option.value === hoveringValue;
        }
    }
    return findIt ? hoveringValue : null;
}
export function getNextOption(filteredData, hoveringValue) {
    var e_10, _a, e_11, _b;
    var findIt = isNullOrUndefined(hoveringValue);
    try {
        for (var filteredData_2 = __values(filteredData), filteredData_2_1 = filteredData_2.next(); !filteredData_2_1.done; filteredData_2_1 = filteredData_2.next()) {
            var groupOrOption = filteredData_2_1.value;
            var options = groupOrOption.options;
            if (options) {
                try {
                    for (var options_4 = (e_11 = void 0, __values(options)), options_4_1 = options_4.next(); !options_4_1.done; options_4_1 = options_4.next()) {
                        var option = options_4_1.value;
                        if (findIt) {
                            if (!option.disabled) {
                                return option.value;
                            }
                        }
                        else {
                            findIt = option.value === hoveringValue;
                        }
                    }
                }
                catch (e_11_1) { e_11 = { error: e_11_1 }; }
                finally {
                    try {
                        if (options_4_1 && !options_4_1.done && (_b = options_4.return)) _b.call(options_4);
                    }
                    finally { if (e_11) throw e_11.error; }
                }
            }
            else {
                var option = groupOrOption;
                if (findIt) {
                    if (!option.disabled) {
                        return option.value;
                    }
                }
                else {
                    findIt = option.value === hoveringValue;
                }
            }
        }
    }
    catch (e_10_1) { e_10 = { error: e_10_1 }; }
    finally {
        try {
            if (filteredData_2_1 && !filteredData_2_1.done && (_a = filteredData_2.return)) _a.call(filteredData_2);
        }
        finally { if (e_10) throw e_10.error; }
    }
    return findIt ? hoveringValue : null;
}
function isNullOrUndefined(value) {
    return value === null || value === undefined;
}
export function getLastScrollTopIndex(hoveringValue, results, filteredData, lastScrollTopIndex) {
    if (isNullOrUndefined(hoveringValue)) {
        results.scrollTop = 0;
        return 0;
    }
    else {
        var scrollTop = getScrollUpIndex(filteredData, hoveringValue);
        if (scrollTop - lastScrollTopIndex > 5) {
            lastScrollTopIndex += scrollTop - lastScrollTopIndex - 5;
            var item = results.querySelectorAll('li').item(scrollTop);
            if (item) {
                results.scrollTop = item.offsetTop - results.offsetHeight;
            }
            return lastScrollTopIndex;
        }
        if (lastScrollTopIndex - scrollTop > 0) {
            lastScrollTopIndex -= lastScrollTopIndex - scrollTop;
            var item = results.querySelectorAll('li').item(lastScrollTopIndex - 1);
            if (item) {
                results.scrollTop = item.offsetTop;
            }
            return lastScrollTopIndex;
        }
        return null;
    }
}
function containSearchText(label, searchText, editPattern) {
    return searchText
        ? formatSansUnicode(label).match(new RegExp(formatPattern(searchText, editPattern), 'i')) !== null
        : true;
}
function protectPattern(str) {
    return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
}
function formatSansUnicode(str) {
    var e_12, _a;
    try {
        for (var unicodePatterns_1 = __values(unicodePatterns), unicodePatterns_1_1 = unicodePatterns_1.next(); !unicodePatterns_1_1.done; unicodePatterns_1_1 = unicodePatterns_1.next()) {
            var unicodePattern = unicodePatterns_1_1.value;
            str = str.replace(unicodePattern.s, unicodePattern.l);
        }
    }
    catch (e_12_1) { e_12 = { error: e_12_1 }; }
    finally {
        try {
            if (unicodePatterns_1_1 && !unicodePatterns_1_1.done && (_a = unicodePatterns_1.return)) _a.call(unicodePatterns_1);
        }
        finally { if (e_12) throw e_12.error; }
    }
    return str;
}
function formatPattern(str, editPattern) {
    str = formatSansUnicode(protectPattern(str));
    if (editPattern && typeof editPattern === 'function') {
        str = editPattern(str);
    }
    return str;
}
export function getFilteredData(data, searchText, editPattern) {
    var e_13, _a;
    if (searchText) {
        var result = [];
        try {
            for (var data_5 = __values(data), data_5_1 = data_5.next(); !data_5_1.done; data_5_1 = data_5.next()) {
                var groupOrOption = data_5_1.value;
                var options = groupOrOption.options;
                if (options) {
                    if (options.some(function (group) { return containSearchText(group.label, searchText, editPattern); })) {
                        var filteredOptions = options.filter(function (group) { return containSearchText(group.label, searchText, editPattern); });
                        result.push({
                            label: groupOrOption.label,
                            options: filteredOptions
                        });
                    }
                }
                else if (containSearchText(groupOrOption.label, searchText, editPattern)) {
                    result.push(groupOrOption);
                }
            }
        }
        catch (e_13_1) { e_13 = { error: e_13_1 }; }
        finally {
            try {
                if (data_5_1 && !data_5_1.done && (_a = data_5.return)) _a.call(data_5);
            }
            finally { if (e_13) throw e_13.error; }
        }
        return result;
    }
    else {
        return data;
    }
}
export function getOptionStyle(option, hoveringValue) {
    var extraClasses = option.classes ? ' ' + option.classes : '';
    return option.value === hoveringValue
        ? 'select2-results__option select2-results__option--highlighted' + extraClasses
        : 'select2-results__option' + extraClasses;
}
export function getDropdownStyle(isOpen) {
    return isOpen
        ? 'select2-container select2-container--default select2-container-dropdown select2-container--open'
        : 'select2-container select2-container--default select2-container-dropdown';
}
export function getContainerStyle(disabled, isOpen) {
    if (disabled === void 0) { disabled = undefined; }
    return "select2 select2-container select2-container--default " + (disabled ? 'select2-container--disabled' : '') + " "
        + ((isOpen ? 'select2-container--open select2-container--focus' : '') + " select2-container--below");
}
export function getSelectionStyle(multiple) {
    if (multiple === void 0) { multiple = undefined; }
    return "select2-selection select2-selection--" + (multiple ? 'multiple' : 'single');
}
var defaultMinCountForSearch = 6;
export function isSearchboxHiddex(data, minCountForSearch) {
    if (typeof minCountForSearch !== 'number') {
        minCountForSearch = defaultMinCountForSearch;
    }
    var optionCount = getOptionsCount(data);
    return optionCount < minCountForSearch;
}
export function getSearchStyle(isHidden) {
    return isHidden
        ? 'select2-search select2-search--dropdown select2-search--hide'
        : 'select2-search select2-search--dropdown';
}
export function isSelected(options, option, multiple) {
    if (multiple) {
        return options && options.some(function (op) { return op.value === option.value; }) ? 'true' : 'false';
    }
    else {
        return options && option.value === options.value ? 'true' : 'false';
    }
}
export function removeSelection(options, option) {
    for (var i = 0; i < options.length; i++) {
        if (options[i].value === option.value) {
            options.splice(i, 1);
            return;
        }
    }
}
